/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using Galaxy_Editor_2.Compiler.Generated.node;

namespace Galaxy_Editor_2.Compiler.Generated.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAASourceFile(AASourceFile node);
    void CaseAAProgram(AAProgram node);
    void CaseAAName(AAName node);
    void CaseAFieldDecl(AFieldDecl node);
    void CaseAPropertyDecl(APropertyDecl node);
    void CaseAThisArrayPropertyDecl(AThisArrayPropertyDecl node);
    void CaseAMethodDecl(AMethodDecl node);
    void CaseAIncludeDecl(AIncludeDecl node);
    void CaseAStructDecl(AStructDecl node);
    void CaseAEnrichmentDecl(AEnrichmentDecl node);
    void CaseAUsingDecl(AUsingDecl node);
    void CaseAPreloadBankDecl(APreloadBankDecl node);
    void CaseAInitializerDecl(AInitializerDecl node);
    void CaseATriggerDecl(ATriggerDecl node);
    void CaseATypedefDecl(ATypedefDecl node);
    void CaseAConstructorDecl(AConstructorDecl node);
    void CaseADeconstructorDecl(ADeconstructorDecl node);
    void CaseANamespaceDecl(ANamespaceDecl node);
    void CaseATempNamespaceDecl(ATempNamespaceDecl node);
    void CaseAOperatorDecl(AOperatorDecl node);
    void CaseAEnumDecl(AEnumDecl node);
    void CaseAAEnumLocal(AAEnumLocal node);
    void CaseALibraryNameInitializerParam(ALibraryNameInitializerParam node);
    void CaseALibraryVersionInitializerParam(ALibraryVersionInitializerParam node);
    void CaseASupportedVersionsInitializerParam(ASupportedVersionsInitializerParam node);
    void CaseARequiredLibrariesInitializerParam(ARequiredLibrariesInitializerParam node);
    void CaseAALocalDecl(AALocalDecl node);
    void CaseAMultiLocalDecl(AMultiLocalDecl node);
    void CaseADeclLocalDecl(ADeclLocalDecl node);
    void CaseAPublicVisibilityModifier(APublicVisibilityModifier node);
    void CaseAPrivateVisibilityModifier(APrivateVisibilityModifier node);
    void CaseAProtectedVisibilityModifier(AProtectedVisibilityModifier node);
    void CaseAVoidType(AVoidType node);
    void CaseAArrayTempType(AArrayTempType node);
    void CaseADynamicArrayType(ADynamicArrayType node);
    void CaseANamedType(ANamedType node);
    void CaseANullType(ANullType node);
    void CaseAPointerType(APointerType node);
    void CaseAGenericType(AGenericType node);
    void CaseAABlock(AABlock node);
    void CaseAExpStm(AExpStm node);
    void CaseAIfThenStm(AIfThenStm node);
    void CaseAIfThenElseStm(AIfThenElseStm node);
    void CaseAWhileStm(AWhileStm node);
    void CaseAEmptyStm(AEmptyStm node);
    void CaseABlockStm(ABlockStm node);
    void CaseAVoidReturnStm(AVoidReturnStm node);
    void CaseAValueReturnStm(AValueReturnStm node);
    void CaseALocalDeclStm(ALocalDeclStm node);
    void CaseABreakStm(ABreakStm node);
    void CaseAContinueStm(AContinueStm node);
    void CaseAForStm(AForStm node);
    void CaseAAsyncInvokeStm(AAsyncInvokeStm node);
    void CaseASwitchStm(ASwitchStm node);
    void CaseASwitchCaseStm(ASwitchCaseStm node);
    void CaseADeleteStm(ADeleteStm node);
    void CaseACaseSwitchCaseType(ACaseSwitchCaseType node);
    void CaseADefaultSwitchCaseType(ADefaultSwitchCaseType node);
    void CaseABinopExp(ABinopExp node);
    void CaseAUnopExp(AUnopExp node);
    void CaseAIncDecExp(AIncDecExp node);
    void CaseAIntConstExp(AIntConstExp node);
    void CaseAHexConstExp(AHexConstExp node);
    void CaseAOctalConstExp(AOctalConstExp node);
    void CaseAFixedConstExp(AFixedConstExp node);
    void CaseAStringConstExp(AStringConstExp node);
    void CaseACharConstExp(ACharConstExp node);
    void CaseABooleanConstExp(ABooleanConstExp node);
    void CaseANullExp(ANullExp node);
    void CaseASimpleInvokeExp(ASimpleInvokeExp node);
    void CaseANonstaticInvokeExp(ANonstaticInvokeExp node);
    void CaseASyncInvokeExp(ASyncInvokeExp node);
    void CaseALvalueExp(ALvalueExp node);
    void CaseAAssignmentExp(AAssignmentExp node);
    void CaseASAssignmentExp(ASAssignmentExp node);
    void CaseAShadySAssignmentExp(AShadySAssignmentExp node);
    void CaseAParenExp(AParenExp node);
    void CaseACastExp(ACastExp node);
    void CaseATempCastExp(ATempCastExp node);
    void CaseASharpCastExp(ASharpCastExp node);
    void CaseANewExp(ANewExp node);
    void CaseADelegateExp(ADelegateExp node);
    void CaseADelegateInvokeExp(ADelegateInvokeExp node);
    void CaseAIfExp(AIfExp node);
    void CaseAArrayResizeExp(AArrayResizeExp node);
    void CaseAPointerShadyDynamicOps(APointerShadyDynamicOps node);
    void CaseAArrayShadyDynamicOps(AArrayShadyDynamicOps node);
    void CaseAALocalDeclRight(AALocalDeclRight node);
    void CaseAAssignAssignop(AAssignAssignop node);
    void CaseAAddAssignop(AAddAssignop node);
    void CaseASubAssignop(ASubAssignop node);
    void CaseAMulAssignop(AMulAssignop node);
    void CaseADivAssignop(ADivAssignop node);
    void CaseAModAssignop(AModAssignop node);
    void CaseALocalLvalue(ALocalLvalue node);
    void CaseATypeLvalue(ATypeLvalue node);
    void CaseAFieldLvalue(AFieldLvalue node);
    void CaseAPropertyLvalue(APropertyLvalue node);
    void CaseANamespaceLvalue(ANamespaceLvalue node);
    void CaseAStructFieldLvalue(AStructFieldLvalue node);
    void CaseAStructLvalue(AStructLvalue node);
    void CaseAArrayLvalue(AArrayLvalue node);
    void CaseAPointerMultiLvalue(APointerMultiLvalue node);
    void CaseAPointerLvalue(APointerLvalue node);
    void CaseAAmbiguousNameLvalue(AAmbiguousNameLvalue node);
    void CaseAPArrayLengthLvalue(APArrayLengthLvalue node);
    void CaseAArrayLengthLvalue(AArrayLengthLvalue node);
    void CaseAThisLvalue(AThisLvalue node);
    void CaseAValueLvalue(AValueLvalue node);
    void CaseADotDotType(ADotDotType node);
    void CaseAArrowDotType(AArrowDotType node);
    void CaseATrueBool(ATrueBool node);
    void CaseAFalseBool(AFalseBool node);
    void CaseAPlusBinop(APlusBinop node);
    void CaseAMinusBinop(AMinusBinop node);
    void CaseATimesBinop(ATimesBinop node);
    void CaseADivideBinop(ADivideBinop node);
    void CaseAModuloBinop(AModuloBinop node);
    void CaseAEqBinop(AEqBinop node);
    void CaseANeBinop(ANeBinop node);
    void CaseALtBinop(ALtBinop node);
    void CaseALeBinop(ALeBinop node);
    void CaseAGtBinop(AGtBinop node);
    void CaseAGeBinop(AGeBinop node);
    void CaseAAndBinop(AAndBinop node);
    void CaseAOrBinop(AOrBinop node);
    void CaseAXorBinop(AXorBinop node);
    void CaseALazyAndBinop(ALazyAndBinop node);
    void CaseALazyOrBinop(ALazyOrBinop node);
    void CaseALBitShiftBinop(ALBitShiftBinop node);
    void CaseARBitShiftBinop(ARBitShiftBinop node);
    void CaseAAeqBinop(AAeqBinop node);
    void CaseAAneBinop(AAneBinop node);
    void CaseAConcatBinop(AConcatBinop node);
    void CaseANegateUnop(ANegateUnop node);
    void CaseAComplementUnop(AComplementUnop node);
    void CaseABooleanToStringUnop(ABooleanToStringUnop node);
    void CaseAByteToStringUnop(AByteToStringUnop node);
    void CaseAShortToStringUnop(AShortToStringUnop node);
    void CaseAIntToStringUnop(AIntToStringUnop node);
    void CaseACharToStringUnop(ACharToStringUnop node);
    void CaseAObjectToStringUnop(AObjectToStringUnop node);
    void CaseAPreIncIncDecOp(APreIncIncDecOp node);
    void CaseAPreDecIncDecOp(APreDecIncDecOp node);
    void CaseAPostIncIncDecOp(APostIncIncDecOp node);
    void CaseAPostDecIncDecOp(APostDecIncDecOp node);

    void CaseTWhiteSpace(TWhiteSpace node);
    void CaseTTraditionalComment(TTraditionalComment node);
    void CaseTDocumentationComment(TDocumentationComment node);
    void CaseTEndOfLineComment(TEndOfLineComment node);
    void CaseTBreak(TBreak node);
    void CaseTConst(TConst node);
    void CaseTContinue(TContinue node);
    void CaseTElse(TElse node);
    void CaseTIf(TIf node);
    void CaseTInclude(TInclude node);
    void CaseTNative(TNative node);
    void CaseTReturn(TReturn node);
    void CaseTStatic(TStatic node);
    void CaseTStruct(TStruct node);
    void CaseTVoid(TVoid node);
    void CaseTWhile(TWhile node);
    void CaseTEscapeGlobal(TEscapeGlobal node);
    void CaseTInline(TInline node);
    void CaseTRef(TRef node);
    void CaseTOut(TOut node);
    void CaseTTrigger(TTrigger node);
    void CaseTEvents(TEvents node);
    void CaseTConditions(TConditions node);
    void CaseTActions(TActions node);
    void CaseTNamespace(TNamespace node);
    void CaseTUsing(TUsing node);
    void CaseTPreloadBank(TPreloadBank node);
    void CaseTAsyncInvoke(TAsyncInvoke node);
    void CaseTSyncInvoke(TSyncInvoke node);
    void CaseTSwitch(TSwitch node);
    void CaseTCase(TCase node);
    void CaseTDefault(TDefault node);
    void CaseTDelegate(TDelegate node);
    void CaseTTypedef(TTypedef node);
    void CaseTGet(TGet node);
    void CaseTSet(TSet node);
    void CaseTValue(TValue node);
    void CaseTEnrichment(TEnrichment node);
    void CaseTBase(TBase node);
    void CaseTPublic(TPublic node);
    void CaseTPrivate(TPrivate node);
    void CaseTProtected(TProtected node);
    void CaseTOperator(TOperator node);
    void CaseTEnum(TEnum node);
    void CaseTInitializer(TInitializer node);
    void CaseTLibraryName(TLibraryName node);
    void CaseTLibraryVersion(TLibraryVersion node);
    void CaseTSupportedVersions(TSupportedVersions node);
    void CaseTRequiredLibraries(TRequiredLibraries node);
    void CaseTDelete(TDelete node);
    void CaseTNew(TNew node);
    void CaseTClassToken(TClassToken node);
    void CaseTThis(TThis node);
    void CaseTFor(TFor node);
    void CaseTTrue(TTrue node);
    void CaseTFalse(TFalse node);
    void CaseTNull(TNull node);
    void CaseTLParen(TLParen node);
    void CaseTRParen(TRParen node);
    void CaseTLBrace(TLBrace node);
    void CaseTRBrace(TRBrace node);
    void CaseTLBracket(TLBracket node);
    void CaseTRBracket(TRBracket node);
    void CaseTSemicolon(TSemicolon node);
    void CaseTComma(TComma node);
    void CaseTDot(TDot node);
    void CaseTArrow(TArrow node);
    void CaseTColon(TColon node);
    void CaseTQuestionmark(TQuestionmark node);
    void CaseTTilde(TTilde node);
    void CaseTSharp(TSharp node);
    void CaseTAssign(TAssign node);
    void CaseTAssignAdd(TAssignAdd node);
    void CaseTAssignSub(TAssignSub node);
    void CaseTAssignMul(TAssignMul node);
    void CaseTAssignDiv(TAssignDiv node);
    void CaseTAssignMod(TAssignMod node);
    void CaseTComplement(TComplement node);
    void CaseTAndAnd(TAndAnd node);
    void CaseTOrOr(TOrOr node);
    void CaseTLt(TLt node);
    void CaseTGt(TGt node);
    void CaseTEq(TEq node);
    void CaseTLteq(TLteq node);
    void CaseTGteq(TGteq node);
    void CaseTNeq(TNeq node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTStar(TStar node);
    void CaseTDiv(TDiv node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTXor(TXor node);
    void CaseTMod(TMod node);
    void CaseTLBitShift(TLBitShift node);
    void CaseTRBitShift(TRBitShift node);
    void CaseTPlusPlus(TPlusPlus node);
    void CaseTMinusMinus(TMinusMinus node);
    void CaseTIntegerLiteral(TIntegerLiteral node);
    void CaseTHexLiteral(THexLiteral node);
    void CaseTOctalLiteral(TOctalLiteral node);
    void CaseTFixedLiteral(TFixedLiteral node);
    void CaseTStringLiteral(TStringLiteral node);
    void CaseTCharLiteral(TCharLiteral node);
    void CaseTIdentifier(TIdentifier node);
    void CaseTCommentBegin(TCommentBegin node);
    void CaseTCommentEnd(TCommentEnd node);
    void CaseTUnknown(TUnknown node);
    void CaseEOF(EOF node);
}


[Serializable]
public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAASourceFile(AASourceFile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAProgram(AAProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAName(AAName node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFieldDecl(AFieldDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPropertyDecl(APropertyDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThisArrayPropertyDecl(AThisArrayPropertyDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethodDecl(AMethodDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIncludeDecl(AIncludeDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStructDecl(AStructDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEnrichmentDecl(AEnrichmentDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAUsingDecl(AUsingDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPreloadBankDecl(APreloadBankDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAInitializerDecl(AInitializerDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATriggerDecl(ATriggerDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATypedefDecl(ATypedefDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstructorDecl(AConstructorDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeconstructorDecl(ADeconstructorDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANamespaceDecl(ANamespaceDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATempNamespaceDecl(ATempNamespaceDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOperatorDecl(AOperatorDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEnumDecl(AEnumDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAEnumLocal(AAEnumLocal node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALibraryNameInitializerParam(ALibraryNameInitializerParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALibraryVersionInitializerParam(ALibraryVersionInitializerParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASupportedVersionsInitializerParam(ASupportedVersionsInitializerParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARequiredLibrariesInitializerParam(ARequiredLibrariesInitializerParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAALocalDecl(AALocalDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiLocalDecl(AMultiLocalDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclLocalDecl(ADeclLocalDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPublicVisibilityModifier(APublicVisibilityModifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPrivateVisibilityModifier(APrivateVisibilityModifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProtectedVisibilityModifier(AProtectedVisibilityModifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVoidType(AVoidType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayTempType(AArrayTempType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADynamicArrayType(ADynamicArrayType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANamedType(ANamedType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANullType(ANullType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPointerType(APointerType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGenericType(AGenericType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAABlock(AABlock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpStm(AExpStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfThenStm(AIfThenStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfThenElseStm(AIfThenElseStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStm(AWhileStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEmptyStm(AEmptyStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABlockStm(ABlockStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVoidReturnStm(AVoidReturnStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAValueReturnStm(AValueReturnStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALocalDeclStm(ALocalDeclStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABreakStm(ABreakStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAContinueStm(AContinueStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAForStm(AForStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAsyncInvokeStm(AAsyncInvokeStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASwitchStm(ASwitchStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASwitchCaseStm(ASwitchCaseStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeleteStm(ADeleteStm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACaseSwitchCaseType(ACaseSwitchCaseType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADefaultSwitchCaseType(ADefaultSwitchCaseType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABinopExp(ABinopExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAUnopExp(AUnopExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIncDecExp(AIncDecExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntConstExp(AIntConstExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHexConstExp(AHexConstExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOctalConstExp(AOctalConstExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFixedConstExp(AFixedConstExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringConstExp(AStringConstExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACharConstExp(ACharConstExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanConstExp(ABooleanConstExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANullExp(ANullExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASimpleInvokeExp(ASimpleInvokeExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANonstaticInvokeExp(ANonstaticInvokeExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASyncInvokeExp(ASyncInvokeExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALvalueExp(ALvalueExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentExp(AAssignmentExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASAssignmentExp(ASAssignmentExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAShadySAssignmentExp(AShadySAssignmentExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenExp(AParenExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACastExp(ACastExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATempCastExp(ATempCastExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASharpCastExp(ASharpCastExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANewExp(ANewExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADelegateExp(ADelegateExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADelegateInvokeExp(ADelegateInvokeExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfExp(AIfExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayResizeExp(AArrayResizeExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPointerShadyDynamicOps(APointerShadyDynamicOps node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayShadyDynamicOps(AArrayShadyDynamicOps node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAALocalDeclRight(AALocalDeclRight node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignAssignop(AAssignAssignop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddAssignop(AAddAssignop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubAssignop(ASubAssignop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMulAssignop(AMulAssignop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivAssignop(ADivAssignop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAModAssignop(AModAssignop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALocalLvalue(ALocalLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATypeLvalue(ATypeLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFieldLvalue(AFieldLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPropertyLvalue(APropertyLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANamespaceLvalue(ANamespaceLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStructFieldLvalue(AStructFieldLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStructLvalue(AStructLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayLvalue(AArrayLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPointerMultiLvalue(APointerMultiLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPointerLvalue(APointerLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAmbiguousNameLvalue(AAmbiguousNameLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPArrayLengthLvalue(APArrayLengthLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayLengthLvalue(AArrayLengthLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThisLvalue(AThisLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAValueLvalue(AValueLvalue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADotDotType(ADotDotType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrowDotType(AArrowDotType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATrueBool(ATrueBool node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFalseBool(AFalseBool node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusBinop(APlusBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMinusBinop(AMinusBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATimesBinop(ATimesBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideBinop(ADivideBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAModuloBinop(AModuloBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqBinop(AEqBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANeBinop(ANeBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALtBinop(ALtBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALeBinop(ALeBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGtBinop(AGtBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGeBinop(AGeBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndBinop(AAndBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrBinop(AOrBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAXorBinop(AXorBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALazyAndBinop(ALazyAndBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALazyOrBinop(ALazyOrBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALBitShiftBinop(ALBitShiftBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARBitShiftBinop(ARBitShiftBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAeqBinop(AAeqBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAneBinop(AAneBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConcatBinop(AConcatBinop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegateUnop(ANegateUnop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAComplementUnop(AComplementUnop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanToStringUnop(ABooleanToStringUnop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAByteToStringUnop(AByteToStringUnop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAShortToStringUnop(AShortToStringUnop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntToStringUnop(AIntToStringUnop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACharToStringUnop(ACharToStringUnop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAObjectToStringUnop(AObjectToStringUnop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPreIncIncDecOp(APreIncIncDecOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPreDecIncDecOp(APreDecIncDecOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPostIncIncDecOp(APostIncIncDecOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPostDecIncDecOp(APostDecIncDecOp node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTWhiteSpace(TWhiteSpace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTraditionalComment(TTraditionalComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDocumentationComment(TDocumentationComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndOfLineComment(TEndOfLineComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBreak(TBreak node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConst(TConst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTContinue(TContinue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInclude(TInclude node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNative(TNative node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStatic(TStatic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStruct(TStruct node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVoid(TVoid node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEscapeGlobal(TEscapeGlobal node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInline(TInline node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRef(TRef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOut(TOut node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTrigger(TTrigger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEvents(TEvents node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConditions(TConditions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTActions(TActions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNamespace(TNamespace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTUsing(TUsing node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPreloadBank(TPreloadBank node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAsyncInvoke(TAsyncInvoke node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSyncInvoke(TSyncInvoke node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSwitch(TSwitch node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCase(TCase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDefault(TDefault node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDelegate(TDelegate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTypedef(TTypedef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGet(TGet node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSet(TSet node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTValue(TValue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEnrichment(TEnrichment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBase(TBase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPublic(TPublic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPrivate(TPrivate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTProtected(TProtected node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOperator(TOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEnum(TEnum node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInitializer(TInitializer node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLibraryName(TLibraryName node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLibraryVersion(TLibraryVersion node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSupportedVersions(TSupportedVersions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRequiredLibraries(TRequiredLibraries node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDelete(TDelete node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNew(TNew node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClassToken(TClassToken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTThis(TThis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFor(TFor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTrue(TTrue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFalse(TFalse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNull(TNull node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLParen(TLParen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRParen(TRParen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLBrace(TLBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRBrace(TRBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLBracket(TLBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRBracket(TRBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSemicolon(TSemicolon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDot(TDot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTArrow(TArrow node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTColon(TColon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTQuestionmark(TQuestionmark node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTilde(TTilde node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSharp(TSharp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssignAdd(TAssignAdd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssignSub(TAssignSub node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssignMul(TAssignMul node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssignDiv(TAssignDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssignMod(TAssignMod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComplement(TComplement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAndAnd(TAndAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOrOr(TOrOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLt(TLt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGt(TGt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEq(TEq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLteq(TLteq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGteq(TGteq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNeq(TNeq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStar(TStar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDiv(TDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTXor(TXor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMod(TMod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLBitShift(TLBitShift node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRBitShift(TRBitShift node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlusPlus(TPlusPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinusMinus(TMinusMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIntegerLiteral(TIntegerLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTHexLiteral(THexLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOctalLiteral(TOctalLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFixedLiteral(TFixedLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStringLiteral(TStringLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCharLiteral(TCharLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIdentifier(TIdentifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCommentBegin(TCommentBegin node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCommentEnd(TCommentEnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTUnknown(TUnknown node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


[Serializable]
public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPSourceFile().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAASourceFile(AASourceFile node)
    {
        DefaultIn(node);
    }

    public virtual void OutAASourceFile(AASourceFile node)
    {
        DefaultOut(node);
    }

    public override void CaseAASourceFile(AASourceFile node)
    {
        InAASourceFile(node);
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetUsings().Count];
            node.GetUsings().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        OutAASourceFile(node);
    }
    public virtual void InAAProgram(AAProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAProgram(AAProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAAProgram(AAProgram node)
    {
        InAAProgram(node);
        {
            Object[] temp = new Object[node.GetSourceFiles().Count];
            node.GetSourceFiles().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PSourceFile) temp[i]).Apply(this);
            }
        }
        OutAAProgram(node);
    }
    public virtual void InAAName(AAName node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAName(AAName node)
    {
        DefaultOut(node);
    }

    public override void CaseAAName(AAName node)
    {
        InAAName(node);
        {
            Object[] temp = new Object[node.GetIdentifier().Count];
            node.GetIdentifier().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TIdentifier) temp[i]).Apply(this);
            }
        }
        OutAAName(node);
    }
    public virtual void InAFieldDecl(AFieldDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFieldDecl(AFieldDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAFieldDecl(AFieldDecl node)
    {
        InAFieldDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        OutAFieldDecl(node);
    }
    public virtual void InAPropertyDecl(APropertyDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPropertyDecl(APropertyDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAPropertyDecl(APropertyDecl node)
    {
        InAPropertyDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetGetter() != null)
        {
            node.GetGetter().Apply(this);
        }
        if(node.GetSetter() != null)
        {
            node.GetSetter().Apply(this);
        }
        OutAPropertyDecl(node);
    }
    public virtual void InAThisArrayPropertyDecl(AThisArrayPropertyDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThisArrayPropertyDecl(AThisArrayPropertyDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAThisArrayPropertyDecl(AThisArrayPropertyDecl node)
    {
        InAThisArrayPropertyDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetArgType() != null)
        {
            node.GetArgType().Apply(this);
        }
        if(node.GetArgName() != null)
        {
            node.GetArgName().Apply(this);
        }
        if(node.GetGetter() != null)
        {
            node.GetGetter().Apply(this);
        }
        if(node.GetSetter() != null)
        {
            node.GetSetter().Apply(this);
        }
        OutAThisArrayPropertyDecl(node);
    }
    public virtual void InAMethodDecl(AMethodDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodDecl(AMethodDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodDecl(AMethodDecl node)
    {
        InAMethodDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetTrigger() != null)
        {
            node.GetTrigger().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        if(node.GetInline() != null)
        {
            node.GetInline().Apply(this);
        }
        if(node.GetDelegate() != null)
        {
            node.GetDelegate().Apply(this);
        }
        if(node.GetReturnType() != null)
        {
            node.GetReturnType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFormals().Count];
            node.GetFormals().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PLocalDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAMethodDecl(node);
    }
    public virtual void InAIncludeDecl(AIncludeDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIncludeDecl(AIncludeDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAIncludeDecl(AIncludeDecl node)
    {
        InAIncludeDecl(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAIncludeDecl(node);
    }
    public virtual void InAStructDecl(AStructDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStructDecl(AStructDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAStructDecl(AStructDecl node)
    {
        InAStructDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetClassToken() != null)
        {
            node.GetClassToken().Apply(this);
        }
        if(node.GetDimention() != null)
        {
            node.GetDimention().Apply(this);
        }
        if(node.GetIntDim() != null)
        {
            node.GetIntDim().Apply(this);
        }
        if(node.GetEndToken() != null)
        {
            node.GetEndToken().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetGenericVars().Count];
            node.GetGenericVars().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TIdentifier) temp[i]).Apply(this);
            }
        }
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetLocals().Count];
            node.GetLocals().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PLocalDecl) temp[i]).Apply(this);
            }
        }
        OutAStructDecl(node);
    }
    public virtual void InAEnrichmentDecl(AEnrichmentDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEnrichmentDecl(AEnrichmentDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAEnrichmentDecl(AEnrichmentDecl node)
    {
        InAEnrichmentDecl(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetDimention() != null)
        {
            node.GetDimention().Apply(this);
        }
        if(node.GetIntDim() != null)
        {
            node.GetIntDim().Apply(this);
        }
        if(node.GetEndToken() != null)
        {
            node.GetEndToken().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        OutAEnrichmentDecl(node);
    }
    public virtual void InAUsingDecl(AUsingDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUsingDecl(AUsingDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAUsingDecl(AUsingDecl node)
    {
        InAUsingDecl(node);
        {
            Object[] temp = new Object[node.GetNamespace().Count];
            node.GetNamespace().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TIdentifier) temp[i]).Apply(this);
            }
        }
        OutAUsingDecl(node);
    }
    public virtual void InAPreloadBankDecl(APreloadBankDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPreloadBankDecl(APreloadBankDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAPreloadBankDecl(APreloadBankDecl node)
    {
        InAPreloadBankDecl(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetBank() != null)
        {
            node.GetBank().Apply(this);
        }
        if(node.GetPlayer() != null)
        {
            node.GetPlayer().Apply(this);
        }
        OutAPreloadBankDecl(node);
    }
    public virtual void InAInitializerDecl(AInitializerDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInitializerDecl(AInitializerDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAInitializerDecl(AInitializerDecl node)
    {
        InAInitializerDecl(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetInitializerParam().Count];
            node.GetInitializerParam().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PInitializerParam) temp[i]).Apply(this);
            }
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAInitializerDecl(node);
    }
    public virtual void InATriggerDecl(ATriggerDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutATriggerDecl(ATriggerDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseATriggerDecl(ATriggerDecl node)
    {
        InATriggerDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetEventToken() != null)
        {
            node.GetEventToken().Apply(this);
        }
        if(node.GetEvents() != null)
        {
            node.GetEvents().Apply(this);
        }
        if(node.GetConditionsToken() != null)
        {
            node.GetConditionsToken().Apply(this);
        }
        if(node.GetConditions() != null)
        {
            node.GetConditions().Apply(this);
        }
        if(node.GetActionsToken() != null)
        {
            node.GetActionsToken().Apply(this);
        }
        if(node.GetActions() != null)
        {
            node.GetActions().Apply(this);
        }
        OutATriggerDecl(node);
    }
    public virtual void InATypedefDecl(ATypedefDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutATypedefDecl(ATypedefDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseATypedefDecl(ATypedefDecl node)
    {
        InATypedefDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutATypedefDecl(node);
    }
    public virtual void InAConstructorDecl(AConstructorDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstructorDecl(AConstructorDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstructorDecl(AConstructorDecl node)
    {
        InAConstructorDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFormals().Count];
            node.GetFormals().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PLocalDecl) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetBaseArgs().Count];
            node.GetBaseArgs().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAConstructorDecl(node);
    }
    public virtual void InADeconstructorDecl(ADeconstructorDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeconstructorDecl(ADeconstructorDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseADeconstructorDecl(ADeconstructorDecl node)
    {
        InADeconstructorDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFormals().Count];
            node.GetFormals().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PLocalDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutADeconstructorDecl(node);
    }
    public virtual void InANamespaceDecl(ANamespaceDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutANamespaceDecl(ANamespaceDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseANamespaceDecl(ANamespaceDecl node)
    {
        InANamespaceDecl(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetEndToken() != null)
        {
            node.GetEndToken().Apply(this);
        }
        OutANamespaceDecl(node);
    }
    public virtual void InATempNamespaceDecl(ATempNamespaceDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutATempNamespaceDecl(ATempNamespaceDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseATempNamespaceDecl(ATempNamespaceDecl node)
    {
        InATempNamespaceDecl(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetName().Count];
            node.GetName().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TIdentifier) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetEndToken() != null)
        {
            node.GetEndToken().Apply(this);
        }
        OutATempNamespaceDecl(node);
    }
    public virtual void InAOperatorDecl(AOperatorDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOperatorDecl(AOperatorDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAOperatorDecl(AOperatorDecl node)
    {
        InAOperatorDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetReturnType() != null)
        {
            node.GetReturnType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetOperator() != null)
        {
            node.GetOperator().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFormals().Count];
            node.GetFormals().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PLocalDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAOperatorDecl(node);
    }
    public virtual void InAEnumDecl(AEnumDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEnumDecl(AEnumDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAEnumDecl(AEnumDecl node)
    {
        InAEnumDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetValues().Count];
            node.GetValues().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PEnumLocal) temp[i]).Apply(this);
            }
        }
        if(node.GetEndToken() != null)
        {
            node.GetEndToken().Apply(this);
        }
        OutAEnumDecl(node);
    }
    public virtual void InAAEnumLocal(AAEnumLocal node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAEnumLocal(AAEnumLocal node)
    {
        DefaultOut(node);
    }

    public override void CaseAAEnumLocal(AAEnumLocal node)
    {
        InAAEnumLocal(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutAAEnumLocal(node);
    }
    public virtual void InALibraryNameInitializerParam(ALibraryNameInitializerParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutALibraryNameInitializerParam(ALibraryNameInitializerParam node)
    {
        DefaultOut(node);
    }

    public override void CaseALibraryNameInitializerParam(ALibraryNameInitializerParam node)
    {
        InALibraryNameInitializerParam(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutALibraryNameInitializerParam(node);
    }
    public virtual void InALibraryVersionInitializerParam(ALibraryVersionInitializerParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutALibraryVersionInitializerParam(ALibraryVersionInitializerParam node)
    {
        DefaultOut(node);
    }

    public override void CaseALibraryVersionInitializerParam(ALibraryVersionInitializerParam node)
    {
        InALibraryVersionInitializerParam(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutALibraryVersionInitializerParam(node);
    }
    public virtual void InASupportedVersionsInitializerParam(ASupportedVersionsInitializerParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutASupportedVersionsInitializerParam(ASupportedVersionsInitializerParam node)
    {
        DefaultOut(node);
    }

    public override void CaseASupportedVersionsInitializerParam(ASupportedVersionsInitializerParam node)
    {
        InASupportedVersionsInitializerParam(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutASupportedVersionsInitializerParam(node);
    }
    public virtual void InARequiredLibrariesInitializerParam(ARequiredLibrariesInitializerParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutARequiredLibrariesInitializerParam(ARequiredLibrariesInitializerParam node)
    {
        DefaultOut(node);
    }

    public override void CaseARequiredLibrariesInitializerParam(ARequiredLibrariesInitializerParam node)
    {
        InARequiredLibrariesInitializerParam(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutARequiredLibrariesInitializerParam(node);
    }
    public virtual void InAALocalDecl(AALocalDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAALocalDecl(AALocalDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAALocalDecl(AALocalDecl node)
    {
        InAALocalDecl(node);
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetRef() != null)
        {
            node.GetRef().Apply(this);
        }
        if(node.GetOut() != null)
        {
            node.GetOut().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        OutAALocalDecl(node);
    }
    public virtual void InAMultiLocalDecl(AMultiLocalDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiLocalDecl(AMultiLocalDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiLocalDecl(AMultiLocalDecl node)
    {
        InAMultiLocalDecl(node);
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetLocalDeclRight().Count];
            node.GetLocalDeclRight().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PLocalDeclRight) temp[i]).Apply(this);
            }
        }
        OutAMultiLocalDecl(node);
    }
    public virtual void InADeclLocalDecl(ADeclLocalDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclLocalDecl(ADeclLocalDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclLocalDecl(ADeclLocalDecl node)
    {
        InADeclLocalDecl(node);
        if(node.GetDecl() != null)
        {
            node.GetDecl().Apply(this);
        }
        OutADeclLocalDecl(node);
    }
    public virtual void InAPublicVisibilityModifier(APublicVisibilityModifier node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPublicVisibilityModifier(APublicVisibilityModifier node)
    {
        DefaultOut(node);
    }

    public override void CaseAPublicVisibilityModifier(APublicVisibilityModifier node)
    {
        InAPublicVisibilityModifier(node);
        OutAPublicVisibilityModifier(node);
    }
    public virtual void InAPrivateVisibilityModifier(APrivateVisibilityModifier node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPrivateVisibilityModifier(APrivateVisibilityModifier node)
    {
        DefaultOut(node);
    }

    public override void CaseAPrivateVisibilityModifier(APrivateVisibilityModifier node)
    {
        InAPrivateVisibilityModifier(node);
        OutAPrivateVisibilityModifier(node);
    }
    public virtual void InAProtectedVisibilityModifier(AProtectedVisibilityModifier node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProtectedVisibilityModifier(AProtectedVisibilityModifier node)
    {
        DefaultOut(node);
    }

    public override void CaseAProtectedVisibilityModifier(AProtectedVisibilityModifier node)
    {
        InAProtectedVisibilityModifier(node);
        OutAProtectedVisibilityModifier(node);
    }
    public virtual void InAVoidType(AVoidType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVoidType(AVoidType node)
    {
        DefaultOut(node);
    }

    public override void CaseAVoidType(AVoidType node)
    {
        InAVoidType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAVoidType(node);
    }
    public virtual void InAArrayTempType(AArrayTempType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayTempType(AArrayTempType node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayTempType(AArrayTempType node)
    {
        InAArrayTempType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetDimention() != null)
        {
            node.GetDimention().Apply(this);
        }
        if(node.GetIntDim() != null)
        {
            node.GetIntDim().Apply(this);
        }
        OutAArrayTempType(node);
    }
    public virtual void InADynamicArrayType(ADynamicArrayType node)
    {
        DefaultIn(node);
    }

    public virtual void OutADynamicArrayType(ADynamicArrayType node)
    {
        DefaultOut(node);
    }

    public override void CaseADynamicArrayType(ADynamicArrayType node)
    {
        InADynamicArrayType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADynamicArrayType(node);
    }
    public virtual void InANamedType(ANamedType node)
    {
        DefaultIn(node);
    }

    public virtual void OutANamedType(ANamedType node)
    {
        DefaultOut(node);
    }

    public override void CaseANamedType(ANamedType node)
    {
        InANamedType(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutANamedType(node);
    }
    public virtual void InANullType(ANullType node)
    {
        DefaultIn(node);
    }

    public virtual void OutANullType(ANullType node)
    {
        DefaultOut(node);
    }

    public override void CaseANullType(ANullType node)
    {
        InANullType(node);
        OutANullType(node);
    }
    public virtual void InAPointerType(APointerType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPointerType(APointerType node)
    {
        DefaultOut(node);
    }

    public override void CaseAPointerType(APointerType node)
    {
        InAPointerType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAPointerType(node);
    }
    public virtual void InAGenericType(AGenericType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenericType(AGenericType node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenericType(AGenericType node)
    {
        InAGenericType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetGenericTypes().Count];
            node.GetGenericTypes().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PType) temp[i]).Apply(this);
            }
        }
        OutAGenericType(node);
    }
    public virtual void InAABlock(AABlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAABlock(AABlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAABlock(AABlock node)
    {
        InAABlock(node);
        {
            Object[] temp = new Object[node.GetStatements().Count];
            node.GetStatements().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStm) temp[i]).Apply(this);
            }
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAABlock(node);
    }
    public virtual void InAExpStm(AExpStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpStm(AExpStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpStm(AExpStm node)
    {
        InAExpStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAExpStm(node);
    }
    public virtual void InAIfThenStm(AIfThenStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfThenStm(AIfThenStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfThenStm(AIfThenStm node)
    {
        InAIfThenStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAIfThenStm(node);
    }
    public virtual void InAIfThenElseStm(AIfThenElseStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfThenElseStm(AIfThenElseStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfThenElseStm(AIfThenElseStm node)
    {
        InAIfThenElseStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetThenBody() != null)
        {
            node.GetThenBody().Apply(this);
        }
        if(node.GetElseBody() != null)
        {
            node.GetElseBody().Apply(this);
        }
        OutAIfThenElseStm(node);
    }
    public virtual void InAWhileStm(AWhileStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStm(AWhileStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStm(AWhileStm node)
    {
        InAWhileStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAWhileStm(node);
    }
    public virtual void InAEmptyStm(AEmptyStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyStm(AEmptyStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyStm(AEmptyStm node)
    {
        InAEmptyStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAEmptyStm(node);
    }
    public virtual void InABlockStm(ABlockStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutABlockStm(ABlockStm node)
    {
        DefaultOut(node);
    }

    public override void CaseABlockStm(ABlockStm node)
    {
        InABlockStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutABlockStm(node);
    }
    public virtual void InAVoidReturnStm(AVoidReturnStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVoidReturnStm(AVoidReturnStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAVoidReturnStm(AVoidReturnStm node)
    {
        InAVoidReturnStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAVoidReturnStm(node);
    }
    public virtual void InAValueReturnStm(AValueReturnStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueReturnStm(AValueReturnStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueReturnStm(AValueReturnStm node)
    {
        InAValueReturnStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAValueReturnStm(node);
    }
    public virtual void InALocalDeclStm(ALocalDeclStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutALocalDeclStm(ALocalDeclStm node)
    {
        DefaultOut(node);
    }

    public override void CaseALocalDeclStm(ALocalDeclStm node)
    {
        InALocalDeclStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetLocalDecl() != null)
        {
            node.GetLocalDecl().Apply(this);
        }
        OutALocalDeclStm(node);
    }
    public virtual void InABreakStm(ABreakStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreakStm(ABreakStm node)
    {
        DefaultOut(node);
    }

    public override void CaseABreakStm(ABreakStm node)
    {
        InABreakStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutABreakStm(node);
    }
    public virtual void InAContinueStm(AContinueStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAContinueStm(AContinueStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAContinueStm(AContinueStm node)
    {
        InAContinueStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAContinueStm(node);
    }
    public virtual void InAForStm(AForStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAForStm(AForStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAForStm(AForStm node)
    {
        InAForStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetUpdate() != null)
        {
            node.GetUpdate().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAForStm(node);
    }
    public virtual void InAAsyncInvokeStm(AAsyncInvokeStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAsyncInvokeStm(AAsyncInvokeStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAAsyncInvokeStm(AAsyncInvokeStm node)
    {
        InAAsyncInvokeStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        OutAAsyncInvokeStm(node);
    }
    public virtual void InASwitchStm(ASwitchStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASwitchStm(ASwitchStm node)
    {
        DefaultOut(node);
    }

    public override void CaseASwitchStm(ASwitchStm node)
    {
        InASwitchStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetTest() != null)
        {
            node.GetTest().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetCases().Count];
            node.GetCases().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStm) temp[i]).Apply(this);
            }
        }
        OutASwitchStm(node);
    }
    public virtual void InASwitchCaseStm(ASwitchCaseStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASwitchCaseStm(ASwitchCaseStm node)
    {
        DefaultOut(node);
    }

    public override void CaseASwitchCaseStm(ASwitchCaseStm node)
    {
        InASwitchCaseStm(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutASwitchCaseStm(node);
    }
    public virtual void InADeleteStm(ADeleteStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeleteStm(ADeleteStm node)
    {
        DefaultOut(node);
    }

    public override void CaseADeleteStm(ADeleteStm node)
    {
        InADeleteStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutADeleteStm(node);
    }
    public virtual void InACaseSwitchCaseType(ACaseSwitchCaseType node)
    {
        DefaultIn(node);
    }

    public virtual void OutACaseSwitchCaseType(ACaseSwitchCaseType node)
    {
        DefaultOut(node);
    }

    public override void CaseACaseSwitchCaseType(ACaseSwitchCaseType node)
    {
        InACaseSwitchCaseType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutACaseSwitchCaseType(node);
    }
    public virtual void InADefaultSwitchCaseType(ADefaultSwitchCaseType node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefaultSwitchCaseType(ADefaultSwitchCaseType node)
    {
        DefaultOut(node);
    }

    public override void CaseADefaultSwitchCaseType(ADefaultSwitchCaseType node)
    {
        InADefaultSwitchCaseType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADefaultSwitchCaseType(node);
    }
    public virtual void InABinopExp(ABinopExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutABinopExp(ABinopExp node)
    {
        DefaultOut(node);
    }

    public override void CaseABinopExp(ABinopExp node)
    {
        InABinopExp(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetBinop() != null)
        {
            node.GetBinop().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutABinopExp(node);
    }
    public virtual void InAUnopExp(AUnopExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnopExp(AUnopExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnopExp(AUnopExp node)
    {
        InAUnopExp(node);
        if(node.GetUnop() != null)
        {
            node.GetUnop().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAUnopExp(node);
    }
    public virtual void InAIncDecExp(AIncDecExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIncDecExp(AIncDecExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIncDecExp(AIncDecExp node)
    {
        InAIncDecExp(node);
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        if(node.GetIncDecOp() != null)
        {
            node.GetIncDecOp().Apply(this);
        }
        OutAIncDecExp(node);
    }
    public virtual void InAIntConstExp(AIntConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntConstExp(AIntConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntConstExp(AIntConstExp node)
    {
        InAIntConstExp(node);
        if(node.GetIntegerLiteral() != null)
        {
            node.GetIntegerLiteral().Apply(this);
        }
        OutAIntConstExp(node);
    }
    public virtual void InAHexConstExp(AHexConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHexConstExp(AHexConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAHexConstExp(AHexConstExp node)
    {
        InAHexConstExp(node);
        if(node.GetHexLiteral() != null)
        {
            node.GetHexLiteral().Apply(this);
        }
        OutAHexConstExp(node);
    }
    public virtual void InAOctalConstExp(AOctalConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOctalConstExp(AOctalConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAOctalConstExp(AOctalConstExp node)
    {
        InAOctalConstExp(node);
        if(node.GetOctalLiteral() != null)
        {
            node.GetOctalLiteral().Apply(this);
        }
        OutAOctalConstExp(node);
    }
    public virtual void InAFixedConstExp(AFixedConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFixedConstExp(AFixedConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAFixedConstExp(AFixedConstExp node)
    {
        InAFixedConstExp(node);
        if(node.GetFixedLiteral() != null)
        {
            node.GetFixedLiteral().Apply(this);
        }
        OutAFixedConstExp(node);
    }
    public virtual void InAStringConstExp(AStringConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringConstExp(AStringConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringConstExp(AStringConstExp node)
    {
        InAStringConstExp(node);
        if(node.GetStringLiteral() != null)
        {
            node.GetStringLiteral().Apply(this);
        }
        OutAStringConstExp(node);
    }
    public virtual void InACharConstExp(ACharConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharConstExp(ACharConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACharConstExp(ACharConstExp node)
    {
        InACharConstExp(node);
        if(node.GetCharLiteral() != null)
        {
            node.GetCharLiteral().Apply(this);
        }
        OutACharConstExp(node);
    }
    public virtual void InABooleanConstExp(ABooleanConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanConstExp(ABooleanConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanConstExp(ABooleanConstExp node)
    {
        InABooleanConstExp(node);
        if(node.GetBool() != null)
        {
            node.GetBool().Apply(this);
        }
        OutABooleanConstExp(node);
    }
    public virtual void InANullExp(ANullExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANullExp(ANullExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANullExp(ANullExp node)
    {
        InANullExp(node);
        OutANullExp(node);
    }
    public virtual void InASimpleInvokeExp(ASimpleInvokeExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleInvokeExp(ASimpleInvokeExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleInvokeExp(ASimpleInvokeExp node)
    {
        InASimpleInvokeExp(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        OutASimpleInvokeExp(node);
    }
    public virtual void InANonstaticInvokeExp(ANonstaticInvokeExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonstaticInvokeExp(ANonstaticInvokeExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANonstaticInvokeExp(ANonstaticInvokeExp node)
    {
        InANonstaticInvokeExp(node);
        if(node.GetReceiver() != null)
        {
            node.GetReceiver().Apply(this);
        }
        if(node.GetDotType() != null)
        {
            node.GetDotType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        OutANonstaticInvokeExp(node);
    }
    public virtual void InASyncInvokeExp(ASyncInvokeExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASyncInvokeExp(ASyncInvokeExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASyncInvokeExp(ASyncInvokeExp node)
    {
        InASyncInvokeExp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        OutASyncInvokeExp(node);
    }
    public virtual void InALvalueExp(ALvalueExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALvalueExp(ALvalueExp node)
    {
        DefaultOut(node);
    }

    public override void CaseALvalueExp(ALvalueExp node)
    {
        InALvalueExp(node);
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        OutALvalueExp(node);
    }
    public virtual void InAAssignmentExp(AAssignmentExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentExp(AAssignmentExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentExp(AAssignmentExp node)
    {
        InAAssignmentExp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAssignmentExp(node);
    }
    public virtual void InASAssignmentExp(ASAssignmentExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASAssignmentExp(ASAssignmentExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASAssignmentExp(ASAssignmentExp node)
    {
        InASAssignmentExp(node);
        if(node.GetAssignop() != null)
        {
            node.GetAssignop().Apply(this);
        }
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutASAssignmentExp(node);
    }
    public virtual void InAShadySAssignmentExp(AShadySAssignmentExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAShadySAssignmentExp(AShadySAssignmentExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAShadySAssignmentExp(AShadySAssignmentExp node)
    {
        InAShadySAssignmentExp(node);
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetPrePointers().Count];
            node.GetPrePointers().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TStar) temp[i]).Apply(this);
            }
        }
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        if(node.GetGenericToken() != null)
        {
            node.GetGenericToken().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetGenericTypes().Count];
            node.GetGenericTypes().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PType) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetPostPointers().Count];
            node.GetPostPointers().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PShadyDynamicOps) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetLocalDeclRight().Count];
            node.GetLocalDeclRight().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PLocalDeclRight) temp[i]).Apply(this);
            }
        }
        OutAShadySAssignmentExp(node);
    }
    public virtual void InAParenExp(AParenExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenExp(AParenExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenExp(AParenExp node)
    {
        InAParenExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAParenExp(node);
    }
    public virtual void InACastExp(ACastExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACastExp(ACastExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACastExp(ACastExp node)
    {
        InACastExp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutACastExp(node);
    }
    public virtual void InATempCastExp(ATempCastExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutATempCastExp(ATempCastExp node)
    {
        DefaultOut(node);
    }

    public override void CaseATempCastExp(ATempCastExp node)
    {
        InATempCastExp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutATempCastExp(node);
    }
    public virtual void InASharpCastExp(ASharpCastExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASharpCastExp(ASharpCastExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASharpCastExp(ASharpCastExp node)
    {
        InASharpCastExp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutASharpCastExp(node);
    }
    public virtual void InANewExp(ANewExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewExp(ANewExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANewExp(ANewExp node)
    {
        InANewExp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        OutANewExp(node);
    }
    public virtual void InADelegateExp(ADelegateExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADelegateExp(ADelegateExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADelegateExp(ADelegateExp node)
    {
        InADelegateExp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        OutADelegateExp(node);
    }
    public virtual void InADelegateInvokeExp(ADelegateInvokeExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADelegateInvokeExp(ADelegateInvokeExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADelegateInvokeExp(ADelegateInvokeExp node)
    {
        InADelegateInvokeExp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetReceiver() != null)
        {
            node.GetReceiver().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        OutADelegateInvokeExp(node);
    }
    public virtual void InAIfExp(AIfExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfExp(AIfExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfExp(AIfExp node)
    {
        InAIfExp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetThen() != null)
        {
            node.GetThen().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutAIfExp(node);
    }
    public virtual void InAArrayResizeExp(AArrayResizeExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayResizeExp(AArrayResizeExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayResizeExp(AArrayResizeExp node)
    {
        InAArrayResizeExp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        if(node.GetArg() != null)
        {
            node.GetArg().Apply(this);
        }
        OutAArrayResizeExp(node);
    }
    public virtual void InAPointerShadyDynamicOps(APointerShadyDynamicOps node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPointerShadyDynamicOps(APointerShadyDynamicOps node)
    {
        DefaultOut(node);
    }

    public override void CaseAPointerShadyDynamicOps(APointerShadyDynamicOps node)
    {
        InAPointerShadyDynamicOps(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPointerShadyDynamicOps(node);
    }
    public virtual void InAArrayShadyDynamicOps(AArrayShadyDynamicOps node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayShadyDynamicOps(AArrayShadyDynamicOps node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayShadyDynamicOps(AArrayShadyDynamicOps node)
    {
        InAArrayShadyDynamicOps(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAArrayShadyDynamicOps(node);
    }
    public virtual void InAALocalDeclRight(AALocalDeclRight node)
    {
        DefaultIn(node);
    }

    public virtual void OutAALocalDeclRight(AALocalDeclRight node)
    {
        DefaultOut(node);
    }

    public override void CaseAALocalDeclRight(AALocalDeclRight node)
    {
        InAALocalDeclRight(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetAssignop() != null)
        {
            node.GetAssignop().Apply(this);
        }
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        OutAALocalDeclRight(node);
    }
    public virtual void InAAssignAssignop(AAssignAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignAssignop(AAssignAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignAssignop(AAssignAssignop node)
    {
        InAAssignAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAssignAssignop(node);
    }
    public virtual void InAAddAssignop(AAddAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddAssignop(AAddAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddAssignop(AAddAssignop node)
    {
        InAAddAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAddAssignop(node);
    }
    public virtual void InASubAssignop(ASubAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubAssignop(ASubAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseASubAssignop(ASubAssignop node)
    {
        InASubAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutASubAssignop(node);
    }
    public virtual void InAMulAssignop(AMulAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMulAssignop(AMulAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseAMulAssignop(AMulAssignop node)
    {
        InAMulAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAMulAssignop(node);
    }
    public virtual void InADivAssignop(ADivAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivAssignop(ADivAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseADivAssignop(ADivAssignop node)
    {
        InADivAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADivAssignop(node);
    }
    public virtual void InAModAssignop(AModAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModAssignop(AModAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseAModAssignop(AModAssignop node)
    {
        InAModAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAModAssignop(node);
    }
    public virtual void InALocalLvalue(ALocalLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutALocalLvalue(ALocalLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseALocalLvalue(ALocalLvalue node)
    {
        InALocalLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutALocalLvalue(node);
    }
    public virtual void InATypeLvalue(ATypeLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutATypeLvalue(ATypeLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseATypeLvalue(ATypeLvalue node)
    {
        InATypeLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutATypeLvalue(node);
    }
    public virtual void InAFieldLvalue(AFieldLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFieldLvalue(AFieldLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAFieldLvalue(AFieldLvalue node)
    {
        InAFieldLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAFieldLvalue(node);
    }
    public virtual void InAPropertyLvalue(APropertyLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPropertyLvalue(APropertyLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAPropertyLvalue(APropertyLvalue node)
    {
        InAPropertyLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAPropertyLvalue(node);
    }
    public virtual void InANamespaceLvalue(ANamespaceLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutANamespaceLvalue(ANamespaceLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseANamespaceLvalue(ANamespaceLvalue node)
    {
        InANamespaceLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutANamespaceLvalue(node);
    }
    public virtual void InAStructFieldLvalue(AStructFieldLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStructFieldLvalue(AStructFieldLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAStructFieldLvalue(AStructFieldLvalue node)
    {
        InAStructFieldLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAStructFieldLvalue(node);
    }
    public virtual void InAStructLvalue(AStructLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStructLvalue(AStructLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAStructLvalue(AStructLvalue node)
    {
        InAStructLvalue(node);
        if(node.GetReceiver() != null)
        {
            node.GetReceiver().Apply(this);
        }
        if(node.GetDotType() != null)
        {
            node.GetDotType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAStructLvalue(node);
    }
    public virtual void InAArrayLvalue(AArrayLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayLvalue(AArrayLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayLvalue(AArrayLvalue node)
    {
        InAArrayLvalue(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        if(node.GetIndex() != null)
        {
            node.GetIndex().Apply(this);
        }
        OutAArrayLvalue(node);
    }
    public virtual void InAPointerMultiLvalue(APointerMultiLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPointerMultiLvalue(APointerMultiLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAPointerMultiLvalue(APointerMultiLvalue node)
    {
        InAPointerMultiLvalue(node);
        {
            Object[] temp = new Object[node.GetTokens().Count];
            node.GetTokens().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TStar) temp[i]).Apply(this);
            }
        }
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        OutAPointerMultiLvalue(node);
    }
    public virtual void InAPointerLvalue(APointerLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPointerLvalue(APointerLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAPointerLvalue(APointerLvalue node)
    {
        InAPointerLvalue(node);
        if(node.GetTokens() != null)
        {
            node.GetTokens().Apply(this);
        }
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        OutAPointerLvalue(node);
    }
    public virtual void InAAmbiguousNameLvalue(AAmbiguousNameLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAmbiguousNameLvalue(AAmbiguousNameLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAAmbiguousNameLvalue(AAmbiguousNameLvalue node)
    {
        InAAmbiguousNameLvalue(node);
        if(node.GetAmbiguous() != null)
        {
            node.GetAmbiguous().Apply(this);
        }
        OutAAmbiguousNameLvalue(node);
    }
    public virtual void InAPArrayLengthLvalue(APArrayLengthLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPArrayLengthLvalue(APArrayLengthLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAPArrayLengthLvalue(APArrayLengthLvalue node)
    {
        InAPArrayLengthLvalue(node);
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        OutAPArrayLengthLvalue(node);
    }
    public virtual void InAArrayLengthLvalue(AArrayLengthLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayLengthLvalue(AArrayLengthLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayLengthLvalue(AArrayLengthLvalue node)
    {
        InAArrayLengthLvalue(node);
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        OutAArrayLengthLvalue(node);
    }
    public virtual void InAThisLvalue(AThisLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThisLvalue(AThisLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAThisLvalue(AThisLvalue node)
    {
        InAThisLvalue(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAThisLvalue(node);
    }
    public virtual void InAValueLvalue(AValueLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueLvalue(AValueLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueLvalue(AValueLvalue node)
    {
        InAValueLvalue(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAValueLvalue(node);
    }
    public virtual void InADotDotType(ADotDotType node)
    {
        DefaultIn(node);
    }

    public virtual void OutADotDotType(ADotDotType node)
    {
        DefaultOut(node);
    }

    public override void CaseADotDotType(ADotDotType node)
    {
        InADotDotType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADotDotType(node);
    }
    public virtual void InAArrowDotType(AArrowDotType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrowDotType(AArrowDotType node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrowDotType(AArrowDotType node)
    {
        InAArrowDotType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAArrowDotType(node);
    }
    public virtual void InATrueBool(ATrueBool node)
    {
        DefaultIn(node);
    }

    public virtual void OutATrueBool(ATrueBool node)
    {
        DefaultOut(node);
    }

    public override void CaseATrueBool(ATrueBool node)
    {
        InATrueBool(node);
        OutATrueBool(node);
    }
    public virtual void InAFalseBool(AFalseBool node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFalseBool(AFalseBool node)
    {
        DefaultOut(node);
    }

    public override void CaseAFalseBool(AFalseBool node)
    {
        InAFalseBool(node);
        OutAFalseBool(node);
    }
    public virtual void InAPlusBinop(APlusBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusBinop(APlusBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusBinop(APlusBinop node)
    {
        InAPlusBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPlusBinop(node);
    }
    public virtual void InAMinusBinop(AMinusBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusBinop(AMinusBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusBinop(AMinusBinop node)
    {
        InAMinusBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAMinusBinop(node);
    }
    public virtual void InATimesBinop(ATimesBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutATimesBinop(ATimesBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseATimesBinop(ATimesBinop node)
    {
        InATimesBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutATimesBinop(node);
    }
    public virtual void InADivideBinop(ADivideBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideBinop(ADivideBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideBinop(ADivideBinop node)
    {
        InADivideBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADivideBinop(node);
    }
    public virtual void InAModuloBinop(AModuloBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModuloBinop(AModuloBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAModuloBinop(AModuloBinop node)
    {
        InAModuloBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAModuloBinop(node);
    }
    public virtual void InAEqBinop(AEqBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqBinop(AEqBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqBinop(AEqBinop node)
    {
        InAEqBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAEqBinop(node);
    }
    public virtual void InANeBinop(ANeBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutANeBinop(ANeBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseANeBinop(ANeBinop node)
    {
        InANeBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutANeBinop(node);
    }
    public virtual void InALtBinop(ALtBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALtBinop(ALtBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseALtBinop(ALtBinop node)
    {
        InALtBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALtBinop(node);
    }
    public virtual void InALeBinop(ALeBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeBinop(ALeBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseALeBinop(ALeBinop node)
    {
        InALeBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALeBinop(node);
    }
    public virtual void InAGtBinop(AGtBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGtBinop(AGtBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAGtBinop(AGtBinop node)
    {
        InAGtBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAGtBinop(node);
    }
    public virtual void InAGeBinop(AGeBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGeBinop(AGeBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAGeBinop(AGeBinop node)
    {
        InAGeBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAGeBinop(node);
    }
    public virtual void InAAndBinop(AAndBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndBinop(AAndBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndBinop(AAndBinop node)
    {
        InAAndBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAndBinop(node);
    }
    public virtual void InAOrBinop(AOrBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrBinop(AOrBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrBinop(AOrBinop node)
    {
        InAOrBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAOrBinop(node);
    }
    public virtual void InAXorBinop(AXorBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAXorBinop(AXorBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAXorBinop(AXorBinop node)
    {
        InAXorBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAXorBinop(node);
    }
    public virtual void InALazyAndBinop(ALazyAndBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALazyAndBinop(ALazyAndBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseALazyAndBinop(ALazyAndBinop node)
    {
        InALazyAndBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALazyAndBinop(node);
    }
    public virtual void InALazyOrBinop(ALazyOrBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALazyOrBinop(ALazyOrBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseALazyOrBinop(ALazyOrBinop node)
    {
        InALazyOrBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALazyOrBinop(node);
    }
    public virtual void InALBitShiftBinop(ALBitShiftBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALBitShiftBinop(ALBitShiftBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseALBitShiftBinop(ALBitShiftBinop node)
    {
        InALBitShiftBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALBitShiftBinop(node);
    }
    public virtual void InARBitShiftBinop(ARBitShiftBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutARBitShiftBinop(ARBitShiftBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseARBitShiftBinop(ARBitShiftBinop node)
    {
        InARBitShiftBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutARBitShiftBinop(node);
    }
    public virtual void InAAeqBinop(AAeqBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAeqBinop(AAeqBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAAeqBinop(AAeqBinop node)
    {
        InAAeqBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAeqBinop(node);
    }
    public virtual void InAAneBinop(AAneBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAneBinop(AAneBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAAneBinop(AAneBinop node)
    {
        InAAneBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAneBinop(node);
    }
    public virtual void InAConcatBinop(AConcatBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConcatBinop(AConcatBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAConcatBinop(AConcatBinop node)
    {
        InAConcatBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAConcatBinop(node);
    }
    public virtual void InANegateUnop(ANegateUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegateUnop(ANegateUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseANegateUnop(ANegateUnop node)
    {
        InANegateUnop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutANegateUnop(node);
    }
    public virtual void InAComplementUnop(AComplementUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComplementUnop(AComplementUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseAComplementUnop(AComplementUnop node)
    {
        InAComplementUnop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAComplementUnop(node);
    }
    public virtual void InABooleanToStringUnop(ABooleanToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanToStringUnop(ABooleanToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanToStringUnop(ABooleanToStringUnop node)
    {
        InABooleanToStringUnop(node);
        OutABooleanToStringUnop(node);
    }
    public virtual void InAByteToStringUnop(AByteToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAByteToStringUnop(AByteToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseAByteToStringUnop(AByteToStringUnop node)
    {
        InAByteToStringUnop(node);
        OutAByteToStringUnop(node);
    }
    public virtual void InAShortToStringUnop(AShortToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAShortToStringUnop(AShortToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseAShortToStringUnop(AShortToStringUnop node)
    {
        InAShortToStringUnop(node);
        OutAShortToStringUnop(node);
    }
    public virtual void InAIntToStringUnop(AIntToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntToStringUnop(AIntToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntToStringUnop(AIntToStringUnop node)
    {
        InAIntToStringUnop(node);
        OutAIntToStringUnop(node);
    }
    public virtual void InACharToStringUnop(ACharToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharToStringUnop(ACharToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseACharToStringUnop(ACharToStringUnop node)
    {
        InACharToStringUnop(node);
        OutACharToStringUnop(node);
    }
    public virtual void InAObjectToStringUnop(AObjectToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAObjectToStringUnop(AObjectToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseAObjectToStringUnop(AObjectToStringUnop node)
    {
        InAObjectToStringUnop(node);
        OutAObjectToStringUnop(node);
    }
    public virtual void InAPreIncIncDecOp(APreIncIncDecOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPreIncIncDecOp(APreIncIncDecOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPreIncIncDecOp(APreIncIncDecOp node)
    {
        InAPreIncIncDecOp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPreIncIncDecOp(node);
    }
    public virtual void InAPreDecIncDecOp(APreDecIncDecOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPreDecIncDecOp(APreDecIncDecOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPreDecIncDecOp(APreDecIncDecOp node)
    {
        InAPreDecIncDecOp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPreDecIncDecOp(node);
    }
    public virtual void InAPostIncIncDecOp(APostIncIncDecOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPostIncIncDecOp(APostIncIncDecOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPostIncIncDecOp(APostIncIncDecOp node)
    {
        InAPostIncIncDecOp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPostIncIncDecOp(node);
    }
    public virtual void InAPostDecIncDecOp(APostDecIncDecOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPostDecIncDecOp(APostDecIncDecOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPostDecIncDecOp(APostDecIncDecOp node)
    {
        InAPostDecIncDecOp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPostDecIncDecOp(node);
    }
}


[Serializable]
public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPSourceFile().Apply(this);
        OutStart(node);
    }

    public virtual void InAASourceFile(AASourceFile node)
    {
        DefaultIn(node);
    }

    public virtual void OutAASourceFile(AASourceFile node)
    {
        DefaultOut(node);
    }

    public override void CaseAASourceFile(AASourceFile node)
    {
        InAASourceFile(node);
        {
            Object[] temp = new Object[node.GetUsings().Count];
            node.GetUsings().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        OutAASourceFile(node);
    }
    public virtual void InAAProgram(AAProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAProgram(AAProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAAProgram(AAProgram node)
    {
        InAAProgram(node);
        {
            Object[] temp = new Object[node.GetSourceFiles().Count];
            node.GetSourceFiles().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PSourceFile) temp[i]).Apply(this);
            }
        }
        OutAAProgram(node);
    }
    public virtual void InAAName(AAName node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAName(AAName node)
    {
        DefaultOut(node);
    }

    public override void CaseAAName(AAName node)
    {
        InAAName(node);
        {
            Object[] temp = new Object[node.GetIdentifier().Count];
            node.GetIdentifier().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TIdentifier) temp[i]).Apply(this);
            }
        }
        OutAAName(node);
    }
    public virtual void InAFieldDecl(AFieldDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFieldDecl(AFieldDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAFieldDecl(AFieldDecl node)
    {
        InAFieldDecl(node);
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutAFieldDecl(node);
    }
    public virtual void InAPropertyDecl(APropertyDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPropertyDecl(APropertyDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAPropertyDecl(APropertyDecl node)
    {
        InAPropertyDecl(node);
        if(node.GetSetter() != null)
        {
            node.GetSetter().Apply(this);
        }
        if(node.GetGetter() != null)
        {
            node.GetGetter().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutAPropertyDecl(node);
    }
    public virtual void InAThisArrayPropertyDecl(AThisArrayPropertyDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThisArrayPropertyDecl(AThisArrayPropertyDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAThisArrayPropertyDecl(AThisArrayPropertyDecl node)
    {
        InAThisArrayPropertyDecl(node);
        if(node.GetSetter() != null)
        {
            node.GetSetter().Apply(this);
        }
        if(node.GetGetter() != null)
        {
            node.GetGetter().Apply(this);
        }
        if(node.GetArgName() != null)
        {
            node.GetArgName().Apply(this);
        }
        if(node.GetArgType() != null)
        {
            node.GetArgType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutAThisArrayPropertyDecl(node);
    }
    public virtual void InAMethodDecl(AMethodDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodDecl(AMethodDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodDecl(AMethodDecl node)
    {
        InAMethodDecl(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFormals().Count];
            node.GetFormals().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PLocalDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetReturnType() != null)
        {
            node.GetReturnType().Apply(this);
        }
        if(node.GetDelegate() != null)
        {
            node.GetDelegate().Apply(this);
        }
        if(node.GetInline() != null)
        {
            node.GetInline().Apply(this);
        }
        if(node.GetNative() != null)
        {
            node.GetNative().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetTrigger() != null)
        {
            node.GetTrigger().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutAMethodDecl(node);
    }
    public virtual void InAIncludeDecl(AIncludeDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIncludeDecl(AIncludeDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAIncludeDecl(AIncludeDecl node)
    {
        InAIncludeDecl(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAIncludeDecl(node);
    }
    public virtual void InAStructDecl(AStructDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStructDecl(AStructDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAStructDecl(AStructDecl node)
    {
        InAStructDecl(node);
        {
            Object[] temp = new Object[node.GetLocals().Count];
            node.GetLocals().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PLocalDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetGenericVars().Count];
            node.GetGenericVars().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TIdentifier) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetEndToken() != null)
        {
            node.GetEndToken().Apply(this);
        }
        if(node.GetIntDim() != null)
        {
            node.GetIntDim().Apply(this);
        }
        if(node.GetDimention() != null)
        {
            node.GetDimention().Apply(this);
        }
        if(node.GetClassToken() != null)
        {
            node.GetClassToken().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutAStructDecl(node);
    }
    public virtual void InAEnrichmentDecl(AEnrichmentDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEnrichmentDecl(AEnrichmentDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAEnrichmentDecl(AEnrichmentDecl node)
    {
        InAEnrichmentDecl(node);
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetEndToken() != null)
        {
            node.GetEndToken().Apply(this);
        }
        if(node.GetIntDim() != null)
        {
            node.GetIntDim().Apply(this);
        }
        if(node.GetDimention() != null)
        {
            node.GetDimention().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAEnrichmentDecl(node);
    }
    public virtual void InAUsingDecl(AUsingDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUsingDecl(AUsingDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAUsingDecl(AUsingDecl node)
    {
        InAUsingDecl(node);
        {
            Object[] temp = new Object[node.GetNamespace().Count];
            node.GetNamespace().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TIdentifier) temp[i]).Apply(this);
            }
        }
        OutAUsingDecl(node);
    }
    public virtual void InAPreloadBankDecl(APreloadBankDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPreloadBankDecl(APreloadBankDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAPreloadBankDecl(APreloadBankDecl node)
    {
        InAPreloadBankDecl(node);
        if(node.GetPlayer() != null)
        {
            node.GetPlayer().Apply(this);
        }
        if(node.GetBank() != null)
        {
            node.GetBank().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPreloadBankDecl(node);
    }
    public virtual void InAInitializerDecl(AInitializerDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInitializerDecl(AInitializerDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAInitializerDecl(AInitializerDecl node)
    {
        InAInitializerDecl(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetInitializerParam().Count];
            node.GetInitializerParam().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PInitializerParam) temp[i]).Apply(this);
            }
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAInitializerDecl(node);
    }
    public virtual void InATriggerDecl(ATriggerDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutATriggerDecl(ATriggerDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseATriggerDecl(ATriggerDecl node)
    {
        InATriggerDecl(node);
        if(node.GetActions() != null)
        {
            node.GetActions().Apply(this);
        }
        if(node.GetActionsToken() != null)
        {
            node.GetActionsToken().Apply(this);
        }
        if(node.GetConditions() != null)
        {
            node.GetConditions().Apply(this);
        }
        if(node.GetConditionsToken() != null)
        {
            node.GetConditionsToken().Apply(this);
        }
        if(node.GetEvents() != null)
        {
            node.GetEvents().Apply(this);
        }
        if(node.GetEventToken() != null)
        {
            node.GetEventToken().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutATriggerDecl(node);
    }
    public virtual void InATypedefDecl(ATypedefDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutATypedefDecl(ATypedefDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseATypedefDecl(ATypedefDecl node)
    {
        InATypedefDecl(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutATypedefDecl(node);
    }
    public virtual void InAConstructorDecl(AConstructorDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstructorDecl(AConstructorDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstructorDecl(AConstructorDecl node)
    {
        InAConstructorDecl(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetBaseArgs().Count];
            node.GetBaseArgs().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetFormals().Count];
            node.GetFormals().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PLocalDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutAConstructorDecl(node);
    }
    public virtual void InADeconstructorDecl(ADeconstructorDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeconstructorDecl(ADeconstructorDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseADeconstructorDecl(ADeconstructorDecl node)
    {
        InADeconstructorDecl(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFormals().Count];
            node.GetFormals().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PLocalDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutADeconstructorDecl(node);
    }
    public virtual void InANamespaceDecl(ANamespaceDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutANamespaceDecl(ANamespaceDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseANamespaceDecl(ANamespaceDecl node)
    {
        InANamespaceDecl(node);
        if(node.GetEndToken() != null)
        {
            node.GetEndToken().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutANamespaceDecl(node);
    }
    public virtual void InATempNamespaceDecl(ATempNamespaceDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutATempNamespaceDecl(ATempNamespaceDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseATempNamespaceDecl(ATempNamespaceDecl node)
    {
        InATempNamespaceDecl(node);
        if(node.GetEndToken() != null)
        {
            node.GetEndToken().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetName().Count];
            node.GetName().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TIdentifier) temp[i]).Apply(this);
            }
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutATempNamespaceDecl(node);
    }
    public virtual void InAOperatorDecl(AOperatorDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOperatorDecl(AOperatorDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAOperatorDecl(AOperatorDecl node)
    {
        InAOperatorDecl(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFormals().Count];
            node.GetFormals().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PLocalDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetOperator() != null)
        {
            node.GetOperator().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetReturnType() != null)
        {
            node.GetReturnType().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutAOperatorDecl(node);
    }
    public virtual void InAEnumDecl(AEnumDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEnumDecl(AEnumDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAEnumDecl(AEnumDecl node)
    {
        InAEnumDecl(node);
        if(node.GetEndToken() != null)
        {
            node.GetEndToken().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetValues().Count];
            node.GetValues().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PEnumLocal) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutAEnumDecl(node);
    }
    public virtual void InAAEnumLocal(AAEnumLocal node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAEnumLocal(AAEnumLocal node)
    {
        DefaultOut(node);
    }

    public override void CaseAAEnumLocal(AAEnumLocal node)
    {
        InAAEnumLocal(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAAEnumLocal(node);
    }
    public virtual void InALibraryNameInitializerParam(ALibraryNameInitializerParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutALibraryNameInitializerParam(ALibraryNameInitializerParam node)
    {
        DefaultOut(node);
    }

    public override void CaseALibraryNameInitializerParam(ALibraryNameInitializerParam node)
    {
        InALibraryNameInitializerParam(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALibraryNameInitializerParam(node);
    }
    public virtual void InALibraryVersionInitializerParam(ALibraryVersionInitializerParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutALibraryVersionInitializerParam(ALibraryVersionInitializerParam node)
    {
        DefaultOut(node);
    }

    public override void CaseALibraryVersionInitializerParam(ALibraryVersionInitializerParam node)
    {
        InALibraryVersionInitializerParam(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALibraryVersionInitializerParam(node);
    }
    public virtual void InASupportedVersionsInitializerParam(ASupportedVersionsInitializerParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutASupportedVersionsInitializerParam(ASupportedVersionsInitializerParam node)
    {
        DefaultOut(node);
    }

    public override void CaseASupportedVersionsInitializerParam(ASupportedVersionsInitializerParam node)
    {
        InASupportedVersionsInitializerParam(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutASupportedVersionsInitializerParam(node);
    }
    public virtual void InARequiredLibrariesInitializerParam(ARequiredLibrariesInitializerParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutARequiredLibrariesInitializerParam(ARequiredLibrariesInitializerParam node)
    {
        DefaultOut(node);
    }

    public override void CaseARequiredLibrariesInitializerParam(ARequiredLibrariesInitializerParam node)
    {
        InARequiredLibrariesInitializerParam(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutARequiredLibrariesInitializerParam(node);
    }
    public virtual void InAALocalDecl(AALocalDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAALocalDecl(AALocalDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAALocalDecl(AALocalDecl node)
    {
        InAALocalDecl(node);
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetOut() != null)
        {
            node.GetOut().Apply(this);
        }
        if(node.GetRef() != null)
        {
            node.GetRef().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetVisibilityModifier() != null)
        {
            node.GetVisibilityModifier().Apply(this);
        }
        OutAALocalDecl(node);
    }
    public virtual void InAMultiLocalDecl(AMultiLocalDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiLocalDecl(AMultiLocalDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiLocalDecl(AMultiLocalDecl node)
    {
        InAMultiLocalDecl(node);
        {
            Object[] temp = new Object[node.GetLocalDeclRight().Count];
            node.GetLocalDeclRight().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PLocalDeclRight) temp[i]).Apply(this);
            }
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        OutAMultiLocalDecl(node);
    }
    public virtual void InADeclLocalDecl(ADeclLocalDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclLocalDecl(ADeclLocalDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclLocalDecl(ADeclLocalDecl node)
    {
        InADeclLocalDecl(node);
        if(node.GetDecl() != null)
        {
            node.GetDecl().Apply(this);
        }
        OutADeclLocalDecl(node);
    }
    public virtual void InAPublicVisibilityModifier(APublicVisibilityModifier node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPublicVisibilityModifier(APublicVisibilityModifier node)
    {
        DefaultOut(node);
    }

    public override void CaseAPublicVisibilityModifier(APublicVisibilityModifier node)
    {
        InAPublicVisibilityModifier(node);
        OutAPublicVisibilityModifier(node);
    }
    public virtual void InAPrivateVisibilityModifier(APrivateVisibilityModifier node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPrivateVisibilityModifier(APrivateVisibilityModifier node)
    {
        DefaultOut(node);
    }

    public override void CaseAPrivateVisibilityModifier(APrivateVisibilityModifier node)
    {
        InAPrivateVisibilityModifier(node);
        OutAPrivateVisibilityModifier(node);
    }
    public virtual void InAProtectedVisibilityModifier(AProtectedVisibilityModifier node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProtectedVisibilityModifier(AProtectedVisibilityModifier node)
    {
        DefaultOut(node);
    }

    public override void CaseAProtectedVisibilityModifier(AProtectedVisibilityModifier node)
    {
        InAProtectedVisibilityModifier(node);
        OutAProtectedVisibilityModifier(node);
    }
    public virtual void InAVoidType(AVoidType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVoidType(AVoidType node)
    {
        DefaultOut(node);
    }

    public override void CaseAVoidType(AVoidType node)
    {
        InAVoidType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAVoidType(node);
    }
    public virtual void InAArrayTempType(AArrayTempType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayTempType(AArrayTempType node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayTempType(AArrayTempType node)
    {
        InAArrayTempType(node);
        if(node.GetIntDim() != null)
        {
            node.GetIntDim().Apply(this);
        }
        if(node.GetDimention() != null)
        {
            node.GetDimention().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAArrayTempType(node);
    }
    public virtual void InADynamicArrayType(ADynamicArrayType node)
    {
        DefaultIn(node);
    }

    public virtual void OutADynamicArrayType(ADynamicArrayType node)
    {
        DefaultOut(node);
    }

    public override void CaseADynamicArrayType(ADynamicArrayType node)
    {
        InADynamicArrayType(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADynamicArrayType(node);
    }
    public virtual void InANamedType(ANamedType node)
    {
        DefaultIn(node);
    }

    public virtual void OutANamedType(ANamedType node)
    {
        DefaultOut(node);
    }

    public override void CaseANamedType(ANamedType node)
    {
        InANamedType(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutANamedType(node);
    }
    public virtual void InANullType(ANullType node)
    {
        DefaultIn(node);
    }

    public virtual void OutANullType(ANullType node)
    {
        DefaultOut(node);
    }

    public override void CaseANullType(ANullType node)
    {
        InANullType(node);
        OutANullType(node);
    }
    public virtual void InAPointerType(APointerType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPointerType(APointerType node)
    {
        DefaultOut(node);
    }

    public override void CaseAPointerType(APointerType node)
    {
        InAPointerType(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPointerType(node);
    }
    public virtual void InAGenericType(AGenericType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenericType(AGenericType node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenericType(AGenericType node)
    {
        InAGenericType(node);
        {
            Object[] temp = new Object[node.GetGenericTypes().Count];
            node.GetGenericTypes().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PType) temp[i]).Apply(this);
            }
        }
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAGenericType(node);
    }
    public virtual void InAABlock(AABlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAABlock(AABlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAABlock(AABlock node)
    {
        InAABlock(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStatements().Count];
            node.GetStatements().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStm) temp[i]).Apply(this);
            }
        }
        OutAABlock(node);
    }
    public virtual void InAExpStm(AExpStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpStm(AExpStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpStm(AExpStm node)
    {
        InAExpStm(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAExpStm(node);
    }
    public virtual void InAIfThenStm(AIfThenStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfThenStm(AIfThenStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfThenStm(AIfThenStm node)
    {
        InAIfThenStm(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAIfThenStm(node);
    }
    public virtual void InAIfThenElseStm(AIfThenElseStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfThenElseStm(AIfThenElseStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfThenElseStm(AIfThenElseStm node)
    {
        InAIfThenElseStm(node);
        if(node.GetElseBody() != null)
        {
            node.GetElseBody().Apply(this);
        }
        if(node.GetThenBody() != null)
        {
            node.GetThenBody().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAIfThenElseStm(node);
    }
    public virtual void InAWhileStm(AWhileStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStm(AWhileStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStm(AWhileStm node)
    {
        InAWhileStm(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAWhileStm(node);
    }
    public virtual void InAEmptyStm(AEmptyStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyStm(AEmptyStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyStm(AEmptyStm node)
    {
        InAEmptyStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAEmptyStm(node);
    }
    public virtual void InABlockStm(ABlockStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutABlockStm(ABlockStm node)
    {
        DefaultOut(node);
    }

    public override void CaseABlockStm(ABlockStm node)
    {
        InABlockStm(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutABlockStm(node);
    }
    public virtual void InAVoidReturnStm(AVoidReturnStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVoidReturnStm(AVoidReturnStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAVoidReturnStm(AVoidReturnStm node)
    {
        InAVoidReturnStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAVoidReturnStm(node);
    }
    public virtual void InAValueReturnStm(AValueReturnStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueReturnStm(AValueReturnStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueReturnStm(AValueReturnStm node)
    {
        InAValueReturnStm(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAValueReturnStm(node);
    }
    public virtual void InALocalDeclStm(ALocalDeclStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutALocalDeclStm(ALocalDeclStm node)
    {
        DefaultOut(node);
    }

    public override void CaseALocalDeclStm(ALocalDeclStm node)
    {
        InALocalDeclStm(node);
        if(node.GetLocalDecl() != null)
        {
            node.GetLocalDecl().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALocalDeclStm(node);
    }
    public virtual void InABreakStm(ABreakStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreakStm(ABreakStm node)
    {
        DefaultOut(node);
    }

    public override void CaseABreakStm(ABreakStm node)
    {
        InABreakStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutABreakStm(node);
    }
    public virtual void InAContinueStm(AContinueStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAContinueStm(AContinueStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAContinueStm(AContinueStm node)
    {
        InAContinueStm(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAContinueStm(node);
    }
    public virtual void InAForStm(AForStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAForStm(AForStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAForStm(AForStm node)
    {
        InAForStm(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetUpdate() != null)
        {
            node.GetUpdate().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAForStm(node);
    }
    public virtual void InAAsyncInvokeStm(AAsyncInvokeStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAsyncInvokeStm(AAsyncInvokeStm node)
    {
        DefaultOut(node);
    }

    public override void CaseAAsyncInvokeStm(AAsyncInvokeStm node)
    {
        InAAsyncInvokeStm(node);
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAsyncInvokeStm(node);
    }
    public virtual void InASwitchStm(ASwitchStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASwitchStm(ASwitchStm node)
    {
        DefaultOut(node);
    }

    public override void CaseASwitchStm(ASwitchStm node)
    {
        InASwitchStm(node);
        {
            Object[] temp = new Object[node.GetCases().Count];
            node.GetCases().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStm) temp[i]).Apply(this);
            }
        }
        if(node.GetTest() != null)
        {
            node.GetTest().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutASwitchStm(node);
    }
    public virtual void InASwitchCaseStm(ASwitchCaseStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASwitchCaseStm(ASwitchCaseStm node)
    {
        DefaultOut(node);
    }

    public override void CaseASwitchCaseStm(ASwitchCaseStm node)
    {
        InASwitchCaseStm(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutASwitchCaseStm(node);
    }
    public virtual void InADeleteStm(ADeleteStm node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeleteStm(ADeleteStm node)
    {
        DefaultOut(node);
    }

    public override void CaseADeleteStm(ADeleteStm node)
    {
        InADeleteStm(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADeleteStm(node);
    }
    public virtual void InACaseSwitchCaseType(ACaseSwitchCaseType node)
    {
        DefaultIn(node);
    }

    public virtual void OutACaseSwitchCaseType(ACaseSwitchCaseType node)
    {
        DefaultOut(node);
    }

    public override void CaseACaseSwitchCaseType(ACaseSwitchCaseType node)
    {
        InACaseSwitchCaseType(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutACaseSwitchCaseType(node);
    }
    public virtual void InADefaultSwitchCaseType(ADefaultSwitchCaseType node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefaultSwitchCaseType(ADefaultSwitchCaseType node)
    {
        DefaultOut(node);
    }

    public override void CaseADefaultSwitchCaseType(ADefaultSwitchCaseType node)
    {
        InADefaultSwitchCaseType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADefaultSwitchCaseType(node);
    }
    public virtual void InABinopExp(ABinopExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutABinopExp(ABinopExp node)
    {
        DefaultOut(node);
    }

    public override void CaseABinopExp(ABinopExp node)
    {
        InABinopExp(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetBinop() != null)
        {
            node.GetBinop().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutABinopExp(node);
    }
    public virtual void InAUnopExp(AUnopExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnopExp(AUnopExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnopExp(AUnopExp node)
    {
        InAUnopExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetUnop() != null)
        {
            node.GetUnop().Apply(this);
        }
        OutAUnopExp(node);
    }
    public virtual void InAIncDecExp(AIncDecExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIncDecExp(AIncDecExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIncDecExp(AIncDecExp node)
    {
        InAIncDecExp(node);
        if(node.GetIncDecOp() != null)
        {
            node.GetIncDecOp().Apply(this);
        }
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        OutAIncDecExp(node);
    }
    public virtual void InAIntConstExp(AIntConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntConstExp(AIntConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntConstExp(AIntConstExp node)
    {
        InAIntConstExp(node);
        if(node.GetIntegerLiteral() != null)
        {
            node.GetIntegerLiteral().Apply(this);
        }
        OutAIntConstExp(node);
    }
    public virtual void InAHexConstExp(AHexConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHexConstExp(AHexConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAHexConstExp(AHexConstExp node)
    {
        InAHexConstExp(node);
        if(node.GetHexLiteral() != null)
        {
            node.GetHexLiteral().Apply(this);
        }
        OutAHexConstExp(node);
    }
    public virtual void InAOctalConstExp(AOctalConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOctalConstExp(AOctalConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAOctalConstExp(AOctalConstExp node)
    {
        InAOctalConstExp(node);
        if(node.GetOctalLiteral() != null)
        {
            node.GetOctalLiteral().Apply(this);
        }
        OutAOctalConstExp(node);
    }
    public virtual void InAFixedConstExp(AFixedConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFixedConstExp(AFixedConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAFixedConstExp(AFixedConstExp node)
    {
        InAFixedConstExp(node);
        if(node.GetFixedLiteral() != null)
        {
            node.GetFixedLiteral().Apply(this);
        }
        OutAFixedConstExp(node);
    }
    public virtual void InAStringConstExp(AStringConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringConstExp(AStringConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringConstExp(AStringConstExp node)
    {
        InAStringConstExp(node);
        if(node.GetStringLiteral() != null)
        {
            node.GetStringLiteral().Apply(this);
        }
        OutAStringConstExp(node);
    }
    public virtual void InACharConstExp(ACharConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharConstExp(ACharConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACharConstExp(ACharConstExp node)
    {
        InACharConstExp(node);
        if(node.GetCharLiteral() != null)
        {
            node.GetCharLiteral().Apply(this);
        }
        OutACharConstExp(node);
    }
    public virtual void InABooleanConstExp(ABooleanConstExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanConstExp(ABooleanConstExp node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanConstExp(ABooleanConstExp node)
    {
        InABooleanConstExp(node);
        if(node.GetBool() != null)
        {
            node.GetBool().Apply(this);
        }
        OutABooleanConstExp(node);
    }
    public virtual void InANullExp(ANullExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANullExp(ANullExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANullExp(ANullExp node)
    {
        InANullExp(node);
        OutANullExp(node);
    }
    public virtual void InASimpleInvokeExp(ASimpleInvokeExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleInvokeExp(ASimpleInvokeExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleInvokeExp(ASimpleInvokeExp node)
    {
        InASimpleInvokeExp(node);
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutASimpleInvokeExp(node);
    }
    public virtual void InANonstaticInvokeExp(ANonstaticInvokeExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonstaticInvokeExp(ANonstaticInvokeExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANonstaticInvokeExp(ANonstaticInvokeExp node)
    {
        InANonstaticInvokeExp(node);
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetDotType() != null)
        {
            node.GetDotType().Apply(this);
        }
        if(node.GetReceiver() != null)
        {
            node.GetReceiver().Apply(this);
        }
        OutANonstaticInvokeExp(node);
    }
    public virtual void InASyncInvokeExp(ASyncInvokeExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASyncInvokeExp(ASyncInvokeExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASyncInvokeExp(ASyncInvokeExp node)
    {
        InASyncInvokeExp(node);
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutASyncInvokeExp(node);
    }
    public virtual void InALvalueExp(ALvalueExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALvalueExp(ALvalueExp node)
    {
        DefaultOut(node);
    }

    public override void CaseALvalueExp(ALvalueExp node)
    {
        InALvalueExp(node);
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        OutALvalueExp(node);
    }
    public virtual void InAAssignmentExp(AAssignmentExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentExp(AAssignmentExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentExp(AAssignmentExp node)
    {
        InAAssignmentExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAssignmentExp(node);
    }
    public virtual void InASAssignmentExp(ASAssignmentExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASAssignmentExp(ASAssignmentExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASAssignmentExp(ASAssignmentExp node)
    {
        InASAssignmentExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        if(node.GetAssignop() != null)
        {
            node.GetAssignop().Apply(this);
        }
        OutASAssignmentExp(node);
    }
    public virtual void InAShadySAssignmentExp(AShadySAssignmentExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAShadySAssignmentExp(AShadySAssignmentExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAShadySAssignmentExp(AShadySAssignmentExp node)
    {
        InAShadySAssignmentExp(node);
        {
            Object[] temp = new Object[node.GetLocalDeclRight().Count];
            node.GetLocalDeclRight().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PLocalDeclRight) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetPostPointers().Count];
            node.GetPostPointers().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PShadyDynamicOps) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetGenericTypes().Count];
            node.GetGenericTypes().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PType) temp[i]).Apply(this);
            }
        }
        if(node.GetGenericToken() != null)
        {
            node.GetGenericToken().Apply(this);
        }
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetPrePointers().Count];
            node.GetPrePointers().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TStar) temp[i]).Apply(this);
            }
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        OutAShadySAssignmentExp(node);
    }
    public virtual void InAParenExp(AParenExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenExp(AParenExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenExp(AParenExp node)
    {
        InAParenExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAParenExp(node);
    }
    public virtual void InACastExp(ACastExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACastExp(ACastExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACastExp(ACastExp node)
    {
        InACastExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutACastExp(node);
    }
    public virtual void InATempCastExp(ATempCastExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutATempCastExp(ATempCastExp node)
    {
        DefaultOut(node);
    }

    public override void CaseATempCastExp(ATempCastExp node)
    {
        InATempCastExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutATempCastExp(node);
    }
    public virtual void InASharpCastExp(ASharpCastExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASharpCastExp(ASharpCastExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASharpCastExp(ASharpCastExp node)
    {
        InASharpCastExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutASharpCastExp(node);
    }
    public virtual void InANewExp(ANewExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewExp(ANewExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANewExp(ANewExp node)
    {
        InANewExp(node);
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutANewExp(node);
    }
    public virtual void InADelegateExp(ADelegateExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADelegateExp(ADelegateExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADelegateExp(ADelegateExp node)
    {
        InADelegateExp(node);
        if(node.GetLvalue() != null)
        {
            node.GetLvalue().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADelegateExp(node);
    }
    public virtual void InADelegateInvokeExp(ADelegateInvokeExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADelegateInvokeExp(ADelegateInvokeExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADelegateInvokeExp(ADelegateInvokeExp node)
    {
        InADelegateInvokeExp(node);
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        if(node.GetReceiver() != null)
        {
            node.GetReceiver().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADelegateInvokeExp(node);
    }
    public virtual void InAIfExp(AIfExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfExp(AIfExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfExp(AIfExp node)
    {
        InAIfExp(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetThen() != null)
        {
            node.GetThen().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAIfExp(node);
    }
    public virtual void InAArrayResizeExp(AArrayResizeExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayResizeExp(AArrayResizeExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayResizeExp(AArrayResizeExp node)
    {
        InAArrayResizeExp(node);
        if(node.GetArg() != null)
        {
            node.GetArg().Apply(this);
        }
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAArrayResizeExp(node);
    }
    public virtual void InAPointerShadyDynamicOps(APointerShadyDynamicOps node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPointerShadyDynamicOps(APointerShadyDynamicOps node)
    {
        DefaultOut(node);
    }

    public override void CaseAPointerShadyDynamicOps(APointerShadyDynamicOps node)
    {
        InAPointerShadyDynamicOps(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPointerShadyDynamicOps(node);
    }
    public virtual void InAArrayShadyDynamicOps(AArrayShadyDynamicOps node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayShadyDynamicOps(AArrayShadyDynamicOps node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayShadyDynamicOps(AArrayShadyDynamicOps node)
    {
        InAArrayShadyDynamicOps(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAArrayShadyDynamicOps(node);
    }
    public virtual void InAALocalDeclRight(AALocalDeclRight node)
    {
        DefaultIn(node);
    }

    public virtual void OutAALocalDeclRight(AALocalDeclRight node)
    {
        DefaultOut(node);
    }

    public override void CaseAALocalDeclRight(AALocalDeclRight node)
    {
        InAALocalDeclRight(node);
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        if(node.GetAssignop() != null)
        {
            node.GetAssignop().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAALocalDeclRight(node);
    }
    public virtual void InAAssignAssignop(AAssignAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignAssignop(AAssignAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignAssignop(AAssignAssignop node)
    {
        InAAssignAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAssignAssignop(node);
    }
    public virtual void InAAddAssignop(AAddAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddAssignop(AAddAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddAssignop(AAddAssignop node)
    {
        InAAddAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAddAssignop(node);
    }
    public virtual void InASubAssignop(ASubAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubAssignop(ASubAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseASubAssignop(ASubAssignop node)
    {
        InASubAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutASubAssignop(node);
    }
    public virtual void InAMulAssignop(AMulAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMulAssignop(AMulAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseAMulAssignop(AMulAssignop node)
    {
        InAMulAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAMulAssignop(node);
    }
    public virtual void InADivAssignop(ADivAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivAssignop(ADivAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseADivAssignop(ADivAssignop node)
    {
        InADivAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADivAssignop(node);
    }
    public virtual void InAModAssignop(AModAssignop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModAssignop(AModAssignop node)
    {
        DefaultOut(node);
    }

    public override void CaseAModAssignop(AModAssignop node)
    {
        InAModAssignop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAModAssignop(node);
    }
    public virtual void InALocalLvalue(ALocalLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutALocalLvalue(ALocalLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseALocalLvalue(ALocalLvalue node)
    {
        InALocalLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutALocalLvalue(node);
    }
    public virtual void InATypeLvalue(ATypeLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutATypeLvalue(ATypeLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseATypeLvalue(ATypeLvalue node)
    {
        InATypeLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutATypeLvalue(node);
    }
    public virtual void InAFieldLvalue(AFieldLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFieldLvalue(AFieldLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAFieldLvalue(AFieldLvalue node)
    {
        InAFieldLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAFieldLvalue(node);
    }
    public virtual void InAPropertyLvalue(APropertyLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPropertyLvalue(APropertyLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAPropertyLvalue(APropertyLvalue node)
    {
        InAPropertyLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAPropertyLvalue(node);
    }
    public virtual void InANamespaceLvalue(ANamespaceLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutANamespaceLvalue(ANamespaceLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseANamespaceLvalue(ANamespaceLvalue node)
    {
        InANamespaceLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutANamespaceLvalue(node);
    }
    public virtual void InAStructFieldLvalue(AStructFieldLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStructFieldLvalue(AStructFieldLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAStructFieldLvalue(AStructFieldLvalue node)
    {
        InAStructFieldLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAStructFieldLvalue(node);
    }
    public virtual void InAStructLvalue(AStructLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStructLvalue(AStructLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAStructLvalue(AStructLvalue node)
    {
        InAStructLvalue(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetDotType() != null)
        {
            node.GetDotType().Apply(this);
        }
        if(node.GetReceiver() != null)
        {
            node.GetReceiver().Apply(this);
        }
        OutAStructLvalue(node);
    }
    public virtual void InAArrayLvalue(AArrayLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayLvalue(AArrayLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayLvalue(AArrayLvalue node)
    {
        InAArrayLvalue(node);
        if(node.GetIndex() != null)
        {
            node.GetIndex().Apply(this);
        }
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAArrayLvalue(node);
    }
    public virtual void InAPointerMultiLvalue(APointerMultiLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPointerMultiLvalue(APointerMultiLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAPointerMultiLvalue(APointerMultiLvalue node)
    {
        InAPointerMultiLvalue(node);
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetTokens().Count];
            node.GetTokens().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TStar) temp[i]).Apply(this);
            }
        }
        OutAPointerMultiLvalue(node);
    }
    public virtual void InAPointerLvalue(APointerLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPointerLvalue(APointerLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAPointerLvalue(APointerLvalue node)
    {
        InAPointerLvalue(node);
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        if(node.GetTokens() != null)
        {
            node.GetTokens().Apply(this);
        }
        OutAPointerLvalue(node);
    }
    public virtual void InAAmbiguousNameLvalue(AAmbiguousNameLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAmbiguousNameLvalue(AAmbiguousNameLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAAmbiguousNameLvalue(AAmbiguousNameLvalue node)
    {
        InAAmbiguousNameLvalue(node);
        if(node.GetAmbiguous() != null)
        {
            node.GetAmbiguous().Apply(this);
        }
        OutAAmbiguousNameLvalue(node);
    }
    public virtual void InAPArrayLengthLvalue(APArrayLengthLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPArrayLengthLvalue(APArrayLengthLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAPArrayLengthLvalue(APArrayLengthLvalue node)
    {
        InAPArrayLengthLvalue(node);
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        OutAPArrayLengthLvalue(node);
    }
    public virtual void InAArrayLengthLvalue(AArrayLengthLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayLengthLvalue(AArrayLengthLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayLengthLvalue(AArrayLengthLvalue node)
    {
        InAArrayLengthLvalue(node);
        if(node.GetBase() != null)
        {
            node.GetBase().Apply(this);
        }
        OutAArrayLengthLvalue(node);
    }
    public virtual void InAThisLvalue(AThisLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThisLvalue(AThisLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAThisLvalue(AThisLvalue node)
    {
        InAThisLvalue(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAThisLvalue(node);
    }
    public virtual void InAValueLvalue(AValueLvalue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueLvalue(AValueLvalue node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueLvalue(AValueLvalue node)
    {
        InAValueLvalue(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAValueLvalue(node);
    }
    public virtual void InADotDotType(ADotDotType node)
    {
        DefaultIn(node);
    }

    public virtual void OutADotDotType(ADotDotType node)
    {
        DefaultOut(node);
    }

    public override void CaseADotDotType(ADotDotType node)
    {
        InADotDotType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADotDotType(node);
    }
    public virtual void InAArrowDotType(AArrowDotType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrowDotType(AArrowDotType node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrowDotType(AArrowDotType node)
    {
        InAArrowDotType(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAArrowDotType(node);
    }
    public virtual void InATrueBool(ATrueBool node)
    {
        DefaultIn(node);
    }

    public virtual void OutATrueBool(ATrueBool node)
    {
        DefaultOut(node);
    }

    public override void CaseATrueBool(ATrueBool node)
    {
        InATrueBool(node);
        OutATrueBool(node);
    }
    public virtual void InAFalseBool(AFalseBool node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFalseBool(AFalseBool node)
    {
        DefaultOut(node);
    }

    public override void CaseAFalseBool(AFalseBool node)
    {
        InAFalseBool(node);
        OutAFalseBool(node);
    }
    public virtual void InAPlusBinop(APlusBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusBinop(APlusBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusBinop(APlusBinop node)
    {
        InAPlusBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPlusBinop(node);
    }
    public virtual void InAMinusBinop(AMinusBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusBinop(AMinusBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusBinop(AMinusBinop node)
    {
        InAMinusBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAMinusBinop(node);
    }
    public virtual void InATimesBinop(ATimesBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutATimesBinop(ATimesBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseATimesBinop(ATimesBinop node)
    {
        InATimesBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutATimesBinop(node);
    }
    public virtual void InADivideBinop(ADivideBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideBinop(ADivideBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideBinop(ADivideBinop node)
    {
        InADivideBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutADivideBinop(node);
    }
    public virtual void InAModuloBinop(AModuloBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModuloBinop(AModuloBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAModuloBinop(AModuloBinop node)
    {
        InAModuloBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAModuloBinop(node);
    }
    public virtual void InAEqBinop(AEqBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqBinop(AEqBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqBinop(AEqBinop node)
    {
        InAEqBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAEqBinop(node);
    }
    public virtual void InANeBinop(ANeBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutANeBinop(ANeBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseANeBinop(ANeBinop node)
    {
        InANeBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutANeBinop(node);
    }
    public virtual void InALtBinop(ALtBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALtBinop(ALtBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseALtBinop(ALtBinop node)
    {
        InALtBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALtBinop(node);
    }
    public virtual void InALeBinop(ALeBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeBinop(ALeBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseALeBinop(ALeBinop node)
    {
        InALeBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALeBinop(node);
    }
    public virtual void InAGtBinop(AGtBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGtBinop(AGtBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAGtBinop(AGtBinop node)
    {
        InAGtBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAGtBinop(node);
    }
    public virtual void InAGeBinop(AGeBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGeBinop(AGeBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAGeBinop(AGeBinop node)
    {
        InAGeBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAGeBinop(node);
    }
    public virtual void InAAndBinop(AAndBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndBinop(AAndBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndBinop(AAndBinop node)
    {
        InAAndBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAndBinop(node);
    }
    public virtual void InAOrBinop(AOrBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrBinop(AOrBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrBinop(AOrBinop node)
    {
        InAOrBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAOrBinop(node);
    }
    public virtual void InAXorBinop(AXorBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAXorBinop(AXorBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAXorBinop(AXorBinop node)
    {
        InAXorBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAXorBinop(node);
    }
    public virtual void InALazyAndBinop(ALazyAndBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALazyAndBinop(ALazyAndBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseALazyAndBinop(ALazyAndBinop node)
    {
        InALazyAndBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALazyAndBinop(node);
    }
    public virtual void InALazyOrBinop(ALazyOrBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALazyOrBinop(ALazyOrBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseALazyOrBinop(ALazyOrBinop node)
    {
        InALazyOrBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALazyOrBinop(node);
    }
    public virtual void InALBitShiftBinop(ALBitShiftBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALBitShiftBinop(ALBitShiftBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseALBitShiftBinop(ALBitShiftBinop node)
    {
        InALBitShiftBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutALBitShiftBinop(node);
    }
    public virtual void InARBitShiftBinop(ARBitShiftBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutARBitShiftBinop(ARBitShiftBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseARBitShiftBinop(ARBitShiftBinop node)
    {
        InARBitShiftBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutARBitShiftBinop(node);
    }
    public virtual void InAAeqBinop(AAeqBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAeqBinop(AAeqBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAAeqBinop(AAeqBinop node)
    {
        InAAeqBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAeqBinop(node);
    }
    public virtual void InAAneBinop(AAneBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAneBinop(AAneBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAAneBinop(AAneBinop node)
    {
        InAAneBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAAneBinop(node);
    }
    public virtual void InAConcatBinop(AConcatBinop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConcatBinop(AConcatBinop node)
    {
        DefaultOut(node);
    }

    public override void CaseAConcatBinop(AConcatBinop node)
    {
        InAConcatBinop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAConcatBinop(node);
    }
    public virtual void InANegateUnop(ANegateUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegateUnop(ANegateUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseANegateUnop(ANegateUnop node)
    {
        InANegateUnop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutANegateUnop(node);
    }
    public virtual void InAComplementUnop(AComplementUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComplementUnop(AComplementUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseAComplementUnop(AComplementUnop node)
    {
        InAComplementUnop(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAComplementUnop(node);
    }
    public virtual void InABooleanToStringUnop(ABooleanToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanToStringUnop(ABooleanToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanToStringUnop(ABooleanToStringUnop node)
    {
        InABooleanToStringUnop(node);
        OutABooleanToStringUnop(node);
    }
    public virtual void InAByteToStringUnop(AByteToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAByteToStringUnop(AByteToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseAByteToStringUnop(AByteToStringUnop node)
    {
        InAByteToStringUnop(node);
        OutAByteToStringUnop(node);
    }
    public virtual void InAShortToStringUnop(AShortToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAShortToStringUnop(AShortToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseAShortToStringUnop(AShortToStringUnop node)
    {
        InAShortToStringUnop(node);
        OutAShortToStringUnop(node);
    }
    public virtual void InAIntToStringUnop(AIntToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntToStringUnop(AIntToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntToStringUnop(AIntToStringUnop node)
    {
        InAIntToStringUnop(node);
        OutAIntToStringUnop(node);
    }
    public virtual void InACharToStringUnop(ACharToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharToStringUnop(ACharToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseACharToStringUnop(ACharToStringUnop node)
    {
        InACharToStringUnop(node);
        OutACharToStringUnop(node);
    }
    public virtual void InAObjectToStringUnop(AObjectToStringUnop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAObjectToStringUnop(AObjectToStringUnop node)
    {
        DefaultOut(node);
    }

    public override void CaseAObjectToStringUnop(AObjectToStringUnop node)
    {
        InAObjectToStringUnop(node);
        OutAObjectToStringUnop(node);
    }
    public virtual void InAPreIncIncDecOp(APreIncIncDecOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPreIncIncDecOp(APreIncIncDecOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPreIncIncDecOp(APreIncIncDecOp node)
    {
        InAPreIncIncDecOp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPreIncIncDecOp(node);
    }
    public virtual void InAPreDecIncDecOp(APreDecIncDecOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPreDecIncDecOp(APreDecIncDecOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPreDecIncDecOp(APreDecIncDecOp node)
    {
        InAPreDecIncDecOp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPreDecIncDecOp(node);
    }
    public virtual void InAPostIncIncDecOp(APostIncIncDecOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPostIncIncDecOp(APostIncIncDecOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPostIncIncDecOp(APostIncIncDecOp node)
    {
        InAPostIncIncDecOp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPostIncIncDecOp(node);
    }
    public virtual void InAPostDecIncDecOp(APostDecIncDecOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPostDecIncDecOp(APostDecIncDecOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPostDecIncDecOp(APostDecIncDecOp node)
    {
        InAPostDecIncDecOp(node);
        if(node.GetToken() != null)
        {
            node.GetToken().Apply(this);
        }
        OutAPostDecIncDecOp(node);
    }
}
} // namespace Galaxy_Editor_2.Compiler.Generated.analysis
