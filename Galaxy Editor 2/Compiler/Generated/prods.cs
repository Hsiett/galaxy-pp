/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  Galaxy_Editor_2.Compiler.Generated.analysis;
using Galaxy_Editor_2.Compiler.Phases;

namespace Galaxy_Editor_2.Compiler.Generated.node {

[Serializable]
public abstract class PSourceFile : Node
{
}

[Serializable]
public abstract class PProgram : Node
{
}

[Serializable]
public abstract class PName : Node
{
}

[Serializable]
public abstract class PDecl : Node
{
}

[Serializable]
public abstract class PEnumLocal : Node
{
}

[Serializable]
public abstract class PInitializerParam : Node
{
}

[Serializable]
public abstract class PLocalDecl : Node
{
}

[Serializable]
public abstract class PVisibilityModifier : Node
{
}

[Serializable]
public abstract class PType : Node
{
}

[Serializable]
public abstract class PBlock : Node
{
}

[Serializable]
public abstract class PStm : Node
{
}

[Serializable]
public abstract class PSwitchCaseType : Node
{
}

[Serializable]
public abstract class PExp : Node
{
}

[Serializable]
public abstract class PShadyDynamicOps : Node
{
}

[Serializable]
public abstract class PLocalDeclRight : Node
{
}

[Serializable]
public abstract class PAssignop : Node
{
}

[Serializable]
public abstract class PLvalue : Node
{
}

[Serializable]
public abstract class PDotType : Node
{
}

[Serializable]
public abstract class PBool : Node
{
}

[Serializable]
public abstract class PBinop : Node
{
}

[Serializable]
public abstract class PUnop : Node
{
}

[Serializable]
public abstract class PIncDecOp : Node
{
}


[Serializable]
public sealed class AASourceFile : PSourceFile
{
    private TypedList _decl_;
    private TIdentifier _name_;
    private TypedList _usings_;

    public AASourceFile ()
    {
        this._decl_ = new TypedList(new Decl_Cast(this));
        this._usings_ = new TypedList(new Usings_Cast(this));
    }

    public AASourceFile (
            IList _decl_,
            TIdentifier _name_,
            IList _usings_
    )
    {
        this._decl_ = new TypedList(new Decl_Cast(this));
        this._decl_.Clear();
        this._decl_.AddAll(_decl_);
        SetName (_name_);
        this._usings_ = new TypedList(new Usings_Cast(this));
        this._usings_.Clear();
        this._usings_.AddAll(_usings_);
    }

    public override Object Clone()
    {
        return new AASourceFile (
            CloneList (_decl_),
            (TIdentifier)CloneNode (_name_),
            CloneList (_usings_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAASourceFile(this);
    }

    public IList GetDecl ()
    {
        return _decl_;
    }

    public void setDecl (IList list)
    {
        _decl_.Clear();
        _decl_.AddAll(list);
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetUsings ()
    {
        return _usings_;
    }

    public void setUsings (IList list)
    {
        _usings_.Clear();
        _usings_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_decl_)
            + ToString (_name_)
            + ToString (_usings_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _decl_.Contains(child) )
        {
            _decl_.Remove(child);
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _usings_.Contains(child) )
        {
            _usings_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _decl_.Count; i++ )
        {
            Node n = (Node)_decl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _decl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _decl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        for ( int i = 0; i < _usings_.Count; i++ )
        {
            Node n = (Node)_usings_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _usings_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _usings_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class Decl_Cast : Cast
    {
        AASourceFile obj;

        internal Decl_Cast (AASourceFile obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDecl node = (PDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDecl node = (PDecl) o;
            node.Parent(null);
            return node;
        }
    }
[Serializable]
    private class Usings_Cast : Cast
    {
        AASourceFile obj;

        internal Usings_Cast (AASourceFile obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDecl node = (PDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDecl node = (PDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AAProgram : PProgram
{
    private TypedList _source_files_;

    public AAProgram ()
    {
        this._source_files_ = new TypedList(new SourceFiles_Cast(this));
    }

    public AAProgram (
            IList _source_files_
    )
    {
        this._source_files_ = new TypedList(new SourceFiles_Cast(this));
        this._source_files_.Clear();
        this._source_files_.AddAll(_source_files_);
    }

    public override Object Clone()
    {
        return new AAProgram (
            CloneList (_source_files_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAProgram(this);
    }

    public IList GetSourceFiles ()
    {
        return _source_files_;
    }

    public void setSourceFiles (IList list)
    {
        _source_files_.Clear();
        _source_files_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_source_files_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _source_files_.Contains(child) )
        {
            _source_files_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _source_files_.Count; i++ )
        {
            Node n = (Node)_source_files_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _source_files_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _source_files_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class SourceFiles_Cast : Cast
    {
        AAProgram obj;

        internal SourceFiles_Cast (AAProgram obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PSourceFile node = (PSourceFile) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PSourceFile node = (PSourceFile) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AAName : PName
{
    private TypedList _identifier_;

    public AAName ()
    {
        this._identifier_ = new TypedList(new Identifier_Cast(this));
    }

    public AAName (
            IList _identifier_
    )
    {
        this._identifier_ = new TypedList(new Identifier_Cast(this));
        this._identifier_.Clear();
        this._identifier_.AddAll(_identifier_);
    }

    public override Object Clone()
    {
        return new AAName (
            CloneList (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAName(this);
    }

    public IList GetIdentifier ()
    {
        return _identifier_;
    }

    public void setIdentifier (IList list)
    {
        _identifier_.Clear();
        _identifier_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_.Contains(child) )
        {
            _identifier_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _identifier_.Count; i++ )
        {
            Node n = (Node)_identifier_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _identifier_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _identifier_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class Identifier_Cast : Cast
    {
        AAName obj;

        internal Identifier_Cast (AAName obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TIdentifier node = (TIdentifier) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TIdentifier node = (TIdentifier) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AFieldDecl : PDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private TStatic _static_;
    private TConst _const_;
    private PType _type_;
    private TIdentifier _name_;
    private PExp _init_;

    public AFieldDecl ()
    {
    }

    public AFieldDecl (
            PVisibilityModifier _visibility_modifier_,
            TStatic _static_,
            TConst _const_,
            PType _type_,
            TIdentifier _name_,
            PExp _init_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetStatic (_static_);
        SetConst (_const_);
        SetType (_type_);
        SetName (_name_);
        SetInit (_init_);
    }

    public override Object Clone()
    {
        return new AFieldDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (TStatic)CloneNode (_static_),
            (TConst)CloneNode (_const_),
            (PType)CloneNode (_type_),
            (TIdentifier)CloneNode (_name_),
            (PExp)CloneNode (_init_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFieldDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public TStatic GetStatic ()
    {
        return _static_;
    }

    public void SetStatic (TStatic node)
    {
        if(_static_ != null)
        {
            _static_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _static_ = node;
    }
    public TConst GetConst ()
    {
        return _const_;
    }

    public void SetConst (TConst node)
    {
        if(_const_ != null)
        {
            _const_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PExp GetInit ()
    {
        return _init_;
    }

    public void SetInit (PExp node)
    {
        if(_init_ != null)
        {
            _init_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _init_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_static_)
            + ToString (_const_)
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_init_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _static_ == child )
        {
            _static_ = null;
            return;
        }
        if ( _const_ == child )
        {
            _const_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _init_ == child )
        {
            _init_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _static_ == oldChild )
        {
            SetStatic ((TStatic) newChild);
            return;
        }
        if ( _const_ == oldChild )
        {
            SetConst ((TConst) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _init_ == oldChild )
        {
            SetInit ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class APropertyDecl : PDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private TStatic _static_;
    private PType _type_;
    private TIdentifier _name_;
    private PBlock _getter_;
    private PBlock _setter_;

    public APropertyDecl ()
    {
    }

    public APropertyDecl (
            PVisibilityModifier _visibility_modifier_,
            TStatic _static_,
            PType _type_,
            TIdentifier _name_,
            PBlock _getter_,
            PBlock _setter_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetStatic (_static_);
        SetType (_type_);
        SetName (_name_);
        SetGetter (_getter_);
        SetSetter (_setter_);
    }

    public override Object Clone()
    {
        return new APropertyDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (TStatic)CloneNode (_static_),
            (PType)CloneNode (_type_),
            (TIdentifier)CloneNode (_name_),
            (PBlock)CloneNode (_getter_),
            (PBlock)CloneNode (_setter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPropertyDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public TStatic GetStatic ()
    {
        return _static_;
    }

    public void SetStatic (TStatic node)
    {
        if(_static_ != null)
        {
            _static_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _static_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PBlock GetGetter ()
    {
        return _getter_;
    }

    public void SetGetter (PBlock node)
    {
        if(_getter_ != null)
        {
            _getter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _getter_ = node;
    }
    public PBlock GetSetter ()
    {
        return _setter_;
    }

    public void SetSetter (PBlock node)
    {
        if(_setter_ != null)
        {
            _setter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _setter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_static_)
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_getter_)
            + ToString (_setter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _static_ == child )
        {
            _static_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _getter_ == child )
        {
            _getter_ = null;
            return;
        }
        if ( _setter_ == child )
        {
            _setter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _static_ == oldChild )
        {
            SetStatic ((TStatic) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _getter_ == oldChild )
        {
            SetGetter ((PBlock) newChild);
            return;
        }
        if ( _setter_ == oldChild )
        {
            SetSetter ((PBlock) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AThisArrayPropertyDecl : PDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private PType _type_;
    private TThis _token_;
    private PType _arg_type_;
    private TIdentifier _arg_name_;
    private PBlock _getter_;
    private PBlock _setter_;

    public AThisArrayPropertyDecl ()
    {
    }

    public AThisArrayPropertyDecl (
            PVisibilityModifier _visibility_modifier_,
            PType _type_,
            TThis _token_,
            PType _arg_type_,
            TIdentifier _arg_name_,
            PBlock _getter_,
            PBlock _setter_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetType (_type_);
        SetToken (_token_);
        SetArgType (_arg_type_);
        SetArgName (_arg_name_);
        SetGetter (_getter_);
        SetSetter (_setter_);
    }

    public override Object Clone()
    {
        return new AThisArrayPropertyDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (PType)CloneNode (_type_),
            (TThis)CloneNode (_token_),
            (PType)CloneNode (_arg_type_),
            (TIdentifier)CloneNode (_arg_name_),
            (PBlock)CloneNode (_getter_),
            (PBlock)CloneNode (_setter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThisArrayPropertyDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TThis GetToken ()
    {
        return _token_;
    }

    public void SetToken (TThis node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PType GetArgType ()
    {
        return _arg_type_;
    }

    public void SetArgType (PType node)
    {
        if(_arg_type_ != null)
        {
            _arg_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arg_type_ = node;
    }
    public TIdentifier GetArgName ()
    {
        return _arg_name_;
    }

    public void SetArgName (TIdentifier node)
    {
        if(_arg_name_ != null)
        {
            _arg_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arg_name_ = node;
    }
    public PBlock GetGetter ()
    {
        return _getter_;
    }

    public void SetGetter (PBlock node)
    {
        if(_getter_ != null)
        {
            _getter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _getter_ = node;
    }
    public PBlock GetSetter ()
    {
        return _setter_;
    }

    public void SetSetter (PBlock node)
    {
        if(_setter_ != null)
        {
            _setter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _setter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_type_)
            + ToString (_token_)
            + ToString (_arg_type_)
            + ToString (_arg_name_)
            + ToString (_getter_)
            + ToString (_setter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _arg_type_ == child )
        {
            _arg_type_ = null;
            return;
        }
        if ( _arg_name_ == child )
        {
            _arg_name_ = null;
            return;
        }
        if ( _getter_ == child )
        {
            _getter_ = null;
            return;
        }
        if ( _setter_ == child )
        {
            _setter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _token_ == oldChild )
        {
            SetToken ((TThis) newChild);
            return;
        }
        if ( _arg_type_ == oldChild )
        {
            SetArgType ((PType) newChild);
            return;
        }
        if ( _arg_name_ == oldChild )
        {
            SetArgName ((TIdentifier) newChild);
            return;
        }
        if ( _getter_ == oldChild )
        {
            SetGetter ((PBlock) newChild);
            return;
        }
        if ( _setter_ == oldChild )
        {
            SetSetter ((PBlock) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AMethodDecl : PDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private TTrigger _trigger_;
    private TStatic _static_;
    private TNative _native_;
    private TInline _inline_;
    private TDelegate _delegate_;
    private PType _return_type_;
    private TIdentifier _name_;
    private TypedList _formals_;
    private PBlock _block_;

    public AMethodDecl ()
    {
        this._formals_ = new TypedList(new Formals_Cast(this));
    }

    public AMethodDecl (
            PVisibilityModifier _visibility_modifier_,
            TTrigger _trigger_,
            TStatic _static_,
            TNative _native_,
            TInline _inline_,
            TDelegate _delegate_,
            PType _return_type_,
            TIdentifier _name_,
            IList _formals_,
            PBlock _block_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetTrigger (_trigger_);
        SetStatic (_static_);
        SetNative (_native_);
        SetInline (_inline_);
        SetDelegate (_delegate_);
        SetReturnType (_return_type_);
        SetName (_name_);
        this._formals_ = new TypedList(new Formals_Cast(this));
        this._formals_.Clear();
        this._formals_.AddAll(_formals_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AMethodDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (TTrigger)CloneNode (_trigger_),
            (TStatic)CloneNode (_static_),
            (TNative)CloneNode (_native_),
            (TInline)CloneNode (_inline_),
            (TDelegate)CloneNode (_delegate_),
            (PType)CloneNode (_return_type_),
            (TIdentifier)CloneNode (_name_),
            CloneList (_formals_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public TTrigger GetTrigger ()
    {
        return _trigger_;
    }

    public void SetTrigger (TTrigger node)
    {
        if(_trigger_ != null)
        {
            _trigger_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _trigger_ = node;
    }
    public TStatic GetStatic ()
    {
        return _static_;
    }

    public void SetStatic (TStatic node)
    {
        if(_static_ != null)
        {
            _static_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _static_ = node;
    }
    public TNative GetNative ()
    {
        return _native_;
    }

    public void SetNative (TNative node)
    {
        if(_native_ != null)
        {
            _native_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _native_ = node;
    }
    public TInline GetInline ()
    {
        return _inline_;
    }

    public void SetInline (TInline node)
    {
        if(_inline_ != null)
        {
            _inline_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _inline_ = node;
    }
    public TDelegate GetDelegate ()
    {
        return _delegate_;
    }

    public void SetDelegate (TDelegate node)
    {
        if(_delegate_ != null)
        {
            _delegate_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _delegate_ = node;
    }
    public PType GetReturnType ()
    {
        return _return_type_;
    }

    public void SetReturnType (PType node)
    {
        if(_return_type_ != null)
        {
            _return_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _return_type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetFormals ()
    {
        return _formals_;
    }

    public void setFormals (IList list)
    {
        _formals_.Clear();
        _formals_.AddAll(list);
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_trigger_)
            + ToString (_static_)
            + ToString (_native_)
            + ToString (_inline_)
            + ToString (_delegate_)
            + ToString (_return_type_)
            + ToString (_name_)
            + ToString (_formals_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _trigger_ == child )
        {
            _trigger_ = null;
            return;
        }
        if ( _static_ == child )
        {
            _static_ = null;
            return;
        }
        if ( _native_ == child )
        {
            _native_ = null;
            return;
        }
        if ( _inline_ == child )
        {
            _inline_ = null;
            return;
        }
        if ( _delegate_ == child )
        {
            _delegate_ = null;
            return;
        }
        if ( _return_type_ == child )
        {
            _return_type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _formals_.Contains(child) )
        {
            _formals_.Remove(child);
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _trigger_ == oldChild )
        {
            SetTrigger ((TTrigger) newChild);
            return;
        }
        if ( _static_ == oldChild )
        {
            SetStatic ((TStatic) newChild);
            return;
        }
        if ( _native_ == oldChild )
        {
            SetNative ((TNative) newChild);
            return;
        }
        if ( _inline_ == oldChild )
        {
            SetInline ((TInline) newChild);
            return;
        }
        if ( _delegate_ == oldChild )
        {
            SetDelegate ((TDelegate) newChild);
            return;
        }
        if ( _return_type_ == oldChild )
        {
            SetReturnType ((PType) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        for ( int i = 0; i < _formals_.Count; i++ )
        {
            Node n = (Node)_formals_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _formals_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _formals_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

[Serializable]
    private class Formals_Cast : Cast
    {
        AMethodDecl obj;

        internal Formals_Cast (AMethodDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AIncludeDecl : PDecl
{
    private TInclude _token_;
    private TStringLiteral _name_;

    public AIncludeDecl ()
    {
    }

    public AIncludeDecl (
            TInclude _token_,
            TStringLiteral _name_
    )
    {
        SetToken (_token_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new AIncludeDecl (
            (TInclude)CloneNode (_token_),
            (TStringLiteral)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIncludeDecl(this);
    }

    public TInclude GetToken ()
    {
        return _token_;
    }

    public void SetToken (TInclude node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public TStringLiteral GetName ()
    {
        return _name_;
    }

    public void SetName (TStringLiteral node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TInclude) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TStringLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AStructDecl : PDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private TClassToken _class_token_;
    private PExp _dimention_;
    private TIntegerLiteral _int_dim_;
    private TRBrace _end_token_;
    private TIdentifier _name_;
    private TypedList _generic_vars_;
    private PType _base_;
    private TypedList _locals_;

    public AStructDecl ()
    {
        this._generic_vars_ = new TypedList(new GenericVars_Cast(this));
        this._locals_ = new TypedList(new Locals_Cast(this));
    }

    public AStructDecl (
            PVisibilityModifier _visibility_modifier_,
            TClassToken _class_token_,
            PExp _dimention_,
            TIntegerLiteral _int_dim_,
            TRBrace _end_token_,
            TIdentifier _name_,
            IList _generic_vars_,
            PType _base_,
            IList _locals_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetClassToken (_class_token_);
        SetDimention (_dimention_);
        SetIntDim (_int_dim_);
        SetEndToken (_end_token_);
        SetName (_name_);
        this._generic_vars_ = new TypedList(new GenericVars_Cast(this));
        this._generic_vars_.Clear();
        this._generic_vars_.AddAll(_generic_vars_);
        SetBase (_base_);
        this._locals_ = new TypedList(new Locals_Cast(this));
        this._locals_.Clear();
        this._locals_.AddAll(_locals_);
    }

    public override Object Clone()
    {
        return new AStructDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (TClassToken)CloneNode (_class_token_),
            (PExp)CloneNode (_dimention_),
            (TIntegerLiteral)CloneNode (_int_dim_),
            (TRBrace)CloneNode (_end_token_),
            (TIdentifier)CloneNode (_name_),
            CloneList (_generic_vars_),
            (PType)CloneNode (_base_),
            CloneList (_locals_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStructDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public TClassToken GetClassToken ()
    {
        return _class_token_;
    }

    public void SetClassToken (TClassToken node)
    {
        if(_class_token_ != null)
        {
            _class_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _class_token_ = node;
    }
    public PExp GetDimention ()
    {
        return _dimention_;
    }

    public void SetDimention (PExp node)
    {
        if(_dimention_ != null)
        {
            _dimention_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dimention_ = node;
    }
    public TIntegerLiteral GetIntDim ()
    {
        return _int_dim_;
    }

    public void SetIntDim (TIntegerLiteral node)
    {
        if(_int_dim_ != null)
        {
            _int_dim_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_dim_ = node;
    }
    public TRBrace GetEndToken ()
    {
        return _end_token_;
    }

    public void SetEndToken (TRBrace node)
    {
        if(_end_token_ != null)
        {
            _end_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_token_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetGenericVars ()
    {
        return _generic_vars_;
    }

    public void setGenericVars (IList list)
    {
        _generic_vars_.Clear();
        _generic_vars_.AddAll(list);
    }
    public PType GetBase ()
    {
        return _base_;
    }

    public void SetBase (PType node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }
    public IList GetLocals ()
    {
        return _locals_;
    }

    public void setLocals (IList list)
    {
        _locals_.Clear();
        _locals_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_class_token_)
            + ToString (_dimention_)
            + ToString (_int_dim_)
            + ToString (_end_token_)
            + ToString (_name_)
            + ToString (_generic_vars_)
            + ToString (_base_)
            + ToString (_locals_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _class_token_ == child )
        {
            _class_token_ = null;
            return;
        }
        if ( _dimention_ == child )
        {
            _dimention_ = null;
            return;
        }
        if ( _int_dim_ == child )
        {
            _int_dim_ = null;
            return;
        }
        if ( _end_token_ == child )
        {
            _end_token_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _generic_vars_.Contains(child) )
        {
            _generic_vars_.Remove(child);
            return;
        }
        if ( _base_ == child )
        {
            _base_ = null;
            return;
        }
        if ( _locals_.Contains(child) )
        {
            _locals_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _class_token_ == oldChild )
        {
            SetClassToken ((TClassToken) newChild);
            return;
        }
        if ( _dimention_ == oldChild )
        {
            SetDimention ((PExp) newChild);
            return;
        }
        if ( _int_dim_ == oldChild )
        {
            SetIntDim ((TIntegerLiteral) newChild);
            return;
        }
        if ( _end_token_ == oldChild )
        {
            SetEndToken ((TRBrace) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        for ( int i = 0; i < _generic_vars_.Count; i++ )
        {
            Node n = (Node)_generic_vars_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _generic_vars_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _generic_vars_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _base_ == oldChild )
        {
            SetBase ((PType) newChild);
            return;
        }
        for ( int i = 0; i < _locals_.Count; i++ )
        {
            Node n = (Node)_locals_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _locals_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _locals_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class GenericVars_Cast : Cast
    {
        AStructDecl obj;

        internal GenericVars_Cast (AStructDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TIdentifier node = (TIdentifier) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TIdentifier node = (TIdentifier) o;
            node.Parent(null);
            return node;
        }
    }
[Serializable]
    private class Locals_Cast : Cast
    {
        AStructDecl obj;

        internal Locals_Cast (AStructDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AEnrichmentDecl : PDecl
{
    private TEnrichment _token_;
    private PExp _dimention_;
    private TIntegerLiteral _int_dim_;
    private TRBrace _end_token_;
    private PType _type_;
    private TypedList _decl_;

    public AEnrichmentDecl ()
    {
        this._decl_ = new TypedList(new Decl_Cast(this));
    }

    public AEnrichmentDecl (
            TEnrichment _token_,
            PExp _dimention_,
            TIntegerLiteral _int_dim_,
            TRBrace _end_token_,
            PType _type_,
            IList _decl_
    )
    {
        SetToken (_token_);
        SetDimention (_dimention_);
        SetIntDim (_int_dim_);
        SetEndToken (_end_token_);
        SetType (_type_);
        this._decl_ = new TypedList(new Decl_Cast(this));
        this._decl_.Clear();
        this._decl_.AddAll(_decl_);
    }

    public override Object Clone()
    {
        return new AEnrichmentDecl (
            (TEnrichment)CloneNode (_token_),
            (PExp)CloneNode (_dimention_),
            (TIntegerLiteral)CloneNode (_int_dim_),
            (TRBrace)CloneNode (_end_token_),
            (PType)CloneNode (_type_),
            CloneList (_decl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEnrichmentDecl(this);
    }

    public TEnrichment GetToken ()
    {
        return _token_;
    }

    public void SetToken (TEnrichment node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetDimention ()
    {
        return _dimention_;
    }

    public void SetDimention (PExp node)
    {
        if(_dimention_ != null)
        {
            _dimention_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dimention_ = node;
    }
    public TIntegerLiteral GetIntDim ()
    {
        return _int_dim_;
    }

    public void SetIntDim (TIntegerLiteral node)
    {
        if(_int_dim_ != null)
        {
            _int_dim_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_dim_ = node;
    }
    public TRBrace GetEndToken ()
    {
        return _end_token_;
    }

    public void SetEndToken (TRBrace node)
    {
        if(_end_token_ != null)
        {
            _end_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_token_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public IList GetDecl ()
    {
        return _decl_;
    }

    public void setDecl (IList list)
    {
        _decl_.Clear();
        _decl_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_dimention_)
            + ToString (_int_dim_)
            + ToString (_end_token_)
            + ToString (_type_)
            + ToString (_decl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _dimention_ == child )
        {
            _dimention_ = null;
            return;
        }
        if ( _int_dim_ == child )
        {
            _int_dim_ = null;
            return;
        }
        if ( _end_token_ == child )
        {
            _end_token_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _decl_.Contains(child) )
        {
            _decl_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TEnrichment) newChild);
            return;
        }
        if ( _dimention_ == oldChild )
        {
            SetDimention ((PExp) newChild);
            return;
        }
        if ( _int_dim_ == oldChild )
        {
            SetIntDim ((TIntegerLiteral) newChild);
            return;
        }
        if ( _end_token_ == oldChild )
        {
            SetEndToken ((TRBrace) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        for ( int i = 0; i < _decl_.Count; i++ )
        {
            Node n = (Node)_decl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _decl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _decl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class Decl_Cast : Cast
    {
        AEnrichmentDecl obj;

        internal Decl_Cast (AEnrichmentDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDecl node = (PDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDecl node = (PDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AUsingDecl : PDecl
{
    private TypedList _namespace_;

    public AUsingDecl ()
    {
        this._namespace_ = new TypedList(new Namespace_Cast(this));
    }

    public AUsingDecl (
            IList _namespace_
    )
    {
        this._namespace_ = new TypedList(new Namespace_Cast(this));
        this._namespace_.Clear();
        this._namespace_.AddAll(_namespace_);
    }

    public override Object Clone()
    {
        return new AUsingDecl (
            CloneList (_namespace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUsingDecl(this);
    }

    public IList GetNamespace ()
    {
        return _namespace_;
    }

    public void setNamespace (IList list)
    {
        _namespace_.Clear();
        _namespace_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_namespace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _namespace_.Contains(child) )
        {
            _namespace_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _namespace_.Count; i++ )
        {
            Node n = (Node)_namespace_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _namespace_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _namespace_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class Namespace_Cast : Cast
    {
        AUsingDecl obj;

        internal Namespace_Cast (AUsingDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TIdentifier node = (TIdentifier) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TIdentifier node = (TIdentifier) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class APreloadBankDecl : PDecl
{
    private TPreloadBank _token_;
    private TStringLiteral _bank_;
    private PExp _player_;

    public APreloadBankDecl ()
    {
    }

    public APreloadBankDecl (
            TPreloadBank _token_,
            TStringLiteral _bank_,
            PExp _player_
    )
    {
        SetToken (_token_);
        SetBank (_bank_);
        SetPlayer (_player_);
    }

    public override Object Clone()
    {
        return new APreloadBankDecl (
            (TPreloadBank)CloneNode (_token_),
            (TStringLiteral)CloneNode (_bank_),
            (PExp)CloneNode (_player_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPreloadBankDecl(this);
    }

    public TPreloadBank GetToken ()
    {
        return _token_;
    }

    public void SetToken (TPreloadBank node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public TStringLiteral GetBank ()
    {
        return _bank_;
    }

    public void SetBank (TStringLiteral node)
    {
        if(_bank_ != null)
        {
            _bank_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bank_ = node;
    }
    public PExp GetPlayer ()
    {
        return _player_;
    }

    public void SetPlayer (PExp node)
    {
        if(_player_ != null)
        {
            _player_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _player_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_bank_)
            + ToString (_player_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _bank_ == child )
        {
            _bank_ = null;
            return;
        }
        if ( _player_ == child )
        {
            _player_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TPreloadBank) newChild);
            return;
        }
        if ( _bank_ == oldChild )
        {
            SetBank ((TStringLiteral) newChild);
            return;
        }
        if ( _player_ == oldChild )
        {
            SetPlayer ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AInitializerDecl : PDecl
{
    private TInitializer _token_;
    private TypedList _initializer_param_;
    private PBlock _body_;

    public AInitializerDecl ()
    {
        this._initializer_param_ = new TypedList(new InitializerParam_Cast(this));
    }

    public AInitializerDecl (
            TInitializer _token_,
            IList _initializer_param_,
            PBlock _body_
    )
    {
        SetToken (_token_);
        this._initializer_param_ = new TypedList(new InitializerParam_Cast(this));
        this._initializer_param_.Clear();
        this._initializer_param_.AddAll(_initializer_param_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AInitializerDecl (
            (TInitializer)CloneNode (_token_),
            CloneList (_initializer_param_),
            (PBlock)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAInitializerDecl(this);
    }

    public TInitializer GetToken ()
    {
        return _token_;
    }

    public void SetToken (TInitializer node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public IList GetInitializerParam ()
    {
        return _initializer_param_;
    }

    public void setInitializerParam (IList list)
    {
        _initializer_param_.Clear();
        _initializer_param_.AddAll(list);
    }
    public PBlock GetBody ()
    {
        return _body_;
    }

    public void SetBody (PBlock node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_initializer_param_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _initializer_param_.Contains(child) )
        {
            _initializer_param_.Remove(child);
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TInitializer) newChild);
            return;
        }
        for ( int i = 0; i < _initializer_param_.Count; i++ )
        {
            Node n = (Node)_initializer_param_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _initializer_param_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _initializer_param_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PBlock) newChild);
            return;
        }
    }

[Serializable]
    private class InitializerParam_Cast : Cast
    {
        AInitializerDecl obj;

        internal InitializerParam_Cast (AInitializerDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PInitializerParam node = (PInitializerParam) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PInitializerParam node = (PInitializerParam) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class ATriggerDecl : PDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private TIdentifier _name_;
    private TEvents _event_token_;
    private PBlock _events_;
    private TConditions _conditions_token_;
    private PBlock _conditions_;
    private TActions _actions_token_;
    private PBlock _actions_;

    public ATriggerDecl ()
    {
    }

    public ATriggerDecl (
            PVisibilityModifier _visibility_modifier_,
            TIdentifier _name_,
            TEvents _event_token_,
            PBlock _events_,
            TConditions _conditions_token_,
            PBlock _conditions_,
            TActions _actions_token_,
            PBlock _actions_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetName (_name_);
        SetEventToken (_event_token_);
        SetEvents (_events_);
        SetConditionsToken (_conditions_token_);
        SetConditions (_conditions_);
        SetActionsToken (_actions_token_);
        SetActions (_actions_);
    }

    public override Object Clone()
    {
        return new ATriggerDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (TIdentifier)CloneNode (_name_),
            (TEvents)CloneNode (_event_token_),
            (PBlock)CloneNode (_events_),
            (TConditions)CloneNode (_conditions_token_),
            (PBlock)CloneNode (_conditions_),
            (TActions)CloneNode (_actions_token_),
            (PBlock)CloneNode (_actions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATriggerDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public TEvents GetEventToken ()
    {
        return _event_token_;
    }

    public void SetEventToken (TEvents node)
    {
        if(_event_token_ != null)
        {
            _event_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _event_token_ = node;
    }
    public PBlock GetEvents ()
    {
        return _events_;
    }

    public void SetEvents (PBlock node)
    {
        if(_events_ != null)
        {
            _events_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _events_ = node;
    }
    public TConditions GetConditionsToken ()
    {
        return _conditions_token_;
    }

    public void SetConditionsToken (TConditions node)
    {
        if(_conditions_token_ != null)
        {
            _conditions_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditions_token_ = node;
    }
    public PBlock GetConditions ()
    {
        return _conditions_;
    }

    public void SetConditions (PBlock node)
    {
        if(_conditions_ != null)
        {
            _conditions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditions_ = node;
    }
    public TActions GetActionsToken ()
    {
        return _actions_token_;
    }

    public void SetActionsToken (TActions node)
    {
        if(_actions_token_ != null)
        {
            _actions_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actions_token_ = node;
    }
    public PBlock GetActions ()
    {
        return _actions_;
    }

    public void SetActions (PBlock node)
    {
        if(_actions_ != null)
        {
            _actions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actions_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_name_)
            + ToString (_event_token_)
            + ToString (_events_)
            + ToString (_conditions_token_)
            + ToString (_conditions_)
            + ToString (_actions_token_)
            + ToString (_actions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _event_token_ == child )
        {
            _event_token_ = null;
            return;
        }
        if ( _events_ == child )
        {
            _events_ = null;
            return;
        }
        if ( _conditions_token_ == child )
        {
            _conditions_token_ = null;
            return;
        }
        if ( _conditions_ == child )
        {
            _conditions_ = null;
            return;
        }
        if ( _actions_token_ == child )
        {
            _actions_token_ = null;
            return;
        }
        if ( _actions_ == child )
        {
            _actions_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _event_token_ == oldChild )
        {
            SetEventToken ((TEvents) newChild);
            return;
        }
        if ( _events_ == oldChild )
        {
            SetEvents ((PBlock) newChild);
            return;
        }
        if ( _conditions_token_ == oldChild )
        {
            SetConditionsToken ((TConditions) newChild);
            return;
        }
        if ( _conditions_ == oldChild )
        {
            SetConditions ((PBlock) newChild);
            return;
        }
        if ( _actions_token_ == oldChild )
        {
            SetActionsToken ((TActions) newChild);
            return;
        }
        if ( _actions_ == oldChild )
        {
            SetActions ((PBlock) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ATypedefDecl : PDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private TStatic _static_;
    private TTypedef _token_;
    private PType _type_;
    private PType _name_;

    public ATypedefDecl ()
    {
    }

    public ATypedefDecl (
            PVisibilityModifier _visibility_modifier_,
            TStatic _static_,
            TTypedef _token_,
            PType _type_,
            PType _name_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetStatic (_static_);
        SetToken (_token_);
        SetType (_type_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new ATypedefDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (TStatic)CloneNode (_static_),
            (TTypedef)CloneNode (_token_),
            (PType)CloneNode (_type_),
            (PType)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATypedefDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public TStatic GetStatic ()
    {
        return _static_;
    }

    public void SetStatic (TStatic node)
    {
        if(_static_ != null)
        {
            _static_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _static_ = node;
    }
    public TTypedef GetToken ()
    {
        return _token_;
    }

    public void SetToken (TTypedef node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PType GetName ()
    {
        return _name_;
    }

    public void SetName (PType node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_static_)
            + ToString (_token_)
            + ToString (_type_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _static_ == child )
        {
            _static_ = null;
            return;
        }
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _static_ == oldChild )
        {
            SetStatic ((TStatic) newChild);
            return;
        }
        if ( _token_ == oldChild )
        {
            SetToken ((TTypedef) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((PType) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AConstructorDecl : PDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private TIdentifier _name_;
    private TypedList _formals_;
    private TypedList _base_args_;
    private PBlock _block_;

    public AConstructorDecl ()
    {
        this._formals_ = new TypedList(new Formals_Cast(this));
        this._base_args_ = new TypedList(new BaseArgs_Cast(this));
    }

    public AConstructorDecl (
            PVisibilityModifier _visibility_modifier_,
            TIdentifier _name_,
            IList _formals_,
            IList _base_args_,
            PBlock _block_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetName (_name_);
        this._formals_ = new TypedList(new Formals_Cast(this));
        this._formals_.Clear();
        this._formals_.AddAll(_formals_);
        this._base_args_ = new TypedList(new BaseArgs_Cast(this));
        this._base_args_.Clear();
        this._base_args_.AddAll(_base_args_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AConstructorDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (TIdentifier)CloneNode (_name_),
            CloneList (_formals_),
            CloneList (_base_args_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstructorDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetFormals ()
    {
        return _formals_;
    }

    public void setFormals (IList list)
    {
        _formals_.Clear();
        _formals_.AddAll(list);
    }
    public IList GetBaseArgs ()
    {
        return _base_args_;
    }

    public void setBaseArgs (IList list)
    {
        _base_args_.Clear();
        _base_args_.AddAll(list);
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_name_)
            + ToString (_formals_)
            + ToString (_base_args_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _formals_.Contains(child) )
        {
            _formals_.Remove(child);
            return;
        }
        if ( _base_args_.Contains(child) )
        {
            _base_args_.Remove(child);
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        for ( int i = 0; i < _formals_.Count; i++ )
        {
            Node n = (Node)_formals_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _formals_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _formals_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _base_args_.Count; i++ )
        {
            Node n = (Node)_base_args_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _base_args_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _base_args_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

[Serializable]
    private class Formals_Cast : Cast
    {
        AConstructorDecl obj;

        internal Formals_Cast (AConstructorDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;
            node.Parent(null);
            return node;
        }
    }
[Serializable]
    private class BaseArgs_Cast : Cast
    {
        AConstructorDecl obj;

        internal BaseArgs_Cast (AConstructorDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExp node = (PExp) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExp node = (PExp) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class ADeconstructorDecl : PDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private TIdentifier _name_;
    private TypedList _formals_;
    private PBlock _block_;

    public ADeconstructorDecl ()
    {
        this._formals_ = new TypedList(new Formals_Cast(this));
    }

    public ADeconstructorDecl (
            PVisibilityModifier _visibility_modifier_,
            TIdentifier _name_,
            IList _formals_,
            PBlock _block_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetName (_name_);
        this._formals_ = new TypedList(new Formals_Cast(this));
        this._formals_.Clear();
        this._formals_.AddAll(_formals_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new ADeconstructorDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (TIdentifier)CloneNode (_name_),
            CloneList (_formals_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeconstructorDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetFormals ()
    {
        return _formals_;
    }

    public void setFormals (IList list)
    {
        _formals_.Clear();
        _formals_.AddAll(list);
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_name_)
            + ToString (_formals_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _formals_.Contains(child) )
        {
            _formals_.Remove(child);
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        for ( int i = 0; i < _formals_.Count; i++ )
        {
            Node n = (Node)_formals_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _formals_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _formals_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

[Serializable]
    private class Formals_Cast : Cast
    {
        ADeconstructorDecl obj;

        internal Formals_Cast (ADeconstructorDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class ANamespaceDecl : PDecl
{
    private TNamespace _token_;
    private TIdentifier _name_;
    private TypedList _decl_;
    private TRBrace _end_token_;

    public ANamespaceDecl ()
    {
        this._decl_ = new TypedList(new Decl_Cast(this));
    }

    public ANamespaceDecl (
            TNamespace _token_,
            TIdentifier _name_,
            IList _decl_,
            TRBrace _end_token_
    )
    {
        SetToken (_token_);
        SetName (_name_);
        this._decl_ = new TypedList(new Decl_Cast(this));
        this._decl_.Clear();
        this._decl_.AddAll(_decl_);
        SetEndToken (_end_token_);
    }

    public override Object Clone()
    {
        return new ANamespaceDecl (
            (TNamespace)CloneNode (_token_),
            (TIdentifier)CloneNode (_name_),
            CloneList (_decl_),
            (TRBrace)CloneNode (_end_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANamespaceDecl(this);
    }

    public TNamespace GetToken ()
    {
        return _token_;
    }

    public void SetToken (TNamespace node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetDecl ()
    {
        return _decl_;
    }

    public void setDecl (IList list)
    {
        _decl_.Clear();
        _decl_.AddAll(list);
    }
    public TRBrace GetEndToken ()
    {
        return _end_token_;
    }

    public void SetEndToken (TRBrace node)
    {
        if(_end_token_ != null)
        {
            _end_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_name_)
            + ToString (_decl_)
            + ToString (_end_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _decl_.Contains(child) )
        {
            _decl_.Remove(child);
            return;
        }
        if ( _end_token_ == child )
        {
            _end_token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TNamespace) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        for ( int i = 0; i < _decl_.Count; i++ )
        {
            Node n = (Node)_decl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _decl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _decl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _end_token_ == oldChild )
        {
            SetEndToken ((TRBrace) newChild);
            return;
        }
    }

[Serializable]
    private class Decl_Cast : Cast
    {
        ANamespaceDecl obj;

        internal Decl_Cast (ANamespaceDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDecl node = (PDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDecl node = (PDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class ATempNamespaceDecl : PDecl
{
    private TNamespace _token_;
    private TypedList _name_;
    private TypedList _decl_;
    private TRBrace _end_token_;

    public ATempNamespaceDecl ()
    {
        this._name_ = new TypedList(new Name_Cast(this));
        this._decl_ = new TypedList(new Decl_Cast(this));
    }

    public ATempNamespaceDecl (
            TNamespace _token_,
            IList _name_,
            IList _decl_,
            TRBrace _end_token_
    )
    {
        SetToken (_token_);
        this._name_ = new TypedList(new Name_Cast(this));
        this._name_.Clear();
        this._name_.AddAll(_name_);
        this._decl_ = new TypedList(new Decl_Cast(this));
        this._decl_.Clear();
        this._decl_.AddAll(_decl_);
        SetEndToken (_end_token_);
    }

    public override Object Clone()
    {
        return new ATempNamespaceDecl (
            (TNamespace)CloneNode (_token_),
            CloneList (_name_),
            CloneList (_decl_),
            (TRBrace)CloneNode (_end_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATempNamespaceDecl(this);
    }

    public TNamespace GetToken ()
    {
        return _token_;
    }

    public void SetToken (TNamespace node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public IList GetName ()
    {
        return _name_;
    }

    public void setName (IList list)
    {
        _name_.Clear();
        _name_.AddAll(list);
    }
    public IList GetDecl ()
    {
        return _decl_;
    }

    public void setDecl (IList list)
    {
        _decl_.Clear();
        _decl_.AddAll(list);
    }
    public TRBrace GetEndToken ()
    {
        return _end_token_;
    }

    public void SetEndToken (TRBrace node)
    {
        if(_end_token_ != null)
        {
            _end_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_name_)
            + ToString (_decl_)
            + ToString (_end_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _name_.Contains(child) )
        {
            _name_.Remove(child);
            return;
        }
        if ( _decl_.Contains(child) )
        {
            _decl_.Remove(child);
            return;
        }
        if ( _end_token_ == child )
        {
            _end_token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TNamespace) newChild);
            return;
        }
        for ( int i = 0; i < _name_.Count; i++ )
        {
            Node n = (Node)_name_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _name_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _name_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _decl_.Count; i++ )
        {
            Node n = (Node)_decl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _decl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _decl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _end_token_ == oldChild )
        {
            SetEndToken ((TRBrace) newChild);
            return;
        }
    }

[Serializable]
    private class Name_Cast : Cast
    {
        ATempNamespaceDecl obj;

        internal Name_Cast (ATempNamespaceDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TIdentifier node = (TIdentifier) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TIdentifier node = (TIdentifier) o;
            node.Parent(null);
            return node;
        }
    }
[Serializable]
    private class Decl_Cast : Cast
    {
        ATempNamespaceDecl obj;

        internal Decl_Cast (ATempNamespaceDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDecl node = (PDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDecl node = (PDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AOperatorDecl : PDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private TStatic _static_;
    private PType _return_type_;
    private TOperator _token_;
    private PBinop _operator_;
    private TypedList _formals_;
    private PBlock _block_;

    public AOperatorDecl ()
    {
        this._formals_ = new TypedList(new Formals_Cast(this));
    }

    public AOperatorDecl (
            PVisibilityModifier _visibility_modifier_,
            TStatic _static_,
            PType _return_type_,
            TOperator _token_,
            PBinop _operator_,
            IList _formals_,
            PBlock _block_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetStatic (_static_);
        SetReturnType (_return_type_);
        SetToken (_token_);
        SetOperator (_operator_);
        this._formals_ = new TypedList(new Formals_Cast(this));
        this._formals_.Clear();
        this._formals_.AddAll(_formals_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AOperatorDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (TStatic)CloneNode (_static_),
            (PType)CloneNode (_return_type_),
            (TOperator)CloneNode (_token_),
            (PBinop)CloneNode (_operator_),
            CloneList (_formals_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOperatorDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public TStatic GetStatic ()
    {
        return _static_;
    }

    public void SetStatic (TStatic node)
    {
        if(_static_ != null)
        {
            _static_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _static_ = node;
    }
    public PType GetReturnType ()
    {
        return _return_type_;
    }

    public void SetReturnType (PType node)
    {
        if(_return_type_ != null)
        {
            _return_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _return_type_ = node;
    }
    public TOperator GetToken ()
    {
        return _token_;
    }

    public void SetToken (TOperator node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PBinop GetOperator ()
    {
        return _operator_;
    }

    public void SetOperator (PBinop node)
    {
        if(_operator_ != null)
        {
            _operator_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_ = node;
    }
    public IList GetFormals ()
    {
        return _formals_;
    }

    public void setFormals (IList list)
    {
        _formals_.Clear();
        _formals_.AddAll(list);
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_static_)
            + ToString (_return_type_)
            + ToString (_token_)
            + ToString (_operator_)
            + ToString (_formals_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _static_ == child )
        {
            _static_ = null;
            return;
        }
        if ( _return_type_ == child )
        {
            _return_type_ = null;
            return;
        }
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _operator_ == child )
        {
            _operator_ = null;
            return;
        }
        if ( _formals_.Contains(child) )
        {
            _formals_.Remove(child);
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _static_ == oldChild )
        {
            SetStatic ((TStatic) newChild);
            return;
        }
        if ( _return_type_ == oldChild )
        {
            SetReturnType ((PType) newChild);
            return;
        }
        if ( _token_ == oldChild )
        {
            SetToken ((TOperator) newChild);
            return;
        }
        if ( _operator_ == oldChild )
        {
            SetOperator ((PBinop) newChild);
            return;
        }
        for ( int i = 0; i < _formals_.Count; i++ )
        {
            Node n = (Node)_formals_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _formals_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _formals_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

[Serializable]
    private class Formals_Cast : Cast
    {
        AOperatorDecl obj;

        internal Formals_Cast (AOperatorDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLocalDecl node = (PLocalDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AEnumDecl : PDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private TStatic _static_;
    private TEnum _token_;
    private TIdentifier _name_;
    private TypedList _values_;
    private TRBrace _end_token_;

    public AEnumDecl ()
    {
        this._values_ = new TypedList(new Values_Cast(this));
    }

    public AEnumDecl (
            PVisibilityModifier _visibility_modifier_,
            TStatic _static_,
            TEnum _token_,
            TIdentifier _name_,
            IList _values_,
            TRBrace _end_token_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetStatic (_static_);
        SetToken (_token_);
        SetName (_name_);
        this._values_ = new TypedList(new Values_Cast(this));
        this._values_.Clear();
        this._values_.AddAll(_values_);
        SetEndToken (_end_token_);
    }

    public override Object Clone()
    {
        return new AEnumDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (TStatic)CloneNode (_static_),
            (TEnum)CloneNode (_token_),
            (TIdentifier)CloneNode (_name_),
            CloneList (_values_),
            (TRBrace)CloneNode (_end_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEnumDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public TStatic GetStatic ()
    {
        return _static_;
    }

    public void SetStatic (TStatic node)
    {
        if(_static_ != null)
        {
            _static_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _static_ = node;
    }
    public TEnum GetToken ()
    {
        return _token_;
    }

    public void SetToken (TEnum node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetValues ()
    {
        return _values_;
    }

    public void setValues (IList list)
    {
        _values_.Clear();
        _values_.AddAll(list);
    }
    public TRBrace GetEndToken ()
    {
        return _end_token_;
    }

    public void SetEndToken (TRBrace node)
    {
        if(_end_token_ != null)
        {
            _end_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_static_)
            + ToString (_token_)
            + ToString (_name_)
            + ToString (_values_)
            + ToString (_end_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _static_ == child )
        {
            _static_ = null;
            return;
        }
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _values_.Contains(child) )
        {
            _values_.Remove(child);
            return;
        }
        if ( _end_token_ == child )
        {
            _end_token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _static_ == oldChild )
        {
            SetStatic ((TStatic) newChild);
            return;
        }
        if ( _token_ == oldChild )
        {
            SetToken ((TEnum) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        for ( int i = 0; i < _values_.Count; i++ )
        {
            Node n = (Node)_values_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _values_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _values_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _end_token_ == oldChild )
        {
            SetEndToken ((TRBrace) newChild);
            return;
        }
    }

[Serializable]
    private class Values_Cast : Cast
    {
        AEnumDecl obj;

        internal Values_Cast (AEnumDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PEnumLocal node = (PEnumLocal) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PEnumLocal node = (PEnumLocal) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AAEnumLocal : PEnumLocal
{
    private TIdentifier _name_;
    private PExp _value_;

    public AAEnumLocal ()
    {
    }

    public AAEnumLocal (
            TIdentifier _name_,
            PExp _value_
    )
    {
        SetName (_name_);
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new AAEnumLocal (
            (TIdentifier)CloneNode (_name_),
            (PExp)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAEnumLocal(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PExp GetValue ()
    {
        return _value_;
    }

    public void SetValue (PExp node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _value_ == oldChild )
        {
            SetValue ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ALibraryNameInitializerParam : PInitializerParam
{
    private TLibraryName _token_;
    private TStringLiteral _name_;

    public ALibraryNameInitializerParam ()
    {
    }

    public ALibraryNameInitializerParam (
            TLibraryName _token_,
            TStringLiteral _name_
    )
    {
        SetToken (_token_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new ALibraryNameInitializerParam (
            (TLibraryName)CloneNode (_token_),
            (TStringLiteral)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALibraryNameInitializerParam(this);
    }

    public TLibraryName GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLibraryName node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public TStringLiteral GetName ()
    {
        return _name_;
    }

    public void SetName (TStringLiteral node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLibraryName) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TStringLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ALibraryVersionInitializerParam : PInitializerParam
{
    private TLibraryVersion _token_;
    private TStringLiteral _name_;

    public ALibraryVersionInitializerParam ()
    {
    }

    public ALibraryVersionInitializerParam (
            TLibraryVersion _token_,
            TStringLiteral _name_
    )
    {
        SetToken (_token_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new ALibraryVersionInitializerParam (
            (TLibraryVersion)CloneNode (_token_),
            (TStringLiteral)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALibraryVersionInitializerParam(this);
    }

    public TLibraryVersion GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLibraryVersion node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public TStringLiteral GetName ()
    {
        return _name_;
    }

    public void SetName (TStringLiteral node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLibraryVersion) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TStringLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ASupportedVersionsInitializerParam : PInitializerParam
{
    private TSupportedVersions _token_;
    private TStringLiteral _name_;

    public ASupportedVersionsInitializerParam ()
    {
    }

    public ASupportedVersionsInitializerParam (
            TSupportedVersions _token_,
            TStringLiteral _name_
    )
    {
        SetToken (_token_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new ASupportedVersionsInitializerParam (
            (TSupportedVersions)CloneNode (_token_),
            (TStringLiteral)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASupportedVersionsInitializerParam(this);
    }

    public TSupportedVersions GetToken ()
    {
        return _token_;
    }

    public void SetToken (TSupportedVersions node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public TStringLiteral GetName ()
    {
        return _name_;
    }

    public void SetName (TStringLiteral node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TSupportedVersions) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TStringLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ARequiredLibrariesInitializerParam : PInitializerParam
{
    private TRequiredLibraries _token_;
    private TStringLiteral _name_;

    public ARequiredLibrariesInitializerParam ()
    {
    }

    public ARequiredLibrariesInitializerParam (
            TRequiredLibraries _token_,
            TStringLiteral _name_
    )
    {
        SetToken (_token_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new ARequiredLibrariesInitializerParam (
            (TRequiredLibraries)CloneNode (_token_),
            (TStringLiteral)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARequiredLibrariesInitializerParam(this);
    }

    public TRequiredLibraries GetToken ()
    {
        return _token_;
    }

    public void SetToken (TRequiredLibraries node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public TStringLiteral GetName ()
    {
        return _name_;
    }

    public void SetName (TStringLiteral node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TRequiredLibraries) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TStringLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AALocalDecl : PLocalDecl
{
    private PVisibilityModifier _visibility_modifier_;
    private TStatic _static_;
    private TRef _ref_;
    private TOut _out_;
    private TConst _const_;
    private PType _type_;
    private TIdentifier _name_;
    private PExp _init_;

    public AALocalDecl ()
    {
    }

    public AALocalDecl (
            PVisibilityModifier _visibility_modifier_,
            TStatic _static_,
            TRef _ref_,
            TOut _out_,
            TConst _const_,
            PType _type_,
            TIdentifier _name_,
            PExp _init_
    )
    {
        SetVisibilityModifier (_visibility_modifier_);
        SetStatic (_static_);
        SetRef (_ref_);
        SetOut (_out_);
        SetConst (_const_);
        SetType (_type_);
        SetName (_name_);
        SetInit (_init_);
    }

    public override Object Clone()
    {
        return new AALocalDecl (
            (PVisibilityModifier)CloneNode (_visibility_modifier_),
            (TStatic)CloneNode (_static_),
            (TRef)CloneNode (_ref_),
            (TOut)CloneNode (_out_),
            (TConst)CloneNode (_const_),
            (PType)CloneNode (_type_),
            (TIdentifier)CloneNode (_name_),
            (PExp)CloneNode (_init_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAALocalDecl(this);
    }

    public PVisibilityModifier GetVisibilityModifier ()
    {
        return _visibility_modifier_;
    }

    public void SetVisibilityModifier (PVisibilityModifier node)
    {
        if(_visibility_modifier_ != null)
        {
            _visibility_modifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _visibility_modifier_ = node;
    }
    public TStatic GetStatic ()
    {
        return _static_;
    }

    public void SetStatic (TStatic node)
    {
        if(_static_ != null)
        {
            _static_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _static_ = node;
    }
    public TRef GetRef ()
    {
        return _ref_;
    }

    public void SetRef (TRef node)
    {
        if(_ref_ != null)
        {
            _ref_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ref_ = node;
    }
    public TOut GetOut ()
    {
        return _out_;
    }

    public void SetOut (TOut node)
    {
        if(_out_ != null)
        {
            _out_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _out_ = node;
    }
    public TConst GetConst ()
    {
        return _const_;
    }

    public void SetConst (TConst node)
    {
        if(_const_ != null)
        {
            _const_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PExp GetInit ()
    {
        return _init_;
    }

    public void SetInit (PExp node)
    {
        if(_init_ != null)
        {
            _init_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _init_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_visibility_modifier_)
            + ToString (_static_)
            + ToString (_ref_)
            + ToString (_out_)
            + ToString (_const_)
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_init_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _visibility_modifier_ == child )
        {
            _visibility_modifier_ = null;
            return;
        }
        if ( _static_ == child )
        {
            _static_ = null;
            return;
        }
        if ( _ref_ == child )
        {
            _ref_ = null;
            return;
        }
        if ( _out_ == child )
        {
            _out_ = null;
            return;
        }
        if ( _const_ == child )
        {
            _const_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _init_ == child )
        {
            _init_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _visibility_modifier_ == oldChild )
        {
            SetVisibilityModifier ((PVisibilityModifier) newChild);
            return;
        }
        if ( _static_ == oldChild )
        {
            SetStatic ((TStatic) newChild);
            return;
        }
        if ( _ref_ == oldChild )
        {
            SetRef ((TRef) newChild);
            return;
        }
        if ( _out_ == oldChild )
        {
            SetOut ((TOut) newChild);
            return;
        }
        if ( _const_ == oldChild )
        {
            SetConst ((TConst) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _init_ == oldChild )
        {
            SetInit ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AMultiLocalDecl : PLocalDecl
{
    private TConst _const_;
    private PType _type_;
    private TypedList _local_decl_right_;

    public AMultiLocalDecl ()
    {
        this._local_decl_right_ = new TypedList(new LocalDeclRight_Cast(this));
    }

    public AMultiLocalDecl (
            TConst _const_,
            PType _type_,
            IList _local_decl_right_
    )
    {
        SetConst (_const_);
        SetType (_type_);
        this._local_decl_right_ = new TypedList(new LocalDeclRight_Cast(this));
        this._local_decl_right_.Clear();
        this._local_decl_right_.AddAll(_local_decl_right_);
    }

    public override Object Clone()
    {
        return new AMultiLocalDecl (
            (TConst)CloneNode (_const_),
            (PType)CloneNode (_type_),
            CloneList (_local_decl_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiLocalDecl(this);
    }

    public TConst GetConst ()
    {
        return _const_;
    }

    public void SetConst (TConst node)
    {
        if(_const_ != null)
        {
            _const_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public IList GetLocalDeclRight ()
    {
        return _local_decl_right_;
    }

    public void setLocalDeclRight (IList list)
    {
        _local_decl_right_.Clear();
        _local_decl_right_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_const_)
            + ToString (_type_)
            + ToString (_local_decl_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _const_ == child )
        {
            _const_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _local_decl_right_.Contains(child) )
        {
            _local_decl_right_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _const_ == oldChild )
        {
            SetConst ((TConst) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        for ( int i = 0; i < _local_decl_right_.Count; i++ )
        {
            Node n = (Node)_local_decl_right_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _local_decl_right_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _local_decl_right_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class LocalDeclRight_Cast : Cast
    {
        AMultiLocalDecl obj;

        internal LocalDeclRight_Cast (AMultiLocalDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLocalDeclRight node = (PLocalDeclRight) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLocalDeclRight node = (PLocalDeclRight) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class ADeclLocalDecl : PLocalDecl
{
    private PDecl _decl_;

    public ADeclLocalDecl ()
    {
    }

    public ADeclLocalDecl (
            PDecl _decl_
    )
    {
        SetDecl (_decl_);
    }

    public override Object Clone()
    {
        return new ADeclLocalDecl (
            (PDecl)CloneNode (_decl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclLocalDecl(this);
    }

    public PDecl GetDecl ()
    {
        return _decl_;
    }

    public void SetDecl (PDecl node)
    {
        if(_decl_ != null)
        {
            _decl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_decl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _decl_ == child )
        {
            _decl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _decl_ == oldChild )
        {
            SetDecl ((PDecl) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class APublicVisibilityModifier : PVisibilityModifier
{


    public APublicVisibilityModifier (
    )
    {
    }

    public override Object Clone()
    {
        return new APublicVisibilityModifier (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPublicVisibilityModifier(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class APrivateVisibilityModifier : PVisibilityModifier
{


    public APrivateVisibilityModifier (
    )
    {
    }

    public override Object Clone()
    {
        return new APrivateVisibilityModifier (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPrivateVisibilityModifier(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class AProtectedVisibilityModifier : PVisibilityModifier
{


    public AProtectedVisibilityModifier (
    )
    {
    }

    public override Object Clone()
    {
        return new AProtectedVisibilityModifier (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProtectedVisibilityModifier(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class AVoidType : PType
{
    private TVoid _token_;

    public AVoidType ()
    {
    }

    public AVoidType (
            TVoid _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AVoidType (
            (TVoid)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVoidType(this);
    }

    public TVoid GetToken ()
    {
        return _token_;
    }

    public void SetToken (TVoid node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TVoid) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AArrayTempType : PType
{
    private TLBracket _token_;
    private PType _type_;
    private PExp _dimention_;
    private TIntegerLiteral _int_dim_;

    public AArrayTempType ()
    {
    }

    public AArrayTempType (
            TLBracket _token_,
            PType _type_,
            PExp _dimention_,
            TIntegerLiteral _int_dim_
    )
    {
        SetToken (_token_);
        SetType (_type_);
        SetDimention (_dimention_);
        SetIntDim (_int_dim_);
    }

    public override Object Clone()
    {
        return new AArrayTempType (
            (TLBracket)CloneNode (_token_),
            (PType)CloneNode (_type_),
            (PExp)CloneNode (_dimention_),
            (TIntegerLiteral)CloneNode (_int_dim_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayTempType(this);
    }

    public TLBracket GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLBracket node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PExp GetDimention ()
    {
        return _dimention_;
    }

    public void SetDimention (PExp node)
    {
        if(_dimention_ != null)
        {
            _dimention_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dimention_ = node;
    }
    public TIntegerLiteral GetIntDim ()
    {
        return _int_dim_;
    }

    public void SetIntDim (TIntegerLiteral node)
    {
        if(_int_dim_ != null)
        {
            _int_dim_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_dim_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_type_)
            + ToString (_dimention_)
            + ToString (_int_dim_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _dimention_ == child )
        {
            _dimention_ = null;
            return;
        }
        if ( _int_dim_ == child )
        {
            _int_dim_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLBracket) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _dimention_ == oldChild )
        {
            SetDimention ((PExp) newChild);
            return;
        }
        if ( _int_dim_ == oldChild )
        {
            SetIntDim ((TIntegerLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ADynamicArrayType : PType
{
    private TLBracket _token_;
    private PType _type_;

    public ADynamicArrayType ()
    {
    }

    public ADynamicArrayType (
            TLBracket _token_,
            PType _type_
    )
    {
        SetToken (_token_);
        SetType (_type_);
    }

    public override Object Clone()
    {
        return new ADynamicArrayType (
            (TLBracket)CloneNode (_token_),
            (PType)CloneNode (_type_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADynamicArrayType(this);
    }

    public TLBracket GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLBracket node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_type_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLBracket) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ANamedType : PType
{
    private PName _name_;

    public ANamedType ()
    {
    }

    public ANamedType(TIdentifier name, TIdentifier ns)
    {
        AAName aName = new AAName();
        if (ns != null)
            aName.GetIdentifier().Add(ns);
        aName.GetIdentifier().Add(name);
        SetName(aName);
    }

    public ANamedType (
            PName _name_
    )
    {
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new ANamedType (
            (PName)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANamedType(this);
    }

    public PName GetName ()
    {
        return _name_;
    }

    public void SetName (PName node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((PName) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ANullType : PType
{


    public ANullType (
    )
    {
    }

    public override Object Clone()
    {
        return new ANullType (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANullType(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class APointerType : PType
{
    private TStar _token_;
    private PType _type_;

    public APointerType ()
    {
    }

    public APointerType (
            TStar _token_,
            PType _type_
    )
    {
        SetToken (_token_);
        SetType (_type_);
    }

    public override Object Clone()
    {
        return new APointerType (
            (TStar)CloneNode (_token_),
            (PType)CloneNode (_type_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPointerType(this);
    }

    public TStar GetToken ()
    {
        return _token_;
    }

    public void SetToken (TStar node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_type_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TStar) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AGenericType : PType
{
    private TLt _token_;
    private PType _base_;
    private TypedList _generic_types_;

    public AGenericType ()
    {
        this._generic_types_ = new TypedList(new GenericTypes_Cast(this));
    }

    public AGenericType (
            TLt _token_,
            PType _base_,
            IList _generic_types_
    )
    {
        SetToken (_token_);
        SetBase (_base_);
        this._generic_types_ = new TypedList(new GenericTypes_Cast(this));
        this._generic_types_.Clear();
        this._generic_types_.AddAll(_generic_types_);
    }

    public override Object Clone()
    {
        return new AGenericType (
            (TLt)CloneNode (_token_),
            (PType)CloneNode (_base_),
            CloneList (_generic_types_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGenericType(this);
    }

    public TLt GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLt node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PType GetBase ()
    {
        return _base_;
    }

    public void SetBase (PType node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }
    public IList GetGenericTypes ()
    {
        return _generic_types_;
    }

    public void setGenericTypes (IList list)
    {
        _generic_types_.Clear();
        _generic_types_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_base_)
            + ToString (_generic_types_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _base_ == child )
        {
            _base_ = null;
            return;
        }
        if ( _generic_types_.Contains(child) )
        {
            _generic_types_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLt) newChild);
            return;
        }
        if ( _base_ == oldChild )
        {
            SetBase ((PType) newChild);
            return;
        }
        for ( int i = 0; i < _generic_types_.Count; i++ )
        {
            Node n = (Node)_generic_types_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _generic_types_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _generic_types_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class GenericTypes_Cast : Cast
    {
        AGenericType obj;

        internal GenericTypes_Cast (AGenericType obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PType node = (PType) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PType node = (PType) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AABlock : PBlock
{
    private TypedList _statements_;
    private TRBrace _token_;

    public AABlock ()
    {
        this._statements_ = new TypedList(new Statements_Cast(this));
    }

    public AABlock (
            IList _statements_,
            TRBrace _token_
    )
    {
        this._statements_ = new TypedList(new Statements_Cast(this));
        this._statements_.Clear();
        this._statements_.AddAll(_statements_);
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AABlock (
            CloneList (_statements_),
            (TRBrace)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAABlock(this);
    }

    public IList GetStatements ()
    {
        return _statements_;
    }

    public void setStatements (IList list)
    {
        _statements_.Clear();
        _statements_.AddAll(list);
    }
    public TRBrace GetToken ()
    {
        return _token_;
    }

    public void SetToken (TRBrace node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statements_)
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statements_.Contains(child) )
        {
            _statements_.Remove(child);
            return;
        }
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _statements_.Count; i++ )
        {
            Node n = (Node)_statements_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _statements_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _statements_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _token_ == oldChild )
        {
            SetToken ((TRBrace) newChild);
            return;
        }
    }

[Serializable]
    private class Statements_Cast : Cast
    {
        AABlock obj;

        internal Statements_Cast (AABlock obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStm node = (PStm) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStm node = (PStm) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AExpStm : PStm
{
    private TSemicolon _token_;
    private PExp _exp_;

    public AExpStm ()
    {
    }

    public AExpStm (
            TSemicolon _token_,
            PExp _exp_
    )
    {
        SetToken (_token_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AExpStm (
            (TSemicolon)CloneNode (_token_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpStm(this);
    }

    public TSemicolon GetToken ()
    {
        return _token_;
    }

    public void SetToken (TSemicolon node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TSemicolon) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AIfThenStm : PStm
{
    private TLParen _token_;
    private PExp _condition_;
    private PStm _body_;

    public AIfThenStm ()
    {
    }

    public AIfThenStm (
            TLParen _token_,
            PExp _condition_,
            PStm _body_
    )
    {
        SetToken (_token_);
        SetCondition (_condition_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AIfThenStm (
            (TLParen)CloneNode (_token_),
            (PExp)CloneNode (_condition_),
            (PStm)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfThenStm(this);
    }

    public TLParen GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLParen node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PExp node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public PStm GetBody ()
    {
        return _body_;
    }

    public void SetBody (PStm node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_condition_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLParen) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PExp) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PStm) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AIfThenElseStm : PStm
{
    private TLParen _token_;
    private PExp _condition_;
    private PStm _then_body_;
    private PStm _else_body_;

    public AIfThenElseStm ()
    {
    }

    public AIfThenElseStm (
            TLParen _token_,
            PExp _condition_,
            PStm _then_body_,
            PStm _else_body_
    )
    {
        SetToken (_token_);
        SetCondition (_condition_);
        SetThenBody (_then_body_);
        SetElseBody (_else_body_);
    }

    public override Object Clone()
    {
        return new AIfThenElseStm (
            (TLParen)CloneNode (_token_),
            (PExp)CloneNode (_condition_),
            (PStm)CloneNode (_then_body_),
            (PStm)CloneNode (_else_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfThenElseStm(this);
    }

    public TLParen GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLParen node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PExp node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public PStm GetThenBody ()
    {
        return _then_body_;
    }

    public void SetThenBody (PStm node)
    {
        if(_then_body_ != null)
        {
            _then_body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _then_body_ = node;
    }
    public PStm GetElseBody ()
    {
        return _else_body_;
    }

    public void SetElseBody (PStm node)
    {
        if(_else_body_ != null)
        {
            _else_body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_condition_)
            + ToString (_then_body_)
            + ToString (_else_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _then_body_ == child )
        {
            _then_body_ = null;
            return;
        }
        if ( _else_body_ == child )
        {
            _else_body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLParen) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PExp) newChild);
            return;
        }
        if ( _then_body_ == oldChild )
        {
            SetThenBody ((PStm) newChild);
            return;
        }
        if ( _else_body_ == oldChild )
        {
            SetElseBody ((PStm) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AWhileStm : PStm
{
    private TLParen _token_;
    private PExp _condition_;
    private PStm _body_;

    public AWhileStm ()
    {
    }

    public AWhileStm (
            TLParen _token_,
            PExp _condition_,
            PStm _body_
    )
    {
        SetToken (_token_);
        SetCondition (_condition_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AWhileStm (
            (TLParen)CloneNode (_token_),
            (PExp)CloneNode (_condition_),
            (PStm)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStm(this);
    }

    public TLParen GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLParen node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PExp node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public PStm GetBody ()
    {
        return _body_;
    }

    public void SetBody (PStm node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_condition_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLParen) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PExp) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PStm) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AEmptyStm : PStm
{
    private TSemicolon _token_;

    public AEmptyStm ()
    {
    }

    public AEmptyStm (
            TSemicolon _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AEmptyStm (
            (TSemicolon)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEmptyStm(this);
    }

    public TSemicolon GetToken ()
    {
        return _token_;
    }

    public void SetToken (TSemicolon node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TSemicolon) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ABlockStm : PStm
{
    private TLBrace _token_;
    private PBlock _block_;

    public ABlockStm ()
    {
    }

    public ABlockStm (
            TLBrace _token_,
            PBlock _block_
    )
    {
        SetToken (_token_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new ABlockStm (
            (TLBrace)CloneNode (_token_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABlockStm(this);
    }

    public TLBrace GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLBrace node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLBrace) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AVoidReturnStm : PStm
{
    private TReturn _token_;

    public AVoidReturnStm ()
    {
    }

    public AVoidReturnStm (
            TReturn _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AVoidReturnStm (
            (TReturn)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVoidReturnStm(this);
    }

    public TReturn GetToken ()
    {
        return _token_;
    }

    public void SetToken (TReturn node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TReturn) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AValueReturnStm : PStm
{
    private TReturn _token_;
    private PExp _exp_;

    public AValueReturnStm ()
    {
    }

    public AValueReturnStm (
            TReturn _token_,
            PExp _exp_
    )
    {
        SetToken (_token_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AValueReturnStm (
            (TReturn)CloneNode (_token_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAValueReturnStm(this);
    }

    public TReturn GetToken ()
    {
        return _token_;
    }

    public void SetToken (TReturn node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TReturn) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ALocalDeclStm : PStm
{
    private TSemicolon _token_;
    private PLocalDecl _local_decl_;

    public ALocalDeclStm ()
    {
    }

    public ALocalDeclStm (
            TSemicolon _token_,
            PLocalDecl _local_decl_
    )
    {
        SetToken (_token_);
        SetLocalDecl (_local_decl_);
    }

    public override Object Clone()
    {
        return new ALocalDeclStm (
            (TSemicolon)CloneNode (_token_),
            (PLocalDecl)CloneNode (_local_decl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALocalDeclStm(this);
    }

    public TSemicolon GetToken ()
    {
        return _token_;
    }

    public void SetToken (TSemicolon node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PLocalDecl GetLocalDecl ()
    {
        return _local_decl_;
    }

    public void SetLocalDecl (PLocalDecl node)
    {
        if(_local_decl_ != null)
        {
            _local_decl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _local_decl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_local_decl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _local_decl_ == child )
        {
            _local_decl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TSemicolon) newChild);
            return;
        }
        if ( _local_decl_ == oldChild )
        {
            SetLocalDecl ((PLocalDecl) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ABreakStm : PStm
{
    private TBreak _token_;

    public ABreakStm ()
    {
    }

    public ABreakStm (
            TBreak _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ABreakStm (
            (TBreak)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABreakStm(this);
    }

    public TBreak GetToken ()
    {
        return _token_;
    }

    public void SetToken (TBreak node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TBreak) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AContinueStm : PStm
{
    private TContinue _token_;

    public AContinueStm ()
    {
    }

    public AContinueStm (
            TContinue _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AContinueStm (
            (TContinue)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAContinueStm(this);
    }

    public TContinue GetToken ()
    {
        return _token_;
    }

    public void SetToken (TContinue node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TContinue) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AForStm : PStm
{
    private TLParen _token_;
    private PStm _init_;
    private PExp _cond_;
    private PStm _update_;
    private PStm _body_;

    public AForStm ()
    {
    }

    public AForStm (
            TLParen _token_,
            PStm _init_,
            PExp _cond_,
            PStm _update_,
            PStm _body_
    )
    {
        SetToken (_token_);
        SetInit (_init_);
        SetCond (_cond_);
        SetUpdate (_update_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AForStm (
            (TLParen)CloneNode (_token_),
            (PStm)CloneNode (_init_),
            (PExp)CloneNode (_cond_),
            (PStm)CloneNode (_update_),
            (PStm)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAForStm(this);
    }

    public TLParen GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLParen node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PStm GetInit ()
    {
        return _init_;
    }

    public void SetInit (PStm node)
    {
        if(_init_ != null)
        {
            _init_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _init_ = node;
    }
    public PExp GetCond ()
    {
        return _cond_;
    }

    public void SetCond (PExp node)
    {
        if(_cond_ != null)
        {
            _cond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cond_ = node;
    }
    public PStm GetUpdate ()
    {
        return _update_;
    }

    public void SetUpdate (PStm node)
    {
        if(_update_ != null)
        {
            _update_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _update_ = node;
    }
    public PStm GetBody ()
    {
        return _body_;
    }

    public void SetBody (PStm node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_init_)
            + ToString (_cond_)
            + ToString (_update_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _init_ == child )
        {
            _init_ = null;
            return;
        }
        if ( _cond_ == child )
        {
            _cond_ = null;
            return;
        }
        if ( _update_ == child )
        {
            _update_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLParen) newChild);
            return;
        }
        if ( _init_ == oldChild )
        {
            SetInit ((PStm) newChild);
            return;
        }
        if ( _cond_ == oldChild )
        {
            SetCond ((PExp) newChild);
            return;
        }
        if ( _update_ == oldChild )
        {
            SetUpdate ((PStm) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PStm) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AAsyncInvokeStm : PStm
{
    private TAsyncInvoke _token_;
    private PLvalue _name_;
    private TypedList _args_;

    public AAsyncInvokeStm ()
    {
        this._args_ = new TypedList(new Args_Cast(this));
    }

    public AAsyncInvokeStm (
            TAsyncInvoke _token_,
            PLvalue _name_,
            IList _args_
    )
    {
        SetToken (_token_);
        SetName (_name_);
        this._args_ = new TypedList(new Args_Cast(this));
        this._args_.Clear();
        this._args_.AddAll(_args_);
    }

    public override Object Clone()
    {
        return new AAsyncInvokeStm (
            (TAsyncInvoke)CloneNode (_token_),
            (PLvalue)CloneNode (_name_),
            CloneList (_args_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAsyncInvokeStm(this);
    }

    public TAsyncInvoke GetToken ()
    {
        return _token_;
    }

    public void SetToken (TAsyncInvoke node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PLvalue GetName ()
    {
        return _name_;
    }

    public void SetName (PLvalue node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetArgs ()
    {
        return _args_;
    }

    public void setArgs (IList list)
    {
        _args_.Clear();
        _args_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_name_)
            + ToString (_args_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _args_.Contains(child) )
        {
            _args_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TAsyncInvoke) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((PLvalue) newChild);
            return;
        }
        for ( int i = 0; i < _args_.Count; i++ )
        {
            Node n = (Node)_args_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _args_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _args_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class Args_Cast : Cast
    {
        AAsyncInvokeStm obj;

        internal Args_Cast (AAsyncInvokeStm obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExp node = (PExp) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExp node = (PExp) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class ASwitchStm : PStm
{
    private TSwitch _token_;
    private PExp _test_;
    private TypedList _cases_;

    public ASwitchStm ()
    {
        this._cases_ = new TypedList(new Cases_Cast(this));
    }

    public ASwitchStm (
            TSwitch _token_,
            PExp _test_,
            IList _cases_
    )
    {
        SetToken (_token_);
        SetTest (_test_);
        this._cases_ = new TypedList(new Cases_Cast(this));
        this._cases_.Clear();
        this._cases_.AddAll(_cases_);
    }

    public override Object Clone()
    {
        return new ASwitchStm (
            (TSwitch)CloneNode (_token_),
            (PExp)CloneNode (_test_),
            CloneList (_cases_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASwitchStm(this);
    }

    public TSwitch GetToken ()
    {
        return _token_;
    }

    public void SetToken (TSwitch node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetTest ()
    {
        return _test_;
    }

    public void SetTest (PExp node)
    {
        if(_test_ != null)
        {
            _test_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _test_ = node;
    }
    public IList GetCases ()
    {
        return _cases_;
    }

    public void setCases (IList list)
    {
        _cases_.Clear();
        _cases_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_test_)
            + ToString (_cases_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _test_ == child )
        {
            _test_ = null;
            return;
        }
        if ( _cases_.Contains(child) )
        {
            _cases_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TSwitch) newChild);
            return;
        }
        if ( _test_ == oldChild )
        {
            SetTest ((PExp) newChild);
            return;
        }
        for ( int i = 0; i < _cases_.Count; i++ )
        {
            Node n = (Node)_cases_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _cases_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _cases_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class Cases_Cast : Cast
    {
        ASwitchStm obj;

        internal Cases_Cast (ASwitchStm obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStm node = (PStm) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStm node = (PStm) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class ASwitchCaseStm : PStm
{
    private PSwitchCaseType _type_;
    private PBlock _block_;

    public ASwitchCaseStm ()
    {
    }

    public ASwitchCaseStm (
            PSwitchCaseType _type_,
            PBlock _block_
    )
    {
        SetType (_type_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new ASwitchCaseStm (
            (PSwitchCaseType)CloneNode (_type_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASwitchCaseStm(this);
    }

    public PSwitchCaseType GetType ()
    {
        return _type_;
    }

    public void SetType (PSwitchCaseType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PSwitchCaseType) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ADeleteStm : PStm
{
    private TDelete _token_;
    private PExp _exp_;

    public ADeleteStm ()
    {
    }

    public ADeleteStm (
            TDelete _token_,
            PExp _exp_
    )
    {
        SetToken (_token_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ADeleteStm (
            (TDelete)CloneNode (_token_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeleteStm(this);
    }

    public TDelete GetToken ()
    {
        return _token_;
    }

    public void SetToken (TDelete node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TDelete) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ACaseSwitchCaseType : PSwitchCaseType
{
    private TCase _token_;
    private PExp _exp_;

    public ACaseSwitchCaseType ()
    {
    }

    public ACaseSwitchCaseType (
            TCase _token_,
            PExp _exp_
    )
    {
        SetToken (_token_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ACaseSwitchCaseType (
            (TCase)CloneNode (_token_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACaseSwitchCaseType(this);
    }

    public TCase GetToken ()
    {
        return _token_;
    }

    public void SetToken (TCase node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TCase) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ADefaultSwitchCaseType : PSwitchCaseType
{
    private TDefault _token_;

    public ADefaultSwitchCaseType ()
    {
    }

    public ADefaultSwitchCaseType (
            TDefault _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ADefaultSwitchCaseType (
            (TDefault)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADefaultSwitchCaseType(this);
    }

    public TDefault GetToken ()
    {
        return _token_;
    }

    public void SetToken (TDefault node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TDefault) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ABinopExp : PExp
{
    private PExp _left_;
    private PBinop _binop_;
    private PExp _right_;

    public ABinopExp ()
    {
    }

    public ABinopExp (
            PExp _left_,
            PBinop _binop_,
            PExp _right_
    )
    {
        SetLeft (_left_);
        SetBinop (_binop_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new ABinopExp (
            (PExp)CloneNode (_left_),
            (PBinop)CloneNode (_binop_),
            (PExp)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABinopExp(this);
    }

    public PExp GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public PBinop GetBinop ()
    {
        return _binop_;
    }

    public void SetBinop (PBinop node)
    {
        if(_binop_ != null)
        {
            _binop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _binop_ = node;
    }
    public PExp GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_binop_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _binop_ == child )
        {
            _binop_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp) newChild);
            return;
        }
        if ( _binop_ == oldChild )
        {
            SetBinop ((PBinop) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AUnopExp : PExp
{
    private PUnop _unop_;
    private PExp _exp_;

    public AUnopExp ()
    {
    }

    public AUnopExp (
            PUnop _unop_,
            PExp _exp_
    )
    {
        SetUnop (_unop_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AUnopExp (
            (PUnop)CloneNode (_unop_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUnopExp(this);
    }

    public PUnop GetUnop ()
    {
        return _unop_;
    }

    public void SetUnop (PUnop node)
    {
        if(_unop_ != null)
        {
            _unop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _unop_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_unop_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _unop_ == child )
        {
            _unop_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _unop_ == oldChild )
        {
            SetUnop ((PUnop) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AIncDecExp : PExp
{
    private PLvalue _lvalue_;
    private PIncDecOp _inc_dec_op_;

    public AIncDecExp ()
    {
    }

    public AIncDecExp (
            PLvalue _lvalue_,
            PIncDecOp _inc_dec_op_
    )
    {
        SetLvalue (_lvalue_);
        SetIncDecOp (_inc_dec_op_);
    }

    public override Object Clone()
    {
        return new AIncDecExp (
            (PLvalue)CloneNode (_lvalue_),
            (PIncDecOp)CloneNode (_inc_dec_op_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIncDecExp(this);
    }

    public PLvalue GetLvalue ()
    {
        return _lvalue_;
    }

    public void SetLvalue (PLvalue node)
    {
        if(_lvalue_ != null)
        {
            _lvalue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lvalue_ = node;
    }
    public PIncDecOp GetIncDecOp ()
    {
        return _inc_dec_op_;
    }

    public void SetIncDecOp (PIncDecOp node)
    {
        if(_inc_dec_op_ != null)
        {
            _inc_dec_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _inc_dec_op_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lvalue_)
            + ToString (_inc_dec_op_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lvalue_ == child )
        {
            _lvalue_ = null;
            return;
        }
        if ( _inc_dec_op_ == child )
        {
            _inc_dec_op_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lvalue_ == oldChild )
        {
            SetLvalue ((PLvalue) newChild);
            return;
        }
        if ( _inc_dec_op_ == oldChild )
        {
            SetIncDecOp ((PIncDecOp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AIntConstExp : PExp
{
    private TIntegerLiteral _integer_literal_;

    public AIntConstExp ()
    {
    }

    public AIntConstExp (
            TIntegerLiteral _integer_literal_
    )
    {
        SetIntegerLiteral (_integer_literal_);
    }

    public override Object Clone()
    {
        return new AIntConstExp (
            (TIntegerLiteral)CloneNode (_integer_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntConstExp(this);
    }

    public TIntegerLiteral GetIntegerLiteral ()
    {
        return _integer_literal_;
    }

    public void SetIntegerLiteral (TIntegerLiteral node)
    {
        if(_integer_literal_ != null)
        {
            _integer_literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_literal_ == child )
        {
            _integer_literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_literal_ == oldChild )
        {
            SetIntegerLiteral ((TIntegerLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AHexConstExp : PExp
{
    private THexLiteral _hex_literal_;

    public AHexConstExp ()
    {
    }

    public AHexConstExp (
            THexLiteral _hex_literal_
    )
    {
        SetHexLiteral (_hex_literal_);
    }

    public override Object Clone()
    {
        return new AHexConstExp (
            (THexLiteral)CloneNode (_hex_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHexConstExp(this);
    }

    public THexLiteral GetHexLiteral ()
    {
        return _hex_literal_;
    }

    public void SetHexLiteral (THexLiteral node)
    {
        if(_hex_literal_ != null)
        {
            _hex_literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _hex_literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_hex_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _hex_literal_ == child )
        {
            _hex_literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _hex_literal_ == oldChild )
        {
            SetHexLiteral ((THexLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AOctalConstExp : PExp
{
    private TOctalLiteral _octal_literal_;

    public AOctalConstExp ()
    {
    }

    public AOctalConstExp (
            TOctalLiteral _octal_literal_
    )
    {
        SetOctalLiteral (_octal_literal_);
    }

    public override Object Clone()
    {
        return new AOctalConstExp (
            (TOctalLiteral)CloneNode (_octal_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOctalConstExp(this);
    }

    public TOctalLiteral GetOctalLiteral ()
    {
        return _octal_literal_;
    }

    public void SetOctalLiteral (TOctalLiteral node)
    {
        if(_octal_literal_ != null)
        {
            _octal_literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _octal_literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_octal_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _octal_literal_ == child )
        {
            _octal_literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _octal_literal_ == oldChild )
        {
            SetOctalLiteral ((TOctalLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AFixedConstExp : PExp
{
    private TFixedLiteral _fixed_literal_;

    public AFixedConstExp ()
    {
    }

    public AFixedConstExp (
            TFixedLiteral _fixed_literal_
    )
    {
        SetFixedLiteral (_fixed_literal_);
    }

    public override Object Clone()
    {
        return new AFixedConstExp (
            (TFixedLiteral)CloneNode (_fixed_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFixedConstExp(this);
    }

    public TFixedLiteral GetFixedLiteral ()
    {
        return _fixed_literal_;
    }

    public void SetFixedLiteral (TFixedLiteral node)
    {
        if(_fixed_literal_ != null)
        {
            _fixed_literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fixed_literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_fixed_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _fixed_literal_ == child )
        {
            _fixed_literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _fixed_literal_ == oldChild )
        {
            SetFixedLiteral ((TFixedLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AStringConstExp : PExp
{
    private TStringLiteral _string_literal_;

    public AStringConstExp ()
    {
    }

    public AStringConstExp (
            TStringLiteral _string_literal_
    )
    {
        SetStringLiteral (_string_literal_);
    }

    public override Object Clone()
    {
        AStringConstExp constExp = new AStringConstExp (
            (TStringLiteral)CloneNode (_string_literal_)
        );
		
        if (SharedData.LastCreated != null)
        {
			for (int i = 0; i < SharedData.LastCreated.ObfuscatedStrings.Count; i++)
			{
				var enumerator = SharedData.LastCreated.ObfuscatedStrings.Keys.GetEnumerator();
				for (int j = 0; j <= i; j++)
				{
					enumerator.MoveNext();
				}
				AStringConstExp key = enumerator.Current;
				if (key == this)
				{
					SharedData.LastCreated.ObfuscatedStrings[constExp] = SharedData.LastCreated.ObfuscatedStrings[key];
					//SharedData.LastCreated.ObfuscatedStrings.Remove(key);
					return constExp;
				}
			}

			for (int i = 0; i < SharedData.LastCreated.UnobfuscatedStrings.Count; i++)
			{
				var enumerator = SharedData.LastCreated.UnobfuscatedStrings.Keys.GetEnumerator();
				for (int j = 0; j <= i; j++)
				{
					enumerator.MoveNext();
				}
				AStringConstExp key = enumerator.Current;
				if (key == this)
				{
					SharedData.LastCreated.UnobfuscatedStrings[constExp] = SharedData.LastCreated.UnobfuscatedStrings[key];
					//SharedData.LastCreated.UnobfuscatedStrings.Remove(key);
					return constExp;
				}
			}
		}
        return constExp;
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringConstExp(this);
    }

    public TStringLiteral GetStringLiteral ()
    {
        return _string_literal_;
    }

    public void SetStringLiteral (TStringLiteral node)
    {
        if(_string_literal_ != null)
        {
            _string_literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_literal_ == child )
        {
            _string_literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_literal_ == oldChild )
        {
            SetStringLiteral ((TStringLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ACharConstExp : PExp
{
    private TCharLiteral _char_literal_;

    public ACharConstExp ()
    {
    }

    public ACharConstExp (
            TCharLiteral _char_literal_
    )
    {
        SetCharLiteral (_char_literal_);
    }

    public override Object Clone()
    {
        return new ACharConstExp (
            (TCharLiteral)CloneNode (_char_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACharConstExp(this);
    }

    public TCharLiteral GetCharLiteral ()
    {
        return _char_literal_;
    }

    public void SetCharLiteral (TCharLiteral node)
    {
        if(_char_literal_ != null)
        {
            _char_literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _char_literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_char_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _char_literal_ == child )
        {
            _char_literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _char_literal_ == oldChild )
        {
            SetCharLiteral ((TCharLiteral) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ABooleanConstExp : PExp
{
    private PBool _bool_;

    public ABooleanConstExp ()
    {
    }

    public ABooleanConstExp (
            PBool _bool_
    )
    {
        SetBool (_bool_);
    }

    public override Object Clone()
    {
        return new ABooleanConstExp (
            (PBool)CloneNode (_bool_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanConstExp(this);
    }

    public PBool GetBool ()
    {
        return _bool_;
    }

    public void SetBool (PBool node)
    {
        if(_bool_ != null)
        {
            _bool_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_ == child )
        {
            _bool_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_ == oldChild )
        {
            SetBool ((PBool) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ANullExp : PExp
{


    public ANullExp (
    )
    {
    }

    public override Object Clone()
    {
        return new ANullExp (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANullExp(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class ASimpleInvokeExp : PExp
{
    private TIdentifier _name_;
    private TypedList _args_;

    public ASimpleInvokeExp ()
    {
        this._args_ = new TypedList(new Args_Cast(this));
    }

    public ASimpleInvokeExp (
            TIdentifier _name_,
            IList _args_
    )
    {
        SetName (_name_);
        this._args_ = new TypedList(new Args_Cast(this));
        this._args_.Clear();
        this._args_.AddAll(_args_);
    }

    public override Object Clone()
    {
        return new ASimpleInvokeExp (
            (TIdentifier)CloneNode (_name_),
            CloneList (_args_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASimpleInvokeExp(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetArgs ()
    {
        return _args_;
    }

    public void setArgs (IList list)
    {
        _args_.Clear();
        _args_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_args_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _args_.Contains(child) )
        {
            _args_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        for ( int i = 0; i < _args_.Count; i++ )
        {
            Node n = (Node)_args_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _args_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _args_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class Args_Cast : Cast
    {
        ASimpleInvokeExp obj;

        internal Args_Cast (ASimpleInvokeExp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExp node = (PExp) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExp node = (PExp) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class ANonstaticInvokeExp : PExp
{
    private PExp _receiver_;
    private PDotType _dot_type_;
    private TIdentifier _name_;
    private TypedList _args_;

    public ANonstaticInvokeExp ()
    {
        this._args_ = new TypedList(new Args_Cast(this));
    }

    public ANonstaticInvokeExp (
            PExp _receiver_,
            PDotType _dot_type_,
            TIdentifier _name_,
            IList _args_
    )
    {
        SetReceiver (_receiver_);
        SetDotType (_dot_type_);
        SetName (_name_);
        this._args_ = new TypedList(new Args_Cast(this));
        this._args_.Clear();
        this._args_.AddAll(_args_);
    }

    public override Object Clone()
    {
        return new ANonstaticInvokeExp (
            (PExp)CloneNode (_receiver_),
            (PDotType)CloneNode (_dot_type_),
            (TIdentifier)CloneNode (_name_),
            CloneList (_args_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANonstaticInvokeExp(this);
    }

    public PExp GetReceiver ()
    {
        return _receiver_;
    }

    public void SetReceiver (PExp node)
    {
        if(_receiver_ != null)
        {
            _receiver_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _receiver_ = node;
    }
    public PDotType GetDotType ()
    {
        return _dot_type_;
    }

    public void SetDotType (PDotType node)
    {
        if(_dot_type_ != null)
        {
            _dot_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dot_type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetArgs ()
    {
        return _args_;
    }

    public void setArgs (IList list)
    {
        _args_.Clear();
        _args_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_receiver_)
            + ToString (_dot_type_)
            + ToString (_name_)
            + ToString (_args_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _receiver_ == child )
        {
            _receiver_ = null;
            return;
        }
        if ( _dot_type_ == child )
        {
            _dot_type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _args_.Contains(child) )
        {
            _args_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _receiver_ == oldChild )
        {
            SetReceiver ((PExp) newChild);
            return;
        }
        if ( _dot_type_ == oldChild )
        {
            SetDotType ((PDotType) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        for ( int i = 0; i < _args_.Count; i++ )
        {
            Node n = (Node)_args_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _args_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _args_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class Args_Cast : Cast
    {
        ANonstaticInvokeExp obj;

        internal Args_Cast (ANonstaticInvokeExp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExp node = (PExp) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExp node = (PExp) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class ASyncInvokeExp : PExp
{
    private TSyncInvoke _token_;
    private PLvalue _name_;
    private TypedList _args_;

    public ASyncInvokeExp ()
    {
        this._args_ = new TypedList(new Args_Cast(this));
    }

    public ASyncInvokeExp (
            TSyncInvoke _token_,
            PLvalue _name_,
            IList _args_
    )
    {
        SetToken (_token_);
        SetName (_name_);
        this._args_ = new TypedList(new Args_Cast(this));
        this._args_.Clear();
        this._args_.AddAll(_args_);
    }

    public override Object Clone()
    {
        return new ASyncInvokeExp (
            (TSyncInvoke)CloneNode (_token_),
            (PLvalue)CloneNode (_name_),
            CloneList (_args_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASyncInvokeExp(this);
    }

    public TSyncInvoke GetToken ()
    {
        return _token_;
    }

    public void SetToken (TSyncInvoke node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PLvalue GetName ()
    {
        return _name_;
    }

    public void SetName (PLvalue node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetArgs ()
    {
        return _args_;
    }

    public void setArgs (IList list)
    {
        _args_.Clear();
        _args_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_name_)
            + ToString (_args_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _args_.Contains(child) )
        {
            _args_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TSyncInvoke) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((PLvalue) newChild);
            return;
        }
        for ( int i = 0; i < _args_.Count; i++ )
        {
            Node n = (Node)_args_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _args_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _args_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class Args_Cast : Cast
    {
        ASyncInvokeExp obj;

        internal Args_Cast (ASyncInvokeExp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExp node = (PExp) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExp node = (PExp) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class ALvalueExp : PExp
{
    private PLvalue _lvalue_;

    public ALvalueExp ()
    {
    }

    public ALvalueExp (
            PLvalue _lvalue_
    )
    {
        SetLvalue (_lvalue_);
    }

    public override Object Clone()
    {
        return new ALvalueExp (
            (PLvalue)CloneNode (_lvalue_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALvalueExp(this);
    }

    public PLvalue GetLvalue ()
    {
        return _lvalue_;
    }

    public void SetLvalue (PLvalue node)
    {
        if(_lvalue_ != null)
        {
            _lvalue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lvalue_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lvalue_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lvalue_ == child )
        {
            _lvalue_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lvalue_ == oldChild )
        {
            SetLvalue ((PLvalue) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AAssignmentExp : PExp
{
    private TAssign _token_;
    private PLvalue _lvalue_;
    private PExp _exp_;

    public AAssignmentExp ()
    {
    }

    public AAssignmentExp (
            TAssign _token_,
            PLvalue _lvalue_,
            PExp _exp_
    )
    {
        SetToken (_token_);
        SetLvalue (_lvalue_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAssignmentExp (
            (TAssign)CloneNode (_token_),
            (PLvalue)CloneNode (_lvalue_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentExp(this);
    }

    public TAssign GetToken ()
    {
        return _token_;
    }

    public void SetToken (TAssign node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PLvalue GetLvalue ()
    {
        return _lvalue_;
    }

    public void SetLvalue (PLvalue node)
    {
        if(_lvalue_ != null)
        {
            _lvalue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lvalue_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_lvalue_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _lvalue_ == child )
        {
            _lvalue_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TAssign) newChild);
            return;
        }
        if ( _lvalue_ == oldChild )
        {
            SetLvalue ((PLvalue) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ASAssignmentExp : PExp
{
    private PAssignop _assignop_;
    private PLvalue _lvalue_;
    private PExp _exp_;

    public ASAssignmentExp ()
    {
    }

    public ASAssignmentExp (
            PAssignop _assignop_,
            PLvalue _lvalue_,
            PExp _exp_
    )
    {
        SetAssignop (_assignop_);
        SetLvalue (_lvalue_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ASAssignmentExp (
            (PAssignop)CloneNode (_assignop_),
            (PLvalue)CloneNode (_lvalue_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASAssignmentExp(this);
    }

    public PAssignop GetAssignop ()
    {
        return _assignop_;
    }

    public void SetAssignop (PAssignop node)
    {
        if(_assignop_ != null)
        {
            _assignop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignop_ = node;
    }
    public PLvalue GetLvalue ()
    {
        return _lvalue_;
    }

    public void SetLvalue (PLvalue node)
    {
        if(_lvalue_ != null)
        {
            _lvalue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lvalue_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignop_)
            + ToString (_lvalue_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignop_ == child )
        {
            _assignop_ = null;
            return;
        }
        if ( _lvalue_ == child )
        {
            _lvalue_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignop_ == oldChild )
        {
            SetAssignop ((PAssignop) newChild);
            return;
        }
        if ( _lvalue_ == oldChild )
        {
            SetLvalue ((PLvalue) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AShadySAssignmentExp : PExp
{
    private TConst _const_;
    private TypedList _pre_pointers_;
    private PLvalue _lvalue_;
    private TLt _generic_token_;
    private TypedList _generic_types_;
    private TypedList _post_pointers_;
    private TypedList _local_decl_right_;

    public AShadySAssignmentExp ()
    {
        this._pre_pointers_ = new TypedList(new PrePointers_Cast(this));
        this._generic_types_ = new TypedList(new GenericTypes_Cast(this));
        this._post_pointers_ = new TypedList(new PostPointers_Cast(this));
        this._local_decl_right_ = new TypedList(new LocalDeclRight_Cast(this));
    }

    public AShadySAssignmentExp (
            TConst _const_,
            IList _pre_pointers_,
            PLvalue _lvalue_,
            TLt _generic_token_,
            IList _generic_types_,
            IList _post_pointers_,
            IList _local_decl_right_
    )
    {
        SetConst (_const_);
        this._pre_pointers_ = new TypedList(new PrePointers_Cast(this));
        this._pre_pointers_.Clear();
        this._pre_pointers_.AddAll(_pre_pointers_);
        SetLvalue (_lvalue_);
        SetGenericToken (_generic_token_);
        this._generic_types_ = new TypedList(new GenericTypes_Cast(this));
        this._generic_types_.Clear();
        this._generic_types_.AddAll(_generic_types_);
        this._post_pointers_ = new TypedList(new PostPointers_Cast(this));
        this._post_pointers_.Clear();
        this._post_pointers_.AddAll(_post_pointers_);
        this._local_decl_right_ = new TypedList(new LocalDeclRight_Cast(this));
        this._local_decl_right_.Clear();
        this._local_decl_right_.AddAll(_local_decl_right_);
    }

    public override Object Clone()
    {
        return new AShadySAssignmentExp (
            (TConst)CloneNode (_const_),
            CloneList (_pre_pointers_),
            (PLvalue)CloneNode (_lvalue_),
            (TLt)CloneNode (_generic_token_),
            CloneList (_generic_types_),
            CloneList (_post_pointers_),
            CloneList (_local_decl_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAShadySAssignmentExp(this);
    }

    public TConst GetConst ()
    {
        return _const_;
    }

    public void SetConst (TConst node)
    {
        if(_const_ != null)
        {
            _const_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_ = node;
    }
    public IList GetPrePointers ()
    {
        return _pre_pointers_;
    }

    public void setPrePointers (IList list)
    {
        _pre_pointers_.Clear();
        _pre_pointers_.AddAll(list);
    }
    public PLvalue GetLvalue ()
    {
        return _lvalue_;
    }

    public void SetLvalue (PLvalue node)
    {
        if(_lvalue_ != null)
        {
            _lvalue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lvalue_ = node;
    }
    public TLt GetGenericToken ()
    {
        return _generic_token_;
    }

    public void SetGenericToken (TLt node)
    {
        if(_generic_token_ != null)
        {
            _generic_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _generic_token_ = node;
    }
    public IList GetGenericTypes ()
    {
        return _generic_types_;
    }

    public void setGenericTypes (IList list)
    {
        _generic_types_.Clear();
        _generic_types_.AddAll(list);
    }
    public IList GetPostPointers ()
    {
        return _post_pointers_;
    }

    public void setPostPointers (IList list)
    {
        _post_pointers_.Clear();
        _post_pointers_.AddAll(list);
    }
    public IList GetLocalDeclRight ()
    {
        return _local_decl_right_;
    }

    public void setLocalDeclRight (IList list)
    {
        _local_decl_right_.Clear();
        _local_decl_right_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_const_)
            + ToString (_pre_pointers_)
            + ToString (_lvalue_)
            + ToString (_generic_token_)
            + ToString (_generic_types_)
            + ToString (_post_pointers_)
            + ToString (_local_decl_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _const_ == child )
        {
            _const_ = null;
            return;
        }
        if ( _pre_pointers_.Contains(child) )
        {
            _pre_pointers_.Remove(child);
            return;
        }
        if ( _lvalue_ == child )
        {
            _lvalue_ = null;
            return;
        }
        if ( _generic_token_ == child )
        {
            _generic_token_ = null;
            return;
        }
        if ( _generic_types_.Contains(child) )
        {
            _generic_types_.Remove(child);
            return;
        }
        if ( _post_pointers_.Contains(child) )
        {
            _post_pointers_.Remove(child);
            return;
        }
        if ( _local_decl_right_.Contains(child) )
        {
            _local_decl_right_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _const_ == oldChild )
        {
            SetConst ((TConst) newChild);
            return;
        }
        for ( int i = 0; i < _pre_pointers_.Count; i++ )
        {
            Node n = (Node)_pre_pointers_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _pre_pointers_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _pre_pointers_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _lvalue_ == oldChild )
        {
            SetLvalue ((PLvalue) newChild);
            return;
        }
        if ( _generic_token_ == oldChild )
        {
            SetGenericToken ((TLt) newChild);
            return;
        }
        for ( int i = 0; i < _generic_types_.Count; i++ )
        {
            Node n = (Node)_generic_types_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _generic_types_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _generic_types_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _post_pointers_.Count; i++ )
        {
            Node n = (Node)_post_pointers_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _post_pointers_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _post_pointers_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _local_decl_right_.Count; i++ )
        {
            Node n = (Node)_local_decl_right_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _local_decl_right_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _local_decl_right_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class PrePointers_Cast : Cast
    {
        AShadySAssignmentExp obj;

        internal PrePointers_Cast (AShadySAssignmentExp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TStar node = (TStar) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TStar node = (TStar) o;
            node.Parent(null);
            return node;
        }
    }
[Serializable]
    private class GenericTypes_Cast : Cast
    {
        AShadySAssignmentExp obj;

        internal GenericTypes_Cast (AShadySAssignmentExp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PType node = (PType) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PType node = (PType) o;
            node.Parent(null);
            return node;
        }
    }
[Serializable]
    private class PostPointers_Cast : Cast
    {
        AShadySAssignmentExp obj;

        internal PostPointers_Cast (AShadySAssignmentExp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PShadyDynamicOps node = (PShadyDynamicOps) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PShadyDynamicOps node = (PShadyDynamicOps) o;
            node.Parent(null);
            return node;
        }
    }
[Serializable]
    private class LocalDeclRight_Cast : Cast
    {
        AShadySAssignmentExp obj;

        internal LocalDeclRight_Cast (AShadySAssignmentExp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLocalDeclRight node = (PLocalDeclRight) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLocalDeclRight node = (PLocalDeclRight) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AParenExp : PExp
{
    private PExp _exp_;

    public AParenExp ()
    {
    }

    public AParenExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AParenExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ACastExp : PExp
{
    private TLParen _token_;
    private PType _type_;
    private PExp _exp_;

    public ACastExp ()
    {
    }

    public ACastExp (
            TLParen _token_,
            PType _type_,
            PExp _exp_
    )
    {
        SetToken (_token_);
        SetType (_type_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ACastExp (
            (TLParen)CloneNode (_token_),
            (PType)CloneNode (_type_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACastExp(this);
    }

    public TLParen GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLParen node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_type_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLParen) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ATempCastExp : PExp
{
    private TLParen _token_;
    private PExp _type_;
    private PExp _exp_;

    public ATempCastExp ()
    {
    }

    public ATempCastExp (
            TLParen _token_,
            PExp _type_,
            PExp _exp_
    )
    {
        SetToken (_token_);
        SetType (_type_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ATempCastExp (
            (TLParen)CloneNode (_token_),
            (PExp)CloneNode (_type_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATempCastExp(this);
    }

    public TLParen GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLParen node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetType ()
    {
        return _type_;
    }

    public void SetType (PExp node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_type_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLParen) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PExp) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ASharpCastExp : PExp
{
    private TSharp _token_;
    private PType _type_;
    private PExp _exp_;

    public ASharpCastExp ()
    {
    }

    public ASharpCastExp (
            TSharp _token_,
            PType _type_,
            PExp _exp_
    )
    {
        SetToken (_token_);
        SetType (_type_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ASharpCastExp (
            (TSharp)CloneNode (_token_),
            (PType)CloneNode (_type_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASharpCastExp(this);
    }

    public TSharp GetToken ()
    {
        return _token_;
    }

    public void SetToken (TSharp node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_type_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TSharp) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ANewExp : PExp
{
    private TNew _token_;
    private PType _type_;
    private TypedList _args_;

    public ANewExp ()
    {
        this._args_ = new TypedList(new Args_Cast(this));
    }

    public ANewExp (
            TNew _token_,
            PType _type_,
            IList _args_
    )
    {
        SetToken (_token_);
        SetType (_type_);
        this._args_ = new TypedList(new Args_Cast(this));
        this._args_.Clear();
        this._args_.AddAll(_args_);
    }

    public override Object Clone()
    {
        return new ANewExp (
            (TNew)CloneNode (_token_),
            (PType)CloneNode (_type_),
            CloneList (_args_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANewExp(this);
    }

    public TNew GetToken ()
    {
        return _token_;
    }

    public void SetToken (TNew node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public IList GetArgs ()
    {
        return _args_;
    }

    public void setArgs (IList list)
    {
        _args_.Clear();
        _args_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_type_)
            + ToString (_args_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _args_.Contains(child) )
        {
            _args_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TNew) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        for ( int i = 0; i < _args_.Count; i++ )
        {
            Node n = (Node)_args_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _args_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _args_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class Args_Cast : Cast
    {
        ANewExp obj;

        internal Args_Cast (ANewExp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExp node = (PExp) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExp node = (PExp) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class ADelegateExp : PExp
{
    private TDelegate _token_;
    private PType _type_;
    private PLvalue _lvalue_;

    public ADelegateExp ()
    {
    }

    public ADelegateExp (
            TDelegate _token_,
            PType _type_,
            PLvalue _lvalue_
    )
    {
        SetToken (_token_);
        SetType (_type_);
        SetLvalue (_lvalue_);
    }

    public override Object Clone()
    {
        return new ADelegateExp (
            (TDelegate)CloneNode (_token_),
            (PType)CloneNode (_type_),
            (PLvalue)CloneNode (_lvalue_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADelegateExp(this);
    }

    public TDelegate GetToken ()
    {
        return _token_;
    }

    public void SetToken (TDelegate node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PLvalue GetLvalue ()
    {
        return _lvalue_;
    }

    public void SetLvalue (PLvalue node)
    {
        if(_lvalue_ != null)
        {
            _lvalue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lvalue_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_type_)
            + ToString (_lvalue_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _lvalue_ == child )
        {
            _lvalue_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TDelegate) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _lvalue_ == oldChild )
        {
            SetLvalue ((PLvalue) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ADelegateInvokeExp : PExp
{
    private TIdentifier _token_;
    private PExp _receiver_;
    private TypedList _args_;

    public ADelegateInvokeExp ()
    {
        this._args_ = new TypedList(new Args_Cast(this));
    }

    public ADelegateInvokeExp (
            TIdentifier _token_,
            PExp _receiver_,
            IList _args_
    )
    {
        SetToken (_token_);
        SetReceiver (_receiver_);
        this._args_ = new TypedList(new Args_Cast(this));
        this._args_.Clear();
        this._args_.AddAll(_args_);
    }

    public override Object Clone()
    {
        return new ADelegateInvokeExp (
            (TIdentifier)CloneNode (_token_),
            (PExp)CloneNode (_receiver_),
            CloneList (_args_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADelegateInvokeExp(this);
    }

    public TIdentifier GetToken ()
    {
        return _token_;
    }

    public void SetToken (TIdentifier node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetReceiver ()
    {
        return _receiver_;
    }

    public void SetReceiver (PExp node)
    {
        if(_receiver_ != null)
        {
            _receiver_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _receiver_ = node;
    }
    public IList GetArgs ()
    {
        return _args_;
    }

    public void setArgs (IList list)
    {
        _args_.Clear();
        _args_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_receiver_)
            + ToString (_args_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _receiver_ == child )
        {
            _receiver_ = null;
            return;
        }
        if ( _args_.Contains(child) )
        {
            _args_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TIdentifier) newChild);
            return;
        }
        if ( _receiver_ == oldChild )
        {
            SetReceiver ((PExp) newChild);
            return;
        }
        for ( int i = 0; i < _args_.Count; i++ )
        {
            Node n = (Node)_args_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _args_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _args_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

[Serializable]
    private class Args_Cast : Cast
    {
        ADelegateInvokeExp obj;

        internal Args_Cast (ADelegateInvokeExp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExp node = (PExp) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExp node = (PExp) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class AIfExp : PExp
{
    private TQuestionmark _token_;
    private PExp _cond_;
    private PExp _then_;
    private PExp _else_;

    public AIfExp ()
    {
    }

    public AIfExp (
            TQuestionmark _token_,
            PExp _cond_,
            PExp _then_,
            PExp _else_
    )
    {
        SetToken (_token_);
        SetCond (_cond_);
        SetThen (_then_);
        SetElse (_else_);
    }

    public override Object Clone()
    {
        return new AIfExp (
            (TQuestionmark)CloneNode (_token_),
            (PExp)CloneNode (_cond_),
            (PExp)CloneNode (_then_),
            (PExp)CloneNode (_else_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfExp(this);
    }

    public TQuestionmark GetToken ()
    {
        return _token_;
    }

    public void SetToken (TQuestionmark node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetCond ()
    {
        return _cond_;
    }

    public void SetCond (PExp node)
    {
        if(_cond_ != null)
        {
            _cond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cond_ = node;
    }
    public PExp GetThen ()
    {
        return _then_;
    }

    public void SetThen (PExp node)
    {
        if(_then_ != null)
        {
            _then_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _then_ = node;
    }
    public PExp GetElse ()
    {
        return _else_;
    }

    public void SetElse (PExp node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_cond_)
            + ToString (_then_)
            + ToString (_else_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _cond_ == child )
        {
            _cond_ = null;
            return;
        }
        if ( _then_ == child )
        {
            _then_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TQuestionmark) newChild);
            return;
        }
        if ( _cond_ == oldChild )
        {
            SetCond ((PExp) newChild);
            return;
        }
        if ( _then_ == oldChild )
        {
            SetThen ((PExp) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AArrayResizeExp : PExp
{
    private TIdentifier _token_;
    private PExp _base_;
    private PExp _arg_;

    public AArrayResizeExp ()
    {
    }

    public AArrayResizeExp (
            TIdentifier _token_,
            PExp _base_,
            PExp _arg_
    )
    {
        SetToken (_token_);
        SetBase (_base_);
        SetArg (_arg_);
    }

    public override Object Clone()
    {
        return new AArrayResizeExp (
            (TIdentifier)CloneNode (_token_),
            (PExp)CloneNode (_base_),
            (PExp)CloneNode (_arg_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayResizeExp(this);
    }

    public TIdentifier GetToken ()
    {
        return _token_;
    }

    public void SetToken (TIdentifier node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetBase ()
    {
        return _base_;
    }

    public void SetBase (PExp node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }
    public PExp GetArg ()
    {
        return _arg_;
    }

    public void SetArg (PExp node)
    {
        if(_arg_ != null)
        {
            _arg_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arg_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_base_)
            + ToString (_arg_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _base_ == child )
        {
            _base_ = null;
            return;
        }
        if ( _arg_ == child )
        {
            _arg_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TIdentifier) newChild);
            return;
        }
        if ( _base_ == oldChild )
        {
            SetBase ((PExp) newChild);
            return;
        }
        if ( _arg_ == oldChild )
        {
            SetArg ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class APointerShadyDynamicOps : PShadyDynamicOps
{
    private TStar _token_;

    public APointerShadyDynamicOps ()
    {
    }

    public APointerShadyDynamicOps (
            TStar _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new APointerShadyDynamicOps (
            (TStar)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPointerShadyDynamicOps(this);
    }

    public TStar GetToken ()
    {
        return _token_;
    }

    public void SetToken (TStar node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TStar) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AArrayShadyDynamicOps : PShadyDynamicOps
{
    private TLBracket _token_;
    private PExp _exp_;

    public AArrayShadyDynamicOps ()
    {
    }

    public AArrayShadyDynamicOps (
            TLBracket _token_,
            PExp _exp_
    )
    {
        SetToken (_token_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AArrayShadyDynamicOps (
            (TLBracket)CloneNode (_token_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayShadyDynamicOps(this);
    }

    public TLBracket GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLBracket node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLBracket) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AALocalDeclRight : PLocalDeclRight
{
    private TIdentifier _name_;
    private PAssignop _assignop_;
    private PExp _init_;

    public AALocalDeclRight ()
    {
    }

    public AALocalDeclRight (
            TIdentifier _name_,
            PAssignop _assignop_,
            PExp _init_
    )
    {
        SetName (_name_);
        SetAssignop (_assignop_);
        SetInit (_init_);
    }

    public override Object Clone()
    {
        return new AALocalDeclRight (
            (TIdentifier)CloneNode (_name_),
            (PAssignop)CloneNode (_assignop_),
            (PExp)CloneNode (_init_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAALocalDeclRight(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PAssignop GetAssignop ()
    {
        return _assignop_;
    }

    public void SetAssignop (PAssignop node)
    {
        if(_assignop_ != null)
        {
            _assignop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignop_ = node;
    }
    public PExp GetInit ()
    {
        return _init_;
    }

    public void SetInit (PExp node)
    {
        if(_init_ != null)
        {
            _init_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _init_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_assignop_)
            + ToString (_init_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _assignop_ == child )
        {
            _assignop_ = null;
            return;
        }
        if ( _init_ == child )
        {
            _init_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _assignop_ == oldChild )
        {
            SetAssignop ((PAssignop) newChild);
            return;
        }
        if ( _init_ == oldChild )
        {
            SetInit ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AAssignAssignop : PAssignop
{
    private TAssign _token_;

    public AAssignAssignop ()
    {
    }

    public AAssignAssignop (
            TAssign _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AAssignAssignop (
            (TAssign)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignAssignop(this);
    }

    public TAssign GetToken ()
    {
        return _token_;
    }

    public void SetToken (TAssign node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TAssign) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AAddAssignop : PAssignop
{
    private TAssignAdd _token_;

    public AAddAssignop ()
    {
    }

    public AAddAssignop (
            TAssignAdd _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AAddAssignop (
            (TAssignAdd)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddAssignop(this);
    }

    public TAssignAdd GetToken ()
    {
        return _token_;
    }

    public void SetToken (TAssignAdd node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TAssignAdd) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ASubAssignop : PAssignop
{
    private TAssignSub _token_;

    public ASubAssignop ()
    {
    }

    public ASubAssignop (
            TAssignSub _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ASubAssignop (
            (TAssignSub)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubAssignop(this);
    }

    public TAssignSub GetToken ()
    {
        return _token_;
    }

    public void SetToken (TAssignSub node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TAssignSub) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AMulAssignop : PAssignop
{
    private TAssignMul _token_;

    public AMulAssignop ()
    {
    }

    public AMulAssignop (
            TAssignMul _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AMulAssignop (
            (TAssignMul)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMulAssignop(this);
    }

    public TAssignMul GetToken ()
    {
        return _token_;
    }

    public void SetToken (TAssignMul node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TAssignMul) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ADivAssignop : PAssignop
{
    private TAssignDiv _token_;

    public ADivAssignop ()
    {
    }

    public ADivAssignop (
            TAssignDiv _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ADivAssignop (
            (TAssignDiv)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivAssignop(this);
    }

    public TAssignDiv GetToken ()
    {
        return _token_;
    }

    public void SetToken (TAssignDiv node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TAssignDiv) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AModAssignop : PAssignop
{
    private TAssignMod _token_;

    public AModAssignop ()
    {
    }

    public AModAssignop (
            TAssignMod _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AModAssignop (
            (TAssignMod)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAModAssignop(this);
    }

    public TAssignMod GetToken ()
    {
        return _token_;
    }

    public void SetToken (TAssignMod node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TAssignMod) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ALocalLvalue : PLvalue
{
    private TIdentifier _name_;

    public ALocalLvalue ()
    {
    }

    public ALocalLvalue (
            TIdentifier _name_
    )
    {
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new ALocalLvalue (
            (TIdentifier)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALocalLvalue(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ATypeLvalue : PLvalue
{
    private TIdentifier _name_;

    public ATypeLvalue ()
    {
    }

    public ATypeLvalue (
            TIdentifier _name_
    )
    {
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new ATypeLvalue (
            (TIdentifier)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATypeLvalue(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AFieldLvalue : PLvalue
{
    private TIdentifier _name_;

    public AFieldLvalue ()
    {
    }

    public AFieldLvalue (
            TIdentifier _name_
    )
    {
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new AFieldLvalue (
            (TIdentifier)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFieldLvalue(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class APropertyLvalue : PLvalue
{
    private TIdentifier _name_;

    public APropertyLvalue ()
    {
    }

    public APropertyLvalue (
            TIdentifier _name_
    )
    {
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new APropertyLvalue (
            (TIdentifier)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPropertyLvalue(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ANamespaceLvalue : PLvalue
{
    private TIdentifier _name_;

    public ANamespaceLvalue ()
    {
    }

    public ANamespaceLvalue (
            TIdentifier _name_
    )
    {
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new ANamespaceLvalue (
            (TIdentifier)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANamespaceLvalue(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AStructFieldLvalue : PLvalue
{
    private TIdentifier _name_;

    public AStructFieldLvalue ()
    {
    }

    public AStructFieldLvalue (
            TIdentifier _name_
    )
    {
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new AStructFieldLvalue (
            (TIdentifier)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStructFieldLvalue(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AStructLvalue : PLvalue
{
    private PExp _receiver_;
    private PDotType _dot_type_;
    private TIdentifier _name_;

    public AStructLvalue ()
    {
    }

    public AStructLvalue (
            PExp _receiver_,
            PDotType _dot_type_,
            TIdentifier _name_
    )
    {
        SetReceiver (_receiver_);
        SetDotType (_dot_type_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new AStructLvalue (
            (PExp)CloneNode (_receiver_),
            (PDotType)CloneNode (_dot_type_),
            (TIdentifier)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStructLvalue(this);
    }

    public PExp GetReceiver ()
    {
        return _receiver_;
    }

    public void SetReceiver (PExp node)
    {
        if(_receiver_ != null)
        {
            _receiver_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _receiver_ = node;
    }
    public PDotType GetDotType ()
    {
        return _dot_type_;
    }

    public void SetDotType (PDotType node)
    {
        if(_dot_type_ != null)
        {
            _dot_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dot_type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_receiver_)
            + ToString (_dot_type_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _receiver_ == child )
        {
            _receiver_ = null;
            return;
        }
        if ( _dot_type_ == child )
        {
            _dot_type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _receiver_ == oldChild )
        {
            SetReceiver ((PExp) newChild);
            return;
        }
        if ( _dot_type_ == oldChild )
        {
            SetDotType ((PDotType) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AArrayLvalue : PLvalue
{
    private TLBracket _token_;
    private PExp _base_;
    private PExp _index_;

    public AArrayLvalue ()
    {
    }

    public AArrayLvalue (
            TLBracket _token_,
            PExp _base_,
            PExp _index_
    )
    {
        SetToken (_token_);
        SetBase (_base_);
        SetIndex (_index_);
    }

    public override Object Clone()
    {
        return new AArrayLvalue (
            (TLBracket)CloneNode (_token_),
            (PExp)CloneNode (_base_),
            (PExp)CloneNode (_index_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayLvalue(this);
    }

    public TLBracket GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLBracket node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }
    public PExp GetBase ()
    {
        return _base_;
    }

    public void SetBase (PExp node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }
    public PExp GetIndex ()
    {
        return _index_;
    }

    public void SetIndex (PExp node)
    {
        if(_index_ != null)
        {
            _index_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _index_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
            + ToString (_base_)
            + ToString (_index_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
        if ( _base_ == child )
        {
            _base_ = null;
            return;
        }
        if ( _index_ == child )
        {
            _index_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLBracket) newChild);
            return;
        }
        if ( _base_ == oldChild )
        {
            SetBase ((PExp) newChild);
            return;
        }
        if ( _index_ == oldChild )
        {
            SetIndex ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class APointerMultiLvalue : PLvalue
{
    private TypedList _tokens_;
    private PExp _base_;

    public APointerMultiLvalue ()
    {
        this._tokens_ = new TypedList(new Tokens_Cast(this));
    }

    public APointerMultiLvalue (
            IList _tokens_,
            PExp _base_
    )
    {
        this._tokens_ = new TypedList(new Tokens_Cast(this));
        this._tokens_.Clear();
        this._tokens_.AddAll(_tokens_);
        SetBase (_base_);
    }

    public override Object Clone()
    {
        return new APointerMultiLvalue (
            CloneList (_tokens_),
            (PExp)CloneNode (_base_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPointerMultiLvalue(this);
    }

    public IList GetTokens ()
    {
        return _tokens_;
    }

    public void setTokens (IList list)
    {
        _tokens_.Clear();
        _tokens_.AddAll(list);
    }
    public PExp GetBase ()
    {
        return _base_;
    }

    public void SetBase (PExp node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_tokens_)
            + ToString (_base_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _tokens_.Contains(child) )
        {
            _tokens_.Remove(child);
            return;
        }
        if ( _base_ == child )
        {
            _base_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _tokens_.Count; i++ )
        {
            Node n = (Node)_tokens_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _tokens_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _tokens_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _base_ == oldChild )
        {
            SetBase ((PExp) newChild);
            return;
        }
    }

[Serializable]
    private class Tokens_Cast : Cast
    {
        APointerMultiLvalue obj;

        internal Tokens_Cast (APointerMultiLvalue obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TStar node = (TStar) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TStar node = (TStar) o;
            node.Parent(null);
            return node;
        }
    }
}
[Serializable]
public sealed class APointerLvalue : PLvalue
{
    private TStar _tokens_;
    private PExp _base_;

    public APointerLvalue ()
    {
    }

    public APointerLvalue (
            TStar _tokens_,
            PExp _base_
    )
    {
        SetTokens (_tokens_);
        SetBase (_base_);
    }

    public override Object Clone()
    {
        return new APointerLvalue (
            (TStar)CloneNode (_tokens_),
            (PExp)CloneNode (_base_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPointerLvalue(this);
    }

    public TStar GetTokens ()
    {
        return _tokens_;
    }

    public void SetTokens (TStar node)
    {
        if(_tokens_ != null)
        {
            _tokens_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _tokens_ = node;
    }
    public PExp GetBase ()
    {
        return _base_;
    }

    public void SetBase (PExp node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_tokens_)
            + ToString (_base_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _tokens_ == child )
        {
            _tokens_ = null;
            return;
        }
        if ( _base_ == child )
        {
            _base_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _tokens_ == oldChild )
        {
            SetTokens ((TStar) newChild);
            return;
        }
        if ( _base_ == oldChild )
        {
            SetBase ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AAmbiguousNameLvalue : PLvalue
{
    private PName _ambiguous_;

    public AAmbiguousNameLvalue ()
    {
    }

    public AAmbiguousNameLvalue(ASimpleName simpleName)
    {
        AAName name = new AAName();
        name.GetIdentifier().Add(simpleName.Identifier);
        SetAmbiguous(name);
    }

    public AAmbiguousNameLvalue (
            PName _ambiguous_
    )
    {
        SetAmbiguous (_ambiguous_);
    }

    public override Object Clone()
    {
        return new AAmbiguousNameLvalue (
            (PName)CloneNode (_ambiguous_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAmbiguousNameLvalue(this);
    }

    public PName GetAmbiguous ()
    {
        return _ambiguous_;
    }

    public void SetAmbiguous (PName node)
    {
        if(_ambiguous_ != null)
        {
            _ambiguous_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ambiguous_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ambiguous_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ambiguous_ == child )
        {
            _ambiguous_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ambiguous_ == oldChild )
        {
            SetAmbiguous ((PName) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class APArrayLengthLvalue : PLvalue
{
    private PExp _base_;

    public APArrayLengthLvalue ()
    {
    }

    public APArrayLengthLvalue (
            PExp _base_
    )
    {
        SetBase (_base_);
    }

    public override Object Clone()
    {
        return new APArrayLengthLvalue (
            (PExp)CloneNode (_base_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPArrayLengthLvalue(this);
    }

    public PExp GetBase ()
    {
        return _base_;
    }

    public void SetBase (PExp node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_base_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _base_ == child )
        {
            _base_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _base_ == oldChild )
        {
            SetBase ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AArrayLengthLvalue : PLvalue
{
    private PExp _base_;

    public AArrayLengthLvalue ()
    {
    }

    public AArrayLengthLvalue (
            PExp _base_
    )
    {
        SetBase (_base_);
    }

    public override Object Clone()
    {
        return new AArrayLengthLvalue (
            (PExp)CloneNode (_base_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayLengthLvalue(this);
    }

    public PExp GetBase ()
    {
        return _base_;
    }

    public void SetBase (PExp node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_base_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _base_ == child )
        {
            _base_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _base_ == oldChild )
        {
            SetBase ((PExp) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AThisLvalue : PLvalue
{
    private TThis _token_;

    public AThisLvalue ()
    {
    }

    public AThisLvalue (
            TThis _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AThisLvalue (
            (TThis)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThisLvalue(this);
    }

    public TThis GetToken ()
    {
        return _token_;
    }

    public void SetToken (TThis node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TThis) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AValueLvalue : PLvalue
{
    private TValue _token_;

    public AValueLvalue ()
    {
    }

    public AValueLvalue (
            TValue _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AValueLvalue (
            (TValue)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAValueLvalue(this);
    }

    public TValue GetToken ()
    {
        return _token_;
    }

    public void SetToken (TValue node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TValue) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ADotDotType : PDotType
{
    private TDot _token_;

    public ADotDotType ()
    {
    }

    public ADotDotType (
            TDot _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ADotDotType (
            (TDot)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADotDotType(this);
    }

    public TDot GetToken ()
    {
        return _token_;
    }

    public void SetToken (TDot node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TDot) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AArrowDotType : PDotType
{
    private TArrow _token_;

    public AArrowDotType ()
    {
    }

    public AArrowDotType (
            TArrow _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AArrowDotType (
            (TArrow)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrowDotType(this);
    }

    public TArrow GetToken ()
    {
        return _token_;
    }

    public void SetToken (TArrow node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TArrow) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ATrueBool : PBool
{


    public ATrueBool (
    )
    {
    }

    public override Object Clone()
    {
        return new ATrueBool (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATrueBool(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class AFalseBool : PBool
{


    public AFalseBool (
    )
    {
    }

    public override Object Clone()
    {
        return new AFalseBool (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFalseBool(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class APlusBinop : PBinop
{
    private TPlus _token_;

    public APlusBinop ()
    {
    }

    public APlusBinop (
            TPlus _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new APlusBinop (
            (TPlus)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusBinop(this);
    }

    public TPlus GetToken ()
    {
        return _token_;
    }

    public void SetToken (TPlus node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TPlus) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AMinusBinop : PBinop
{
    private TMinus _token_;

    public AMinusBinop ()
    {
    }

    public AMinusBinop (
            TMinus _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AMinusBinop (
            (TMinus)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusBinop(this);
    }

    public TMinus GetToken ()
    {
        return _token_;
    }

    public void SetToken (TMinus node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TMinus) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ATimesBinop : PBinop
{
    private TStar _token_;

    public ATimesBinop ()
    {
    }

    public ATimesBinop (
            TStar _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ATimesBinop (
            (TStar)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATimesBinop(this);
    }

    public TStar GetToken ()
    {
        return _token_;
    }

    public void SetToken (TStar node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TStar) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ADivideBinop : PBinop
{
    private TDiv _token_;

    public ADivideBinop ()
    {
    }

    public ADivideBinop (
            TDiv _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ADivideBinop (
            (TDiv)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideBinop(this);
    }

    public TDiv GetToken ()
    {
        return _token_;
    }

    public void SetToken (TDiv node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TDiv) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AModuloBinop : PBinop
{
    private TMod _token_;

    public AModuloBinop ()
    {
    }

    public AModuloBinop (
            TMod _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AModuloBinop (
            (TMod)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAModuloBinop(this);
    }

    public TMod GetToken ()
    {
        return _token_;
    }

    public void SetToken (TMod node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TMod) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AEqBinop : PBinop
{
    private TEq _token_;

    public AEqBinop ()
    {
    }

    public AEqBinop (
            TEq _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AEqBinop (
            (TEq)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqBinop(this);
    }

    public TEq GetToken ()
    {
        return _token_;
    }

    public void SetToken (TEq node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TEq) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ANeBinop : PBinop
{
    private TNeq _token_;

    public ANeBinop ()
    {
    }

    public ANeBinop (
            TNeq _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ANeBinop (
            (TNeq)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANeBinop(this);
    }

    public TNeq GetToken ()
    {
        return _token_;
    }

    public void SetToken (TNeq node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TNeq) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ALtBinop : PBinop
{
    private TLt _token_;

    public ALtBinop ()
    {
    }

    public ALtBinop (
            TLt _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ALtBinop (
            (TLt)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALtBinop(this);
    }

    public TLt GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLt node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLt) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ALeBinop : PBinop
{
    private TLteq _token_;

    public ALeBinop ()
    {
    }

    public ALeBinop (
            TLteq _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ALeBinop (
            (TLteq)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALeBinop(this);
    }

    public TLteq GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLteq node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLteq) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AGtBinop : PBinop
{
    private TGt _token_;

    public AGtBinop ()
    {
    }

    public AGtBinop (
            TGt _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AGtBinop (
            (TGt)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGtBinop(this);
    }

    public TGt GetToken ()
    {
        return _token_;
    }

    public void SetToken (TGt node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TGt) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AGeBinop : PBinop
{
    private TGteq _token_;

    public AGeBinop ()
    {
    }

    public AGeBinop (
            TGteq _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AGeBinop (
            (TGteq)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGeBinop(this);
    }

    public TGteq GetToken ()
    {
        return _token_;
    }

    public void SetToken (TGteq node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TGteq) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AAndBinop : PBinop
{
    private TAnd _token_;

    public AAndBinop ()
    {
    }

    public AAndBinop (
            TAnd _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AAndBinop (
            (TAnd)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndBinop(this);
    }

    public TAnd GetToken ()
    {
        return _token_;
    }

    public void SetToken (TAnd node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TAnd) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AOrBinop : PBinop
{
    private TOr _token_;

    public AOrBinop ()
    {
    }

    public AOrBinop (
            TOr _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AOrBinop (
            (TOr)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrBinop(this);
    }

    public TOr GetToken ()
    {
        return _token_;
    }

    public void SetToken (TOr node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TOr) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AXorBinop : PBinop
{
    private TXor _token_;

    public AXorBinop ()
    {
    }

    public AXorBinop (
            TXor _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AXorBinop (
            (TXor)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAXorBinop(this);
    }

    public TXor GetToken ()
    {
        return _token_;
    }

    public void SetToken (TXor node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TXor) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ALazyAndBinop : PBinop
{
    private TAndAnd _token_;

    public ALazyAndBinop ()
    {
    }

    public ALazyAndBinop (
            TAndAnd _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ALazyAndBinop (
            (TAndAnd)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALazyAndBinop(this);
    }

    public TAndAnd GetToken ()
    {
        return _token_;
    }

    public void SetToken (TAndAnd node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TAndAnd) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ALazyOrBinop : PBinop
{
    private TOrOr _token_;

    public ALazyOrBinop ()
    {
    }

    public ALazyOrBinop (
            TOrOr _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ALazyOrBinop (
            (TOrOr)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALazyOrBinop(this);
    }

    public TOrOr GetToken ()
    {
        return _token_;
    }

    public void SetToken (TOrOr node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TOrOr) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ALBitShiftBinop : PBinop
{
    private TLBitShift _token_;

    public ALBitShiftBinop ()
    {
    }

    public ALBitShiftBinop (
            TLBitShift _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ALBitShiftBinop (
            (TLBitShift)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALBitShiftBinop(this);
    }

    public TLBitShift GetToken ()
    {
        return _token_;
    }

    public void SetToken (TLBitShift node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TLBitShift) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ARBitShiftBinop : PBinop
{
    private TRBitShift _token_;

    public ARBitShiftBinop ()
    {
    }

    public ARBitShiftBinop (
            TRBitShift _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ARBitShiftBinop (
            (TRBitShift)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARBitShiftBinop(this);
    }

    public TRBitShift GetToken ()
    {
        return _token_;
    }

    public void SetToken (TRBitShift node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TRBitShift) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AAeqBinop : PBinop
{
    private TEq _token_;

    public AAeqBinop ()
    {
    }

    public AAeqBinop (
            TEq _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AAeqBinop (
            (TEq)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAeqBinop(this);
    }

    public TEq GetToken ()
    {
        return _token_;
    }

    public void SetToken (TEq node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TEq) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AAneBinop : PBinop
{
    private TNeq _token_;

    public AAneBinop ()
    {
    }

    public AAneBinop (
            TNeq _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AAneBinop (
            (TNeq)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAneBinop(this);
    }

    public TNeq GetToken ()
    {
        return _token_;
    }

    public void SetToken (TNeq node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TNeq) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AConcatBinop : PBinop
{
    private TPlus _token_;

    public AConcatBinop ()
    {
    }

    public AConcatBinop (
            TPlus _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AConcatBinop (
            (TPlus)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConcatBinop(this);
    }

    public TPlus GetToken ()
    {
        return _token_;
    }

    public void SetToken (TPlus node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TPlus) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ANegateUnop : PUnop
{
    private TMinus _token_;

    public ANegateUnop ()
    {
    }

    public ANegateUnop (
            TMinus _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new ANegateUnop (
            (TMinus)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegateUnop(this);
    }

    public TMinus GetToken ()
    {
        return _token_;
    }

    public void SetToken (TMinus node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TMinus) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class AComplementUnop : PUnop
{
    private TComplement _token_;

    public AComplementUnop ()
    {
    }

    public AComplementUnop (
            TComplement _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new AComplementUnop (
            (TComplement)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAComplementUnop(this);
    }

    public TComplement GetToken ()
    {
        return _token_;
    }

    public void SetToken (TComplement node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TComplement) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class ABooleanToStringUnop : PUnop
{


    public ABooleanToStringUnop (
    )
    {
    }

    public override Object Clone()
    {
        return new ABooleanToStringUnop (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanToStringUnop(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class AByteToStringUnop : PUnop
{


    public AByteToStringUnop (
    )
    {
    }

    public override Object Clone()
    {
        return new AByteToStringUnop (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAByteToStringUnop(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class AShortToStringUnop : PUnop
{


    public AShortToStringUnop (
    )
    {
    }

    public override Object Clone()
    {
        return new AShortToStringUnop (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAShortToStringUnop(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class AIntToStringUnop : PUnop
{


    public AIntToStringUnop (
    )
    {
    }

    public override Object Clone()
    {
        return new AIntToStringUnop (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntToStringUnop(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class ACharToStringUnop : PUnop
{


    public ACharToStringUnop (
    )
    {
    }

    public override Object Clone()
    {
        return new ACharToStringUnop (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACharToStringUnop(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class AObjectToStringUnop : PUnop
{


    public AObjectToStringUnop (
    )
    {
    }

    public override Object Clone()
    {
        return new AObjectToStringUnop (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAObjectToStringUnop(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
[Serializable]
public sealed class APreIncIncDecOp : PIncDecOp
{
    private TPlusPlus _token_;

    public APreIncIncDecOp ()
    {
    }

    public APreIncIncDecOp (
            TPlusPlus _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new APreIncIncDecOp (
            (TPlusPlus)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPreIncIncDecOp(this);
    }

    public TPlusPlus GetToken ()
    {
        return _token_;
    }

    public void SetToken (TPlusPlus node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TPlusPlus) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class APreDecIncDecOp : PIncDecOp
{
    private TMinusMinus _token_;

    public APreDecIncDecOp ()
    {
    }

    public APreDecIncDecOp (
            TMinusMinus _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new APreDecIncDecOp (
            (TMinusMinus)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPreDecIncDecOp(this);
    }

    public TMinusMinus GetToken ()
    {
        return _token_;
    }

    public void SetToken (TMinusMinus node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TMinusMinus) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class APostIncIncDecOp : PIncDecOp
{
    private TPlusPlus _token_;

    public APostIncIncDecOp ()
    {
    }

    public APostIncIncDecOp (
            TPlusPlus _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new APostIncIncDecOp (
            (TPlusPlus)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPostIncIncDecOp(this);
    }

    public TPlusPlus GetToken ()
    {
        return _token_;
    }

    public void SetToken (TPlusPlus node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TPlusPlus) newChild);
            return;
        }
    }

}
[Serializable]
public sealed class APostDecIncDecOp : PIncDecOp
{
    private TMinusMinus _token_;

    public APostDecIncDecOp ()
    {
    }

    public APostDecIncDecOp (
            TMinusMinus _token_
    )
    {
        SetToken (_token_);
    }

    public override Object Clone()
    {
        return new APostDecIncDecOp (
            (TMinusMinus)CloneNode (_token_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPostDecIncDecOp(this);
    }

    public TMinusMinus GetToken ()
    {
        return _token_;
    }

    public void SetToken (TMinusMinus node)
    {
        if(_token_ != null)
        {
            _token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_ == child )
        {
            _token_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_ == oldChild )
        {
            SetToken ((TMinusMinus) newChild);
            return;
        }
    }

}

[Serializable]
public sealed class Start : Node
{
    private PSourceFile _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PSourceFile _base_,
        EOF _eof_)
    {
        SetPSourceFile(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PSourceFile) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PSourceFile GetPSourceFile()
    {
        return _base_;
    }
    public void SetPSourceFile(PSourceFile node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPSourceFile((PSourceFile) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
