/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  Galaxy_Editor_2.Compiler.Generated.analysis;

namespace Galaxy_Editor_2.Compiler.Generated.node {


[Serializable]
public sealed class TWhiteSpace : Token
{
    public TWhiteSpace(string text)
    {
        Text = text;
    }

    public TWhiteSpace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TWhiteSpace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTWhiteSpace(this);
    }
}

[Serializable]
public sealed class TTraditionalComment : Token
{
    public TTraditionalComment(string text)
    {
        Text = text;
    }

    public TTraditionalComment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTraditionalComment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTraditionalComment(this);
    }
}

[Serializable]
public sealed class TDocumentationComment : Token
{
    public TDocumentationComment(string text)
    {
        Text = text;
    }

    public TDocumentationComment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDocumentationComment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDocumentationComment(this);
    }
}

[Serializable]
public sealed class TEndOfLineComment : Token
{
    public TEndOfLineComment(string text)
    {
        Text = text;
    }

    public TEndOfLineComment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TEndOfLineComment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTEndOfLineComment(this);
    }
}

[Serializable]
public sealed class TBreak : Token
{
    public TBreak(string text)
    {
        Text = text;
    }

    public TBreak(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBreak(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBreak(this);
    }
}

[Serializable]
public sealed class TConst : Token
{
    public TConst(string text)
    {
        Text = text;
    }

    public TConst(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TConst(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTConst(this);
    }
}

[Serializable]
public sealed class TContinue : Token
{
    public TContinue(string text)
    {
        Text = text;
    }

    public TContinue(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TContinue(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTContinue(this);
    }
}

[Serializable]
public sealed class TElse : Token
{
    public TElse(string text)
    {
        Text = text;
    }

    public TElse(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TElse(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTElse(this);
    }
}

[Serializable]
public sealed class TIf : Token
{
    public TIf(string text)
    {
        Text = text;
    }

    public TIf(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIf(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIf(this);
    }
}

[Serializable]
public sealed class TInclude : Token
{
    public TInclude(string text)
    {
        Text = text;
    }

    public TInclude(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TInclude(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTInclude(this);
    }
}

[Serializable]
public sealed class TNative : Token
{
    public TNative(string text)
    {
        Text = text;
    }

    public TNative(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNative(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNative(this);
    }
}

[Serializable]
public sealed class TReturn : Token
{
    public TReturn(string text)
    {
        Text = text;
    }

    public TReturn(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TReturn(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTReturn(this);
    }
}

[Serializable]
public sealed class TStatic : Token
{
    public TStatic(string text)
    {
        Text = text;
    }

    public TStatic(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TStatic(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTStatic(this);
    }
}

[Serializable]
public sealed class TStruct : Token
{
    public TStruct(string text)
    {
        Text = text;
    }

    public TStruct(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TStruct(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTStruct(this);
    }
}

[Serializable]
public sealed class TVoid : Token
{
    public TVoid(string text)
    {
        Text = text;
    }

    public TVoid(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TVoid(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTVoid(this);
    }
}

[Serializable]
public sealed class TWhile : Token
{
    public TWhile(string text)
    {
        Text = text;
    }

    public TWhile(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TWhile(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTWhile(this);
    }
}

[Serializable]
public sealed class TEscapeGlobal : Token
{
    public TEscapeGlobal(string text)
    {
        Text = text;
    }

    public TEscapeGlobal(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TEscapeGlobal(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTEscapeGlobal(this);
    }
}

[Serializable]
public sealed class TInline : Token
{
    public TInline(string text)
    {
        Text = text;
    }

    public TInline(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TInline(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTInline(this);
    }
}

[Serializable]
public sealed class TRef : Token
{
    public TRef(string text)
    {
        Text = text;
    }

    public TRef(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRef(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRef(this);
    }
}

[Serializable]
public sealed class TOut : Token
{
    public TOut(string text)
    {
        Text = text;
    }

    public TOut(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOut(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOut(this);
    }
}

[Serializable]
public sealed class TTrigger : Token
{
    public TTrigger(string text)
    {
        Text = text;
    }

    public TTrigger(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTrigger(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTrigger(this);
    }
}

[Serializable]
public sealed class TEvents : Token
{
    public TEvents(string text)
    {
        Text = text;
    }

    public TEvents(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TEvents(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTEvents(this);
    }
}

[Serializable]
public sealed class TConditions : Token
{
    public TConditions(string text)
    {
        Text = text;
    }

    public TConditions(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TConditions(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTConditions(this);
    }
}

[Serializable]
public sealed class TActions : Token
{
    public TActions(string text)
    {
        Text = text;
    }

    public TActions(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TActions(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTActions(this);
    }
}

[Serializable]
public sealed class TNamespace : Token
{
    public TNamespace(string text)
    {
        Text = text;
    }

    public TNamespace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNamespace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNamespace(this);
    }
}

[Serializable]
public sealed class TUsing : Token
{
    public TUsing(string text)
    {
        Text = text;
    }

    public TUsing(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TUsing(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTUsing(this);
    }
}

[Serializable]
public sealed class TPreloadBank : Token
{
    public TPreloadBank(string text)
    {
        Text = text;
    }

    public TPreloadBank(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPreloadBank(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPreloadBank(this);
    }
}

[Serializable]
public sealed class TAsyncInvoke : Token
{
    public TAsyncInvoke(string text)
    {
        Text = text;
    }

    public TAsyncInvoke(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAsyncInvoke(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAsyncInvoke(this);
    }
}

[Serializable]
public sealed class TSyncInvoke : Token
{
    public TSyncInvoke(string text)
    {
        Text = text;
    }

    public TSyncInvoke(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSyncInvoke(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSyncInvoke(this);
    }
}

[Serializable]
public sealed class TSwitch : Token
{
    public TSwitch(string text)
    {
        Text = text;
    }

    public TSwitch(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSwitch(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSwitch(this);
    }
}

[Serializable]
public sealed class TCase : Token
{
    public TCase(string text)
    {
        Text = text;
    }

    public TCase(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TCase(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTCase(this);
    }
}

[Serializable]
public sealed class TDefault : Token
{
    public TDefault(string text)
    {
        Text = text;
    }

    public TDefault(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDefault(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDefault(this);
    }
}

[Serializable]
public sealed class TDelegate : Token
{
    public TDelegate(string text)
    {
        Text = text;
    }

    public TDelegate(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDelegate(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDelegate(this);
    }
}

[Serializable]
public sealed class TTypedef : Token
{
    public TTypedef(string text)
    {
        Text = text;
    }

    public TTypedef(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTypedef(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTypedef(this);
    }
}

[Serializable]
public sealed class TGet : Token
{
    public TGet(string text)
    {
        Text = text;
    }

    public TGet(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TGet(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTGet(this);
    }
}

[Serializable]
public sealed class TSet : Token
{
    public TSet(string text)
    {
        Text = text;
    }

    public TSet(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSet(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSet(this);
    }
}

[Serializable]
public sealed class TValue : Token
{
    public TValue(string text)
    {
        Text = text;
    }

    public TValue(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TValue(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTValue(this);
    }
}

[Serializable]
public sealed class TEnrichment : Token
{
    public TEnrichment(string text)
    {
        Text = text;
    }

    public TEnrichment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TEnrichment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTEnrichment(this);
    }
}

[Serializable]
public sealed class TBase : Token
{
    public TBase(string text)
    {
        Text = text;
    }

    public TBase(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBase(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBase(this);
    }
}

[Serializable]
public sealed class TPublic : Token
{
    public TPublic(string text)
    {
        Text = text;
    }

    public TPublic(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPublic(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPublic(this);
    }
}

[Serializable]
public sealed class TPrivate : Token
{
    public TPrivate(string text)
    {
        Text = text;
    }

    public TPrivate(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPrivate(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPrivate(this);
    }
}

[Serializable]
public sealed class TProtected : Token
{
    public TProtected(string text)
    {
        Text = text;
    }

    public TProtected(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TProtected(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTProtected(this);
    }
}

[Serializable]
public sealed class TOperator : Token
{
    public TOperator(string text)
    {
        Text = text;
    }

    public TOperator(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperator(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperator(this);
    }
}

[Serializable]
public sealed class TEnum : Token
{
    public TEnum(string text)
    {
        Text = text;
    }

    public TEnum(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TEnum(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTEnum(this);
    }
}

[Serializable]
public sealed class TInitializer : Token
{
    public TInitializer(string text)
    {
        Text = text;
    }

    public TInitializer(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TInitializer(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTInitializer(this);
    }
}

[Serializable]
public sealed class TLibraryName : Token
{
    public TLibraryName(string text)
    {
        Text = text;
    }

    public TLibraryName(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLibraryName(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLibraryName(this);
    }
}

[Serializable]
public sealed class TLibraryVersion : Token
{
    public TLibraryVersion(string text)
    {
        Text = text;
    }

    public TLibraryVersion(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLibraryVersion(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLibraryVersion(this);
    }
}

[Serializable]
public sealed class TSupportedVersions : Token
{
    public TSupportedVersions(string text)
    {
        Text = text;
    }

    public TSupportedVersions(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSupportedVersions(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSupportedVersions(this);
    }
}

[Serializable]
public sealed class TRequiredLibraries : Token
{
    public TRequiredLibraries(string text)
    {
        Text = text;
    }

    public TRequiredLibraries(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRequiredLibraries(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRequiredLibraries(this);
    }
}

[Serializable]
public sealed class TDelete : Token
{
    public TDelete(string text)
    {
        Text = text;
    }

    public TDelete(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDelete(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDelete(this);
    }
}

[Serializable]
public sealed class TNew : Token
{
    public TNew(string text)
    {
        Text = text;
    }

    public TNew(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNew(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNew(this);
    }
}

[Serializable]
public sealed class TClassToken : Token
{
    public TClassToken(string text)
    {
        Text = text;
    }

    public TClassToken(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TClassToken(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTClassToken(this);
    }
}

[Serializable]
public sealed class TThis : Token
{
    public TThis(string text)
    {
        Text = text;
    }

    public TThis(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TThis(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTThis(this);
    }
}

[Serializable]
public sealed class TFor : Token
{
    public TFor(string text)
    {
        Text = text;
    }

    public TFor(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TFor(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTFor(this);
    }
}

[Serializable]
public sealed class TTrue : Token
{
    public TTrue(string text)
    {
        Text = text;
    }

    public TTrue(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTrue(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTrue(this);
    }
}

[Serializable]
public sealed class TFalse : Token
{
    public TFalse(string text)
    {
        Text = text;
    }

    public TFalse(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TFalse(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTFalse(this);
    }
}

[Serializable]
public sealed class TNull : Token
{
    public TNull(string text)
    {
        Text = text;
    }

    public TNull(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNull(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNull(this);
    }
}

[Serializable]
public sealed class TLParen : Token
{
    public TLParen(string text)
    {
        Text = text;
    }

    public TLParen(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLParen(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLParen(this);
    }
}

[Serializable]
public sealed class TRParen : Token
{
    public TRParen(string text)
    {
        Text = text;
    }

    public TRParen(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRParen(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRParen(this);
    }
}

[Serializable]
public sealed class TLBrace : Token
{
    public TLBrace(string text)
    {
        Text = text;
    }

    public TLBrace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLBrace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLBrace(this);
    }
}

[Serializable]
public sealed class TRBrace : Token
{
    public TRBrace(string text)
    {
        Text = text;
    }

    public TRBrace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRBrace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRBrace(this);
    }
}

[Serializable]
public sealed class TLBracket : Token
{
    public TLBracket(string text)
    {
        Text = text;
    }

    public TLBracket(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLBracket(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLBracket(this);
    }
}

[Serializable]
public sealed class TRBracket : Token
{
    public TRBracket(string text)
    {
        Text = text;
    }

    public TRBracket(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRBracket(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRBracket(this);
    }
}

[Serializable]
public sealed class TSemicolon : Token
{
    public TSemicolon(string text)
    {
        Text = text;
    }

    public TSemicolon(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSemicolon(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSemicolon(this);
    }
}

[Serializable]
public sealed class TComma : Token
{
    public TComma(string text)
    {
        Text = text;
    }

    public TComma(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComma(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComma(this);
    }
}

[Serializable]
public sealed class TDot : Token
{
    public TDot(string text)
    {
        Text = text;
    }

    public TDot(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDot(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDot(this);
    }
}

[Serializable]
public sealed class TArrow : Token
{
    public TArrow(string text)
    {
        Text = text;
    }

    public TArrow(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TArrow(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTArrow(this);
    }
}

[Serializable]
public sealed class TColon : Token
{
    public TColon(string text)
    {
        Text = text;
    }

    public TColon(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TColon(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTColon(this);
    }
}

[Serializable]
public sealed class TQuestionmark : Token
{
    public TQuestionmark(string text)
    {
        Text = text;
    }

    public TQuestionmark(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TQuestionmark(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTQuestionmark(this);
    }
}

[Serializable]
public sealed class TTilde : Token
{
    public TTilde(string text)
    {
        Text = text;
    }

    public TTilde(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTilde(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTilde(this);
    }
}

[Serializable]
public sealed class TSharp : Token
{
    public TSharp(string text)
    {
        Text = text;
    }

    public TSharp(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSharp(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSharp(this);
    }
}

[Serializable]
public sealed class TAssign : Token
{
    public TAssign(string text)
    {
        Text = text;
    }

    public TAssign(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAssign(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAssign(this);
    }
}

[Serializable]
public sealed class TAssignAdd : Token
{
    public TAssignAdd(string text)
    {
        Text = text;
    }

    public TAssignAdd(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAssignAdd(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAssignAdd(this);
    }
}

[Serializable]
public sealed class TAssignSub : Token
{
    public TAssignSub(string text)
    {
        Text = text;
    }

    public TAssignSub(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAssignSub(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAssignSub(this);
    }
}

[Serializable]
public sealed class TAssignMul : Token
{
    public TAssignMul(string text)
    {
        Text = text;
    }

    public TAssignMul(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAssignMul(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAssignMul(this);
    }
}

[Serializable]
public sealed class TAssignDiv : Token
{
    public TAssignDiv(string text)
    {
        Text = text;
    }

    public TAssignDiv(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAssignDiv(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAssignDiv(this);
    }
}

[Serializable]
public sealed class TAssignMod : Token
{
    public TAssignMod(string text)
    {
        Text = text;
    }

    public TAssignMod(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAssignMod(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAssignMod(this);
    }
}

[Serializable]
public sealed class TComplement : Token
{
    public TComplement(string text)
    {
        Text = text;
    }

    public TComplement(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComplement(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComplement(this);
    }
}

[Serializable]
public sealed class TAndAnd : Token
{
    public TAndAnd(string text)
    {
        Text = text;
    }

    public TAndAnd(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAndAnd(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAndAnd(this);
    }
}

[Serializable]
public sealed class TOrOr : Token
{
    public TOrOr(string text)
    {
        Text = text;
    }

    public TOrOr(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOrOr(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOrOr(this);
    }
}

[Serializable]
public sealed class TLt : Token
{
    public TLt(string text)
    {
        Text = text;
    }

    public TLt(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLt(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLt(this);
    }
}

[Serializable]
public sealed class TGt : Token
{
    public TGt(string text)
    {
        Text = text;
    }

    public TGt(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TGt(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTGt(this);
    }
}

[Serializable]
public sealed class TEq : Token
{
    public TEq(string text)
    {
        Text = text;
    }

    public TEq(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TEq(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTEq(this);
    }
}

[Serializable]
public sealed class TLteq : Token
{
    public TLteq(string text)
    {
        Text = text;
    }

    public TLteq(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLteq(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLteq(this);
    }
}

[Serializable]
public sealed class TGteq : Token
{
    public TGteq(string text)
    {
        Text = text;
    }

    public TGteq(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TGteq(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTGteq(this);
    }
}

[Serializable]
public sealed class TNeq : Token
{
    public TNeq(string text)
    {
        Text = text;
    }

    public TNeq(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNeq(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNeq(this);
    }
}

[Serializable]
public sealed class TPlus : Token
{
    public TPlus(string text)
    {
        Text = text;
    }

    public TPlus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPlus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPlus(this);
    }
}

[Serializable]
public sealed class TMinus : Token
{
    public TMinus(string text)
    {
        Text = text;
    }

    public TMinus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TMinus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTMinus(this);
    }
}

[Serializable]
public sealed class TStar : Token
{
    public TStar(string text)
    {
        Text = text;
    }

    public TStar(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TStar(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTStar(this);
    }
}

[Serializable]
public sealed class TDiv : Token
{
    public TDiv(string text)
    {
        Text = text;
    }

    public TDiv(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDiv(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDiv(this);
    }
}

[Serializable]
public sealed class TAnd : Token
{
    public TAnd(string text)
    {
        Text = text;
    }

    public TAnd(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TAnd(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTAnd(this);
    }
}

[Serializable]
public sealed class TOr : Token
{
    public TOr(string text)
    {
        Text = text;
    }

    public TOr(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOr(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOr(this);
    }
}

[Serializable]
public sealed class TXor : Token
{
    public TXor(string text)
    {
        Text = text;
    }

    public TXor(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TXor(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTXor(this);
    }
}

[Serializable]
public sealed class TMod : Token
{
    public TMod(string text)
    {
        Text = text;
    }

    public TMod(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TMod(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTMod(this);
    }
}

[Serializable]
public sealed class TLBitShift : Token
{
    public TLBitShift(string text)
    {
        Text = text;
    }

    public TLBitShift(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLBitShift(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLBitShift(this);
    }
}

[Serializable]
public sealed class TRBitShift : Token
{
    public TRBitShift(string text)
    {
        Text = text;
    }

    public TRBitShift(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRBitShift(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRBitShift(this);
    }
}

[Serializable]
public sealed class TPlusPlus : Token
{
    public TPlusPlus(string text)
    {
        Text = text;
    }

    public TPlusPlus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPlusPlus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPlusPlus(this);
    }
}

[Serializable]
public sealed class TMinusMinus : Token
{
    public TMinusMinus(string text)
    {
        Text = text;
    }

    public TMinusMinus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TMinusMinus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTMinusMinus(this);
    }
}

[Serializable]
public sealed class TIntegerLiteral : Token
{
    public TIntegerLiteral(string text)
    {
        Text = text;
    }

    public TIntegerLiteral(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIntegerLiteral(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIntegerLiteral(this);
    }
}

[Serializable]
public sealed class THexLiteral : Token
{
    public THexLiteral(string text)
    {
        Text = text;
    }

    public THexLiteral(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new THexLiteral(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTHexLiteral(this);
    }
}

[Serializable]
public sealed class TOctalLiteral : Token
{
    public TOctalLiteral(string text)
    {
        Text = text;
    }

    public TOctalLiteral(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOctalLiteral(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOctalLiteral(this);
    }
}

[Serializable]
public sealed class TFixedLiteral : Token
{
    public TFixedLiteral(string text)
    {
        Text = text;
    }

    public TFixedLiteral(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TFixedLiteral(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTFixedLiteral(this);
    }
}

[Serializable]
public sealed class TStringLiteral : Token
{
    public TStringLiteral(string text)
    {
        Text = text;
    }

    public TStringLiteral(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TStringLiteral(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTStringLiteral(this);
    }
}

[Serializable]
public sealed class TCharLiteral : Token
{
    public TCharLiteral(string text)
    {
        Text = text;
    }

    public TCharLiteral(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TCharLiteral(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTCharLiteral(this);
    }
}

[Serializable]
public sealed class TIdentifier : Token
{
    public TIdentifier(string text)
    {
        Text = text;
    }

    public TIdentifier(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIdentifier(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIdentifier(this);
    }
}

[Serializable]
public sealed class TCommentBegin : Token
{
    public TCommentBegin(string text)
    {
        Text = text;
    }

    public TCommentBegin(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TCommentBegin(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTCommentBegin(this);
    }
}

[Serializable]
public sealed class TCommentEnd : Token
{
    public TCommentEnd(string text)
    {
        Text = text;
    }

    public TCommentEnd(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TCommentEnd(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTCommentEnd(this);
    }
}

[Serializable]
public sealed class TUnknown : Token
{
    public TUnknown(string text)
    {
        Text = text;
    }

    public TUnknown(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TUnknown(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTUnknown(this);
    }
}


[Serializable]
public abstract class Token : Node
{
    private string text;
    private int line;
    private int pos;

    public virtual string Text
    {
      get { return text; }
      set { text = value; }
    }

    public int Line
    {
      get { return line; }
      set { line = value; }
    }

    public int Pos
    {
      get { return pos; }
      set { pos = value; }
    }

    public override string ToString()
    {
        return text + " ";
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }
}

[Serializable]
public sealed class EOF : Token
{
    public EOF()
    {
        Text = "";
    }

    public EOF(int line, int pos)
    {
        Text = "";
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
        return new EOF(Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseEOF(this);
    }
}
}
